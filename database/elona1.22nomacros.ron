#![enable(implicit_some)]

AnalysisConfig(
  meta: (
    variant_name: "Elona",
    version: "1.22",
    ax_sha256: "7273270714a8a877512761880207d0014b0d22d69fb4d22b3e5c06396d6f23cc"
  ),

  includes: [
    "database/elona1.22.ron"
  ],

  options: (
    no_macros: true
  ),

  labels: {
    "*rank_init": (
      rules: [
        (
          kind: Function,
          match: "sdim rankn,"
        )
      ]
    ),
    "*politics_init": (
      rules: [
        (
          kind: Function,
          match: "sdim popostname,"
        )
      ]
    ),
    "*building_init": (
      rules: [
        (
          kind: Function,
          match: "dim bddata,"
        )
      ]
    ),
    "*bRefDefine": (
      rules: [
        (
          kind: Function,
          match: "dim bdataref,"
        )
      ]
    ),
    "*sRefDefine": (
      rules: [
        (
          kind: Function,
          match: "dim sdataref,"
        )
      ]
    ),
    "*trait_init": (
      rules: [
        (
          kind: Function,
          match: "dim traitref, 10"
        )
      ]
    ),
    "*trait_ref": (
      rules: [
        (
          kind: If,
          match: "if ( tid == TRAIT_NORMAL_STAT_STAMINA ) {"
        )
      ]
    ),
    "*cm_putTrait": (
      rules: [
        (
          kind: If,
          match: "if ( cdatan(CDATAN_RACE, CHARA_PLAYER) == \"dwarf\" ) {"
        )
      ]
    ),
    "*sound_init": (
      rules: [
        (
          kind: Function,
          match: "sndload folder + \"pop1.wav\", SOUNDLIST_POP1"
        )
      ]
    ),
    "*music_init": (
      rules: [
        (
          kind: Assignment,
          match: "s = exedir + \"user\\\\music\\\\musiclist.txt\""
        )
      ]
    ),
    "*music_play": (
      rules: [
        (
          kind: Assignment,
          match: "env = SOUNDLIST_BG_RAIN"
        )
      ]
    ),
    "*map_randNameInit": (
      rules: [
        (
          kind: StringLiteral,
          match: "はじまりの"
        )
      ]
    ),
    "*item_foodInit": (
      rules: [
        (
          kind: Function,
          match: "dim picfood, 10, "
        )
      ]
    ),
    "*convert_word": (
      rules: [
        (
          kind: Assignment,
          match: "s = lang(\"\" + gdata(GDATA_GUEST), \"\" + gdata(GDATA_GUEST) + \" guest\" + _s2(gdata(GDATA_GUEST)))"
        )
      ]
    ),
    "*convert_talk": (
      rules: [
        (
          kind: Assignment,
          match: "p = rnd(noteinfo(0))"
        )
      ]
    ),
    "*spec_talk": (
      after: "*convert_talk"
    ),
    "*random_talk": (
      rules: [
        (
          kind: Assignment,
          match: "p = instr(buff, 0, \"%BORED,\" + lang(\"JP\", \"EN\"))"
        )
      ]
    ),
    "*quest_info": (
      rules: [
        (
          kind: StringLiteral,
          match: "ヴェルニースの南にあるネフィアの迷宮群のひとつ《レシマス》で、何かが見つかるかもしれない。"
        )
      ]
    ),
    "*quest_info2": (
      rules: [
        (
          kind: StringLiteral,
          match: "ヴェルニースのミシェスに、スライムの退治を頼まれた。スライムの巣窟は、ミシェスの家のすぐ南の家のようだ。"
        )
      ]
    ),
    "*quest_item": (
      rules: [
        (
          kind: StringLiteral,
          match: "[古びたお守り]"
        )
      ]
    ),
    "*talk_quest_load": (
      rules: [
        (
          kind: Assignment,
          match: "buff2 = \"no txt\""
        )
      ]
    ),
    "*talk_quest": (
      rules: [
        (
          kind: Assignment,
          match: "s = \"%HARVEST\""
        )
      ]
    ),
    "*talktxt_conv": (
      rules: [
        (
          kind: If,
          match: "if ( s == \"client\" ) {"
        )
      ]
    ),
    "*system_init": (
      rules: [
        (
          kind: Function,
          match: "exist exedir + \"config.txt\""
        )
      ]
    ),
    "*exit_game": (
      rules: [
        (
          kind: Function,
          match: "CloseHandle mutex_handle"
        )
      ]
    ),
    "*exit_game_error": (
      rules: [
        (
          kind: StringLiteral,
          match: "HspError "
        )
      ]
    ),
    "*pcc_wear": (
      rules: [
        (
          kind: Assignment,
          match: "locvar_create_pcpic_p = 1"
        )
      ]
    ),
    "*cloud_init": (
      rules: [
        (
          kind: Assignment,
          match: "cloud(CLOUD_PX, cnt) = 288, 1040, 208, 160"
        )
      ]
    ),
    "*mapchip_init": (
      rules: [
        (
          kind: Assignment,
          match: "chipm(CHIPM_F, xy2pic(2, 7)) = 0, 0"
        )
      ]
    ),
    "*chip_init": (
      rules: [
        (
          kind: Function,
          match: "dim cloud, 6, "
        )
      ]
    ),
    "*random_titleInit": (
      rules: [
        (
          kind: Function,
          match: "noteload lang(\"data\\\\ndata.csv\", \"data\\\\ndata-e.csv\")"
        )
      ]
    ),
    "*randomName_WHILE1": (
      rules: [
        (
          kind: Assignment,
          match: "locvar_randomname_s = rn1(rnd(length(rn1)))"
        )
      ]
    ),
    "*randomName_WHILE1_CONTINUE": (
      after: "*randomName_WHILE1",
      loop_kind: WhileContinue
    ),
    "*randomName_BREAK": (
      after: "*randomName_WHILE1_CONTINUE",
      loop_kind: Break
    ),
    "*random_title_loop": (
      rules: [
        (
          kind: Assignment,
          match: "locvar_csvsort_p(2) = rnd(length2(rnlist))"
        )
      ]
    ),
    "*end_name": (
      rules: [
        (
          kind: StringLiteral,
          match: "The army of "
        )
      ]
    ),
    "*time_warn_talk": (
      rules: [
        (
          kind: If,
          match: "if ( hour_played == 1 ) {"
        )
      ]
    ),
    "*item_encInit": (
      rules: [
        (
          kind: Function,
          match: "dim encref, 8"
        )
      ]
    ),
    "*item_encdetail": (
      rules: [
        (
          kind: StringLiteral,
          match: "ランダムなテレポートを引き起こす"
        )
      ]
    ),
    "*item_egoInit": (
      rules: [
        (
          kind: Function,
          match: "sdim egoname"
        )
      ]
    ),
    "*item_egoMinor": (
      rules: [
        (
          kind: Function,
          match: "encadd ci, randomenc(randomenclv(egolv)), randomencp(), 8"
        )
      ]
    ),
    "*item_ego": (
      rules: [
        (
          kind: If,
          match: "if ( egoref(1, cnt) != 0 ) {"
        )
      ]
    ),
    "*item_enc": (
      rules: [
        (
          kind: Function,
          match: "encadd ci, ENCHANT_ATTRIBUTE * EXT_ENCHANTMENT + SKILL_ATTR_MAG, randomencp()"
        )
      ]
    ),
    "*item_materialInit": (
      rules: [
        (
          kind: Function,
          match: "sdim mtname, 18, 2,"
        )
      ]
    ),
    "*item_material": (
      after: "*item_materialInit"
    ),
    "*choose_material": (
      rules: [
        (
          kind: Assignment,
          match: "mtlv = rnd(objlv + 1) / 10 + 1"
        )
      ]
    ),
    "*remake_material": (
      rules: [
        (
          kind: Assignment,
          match: "dbmode = DBMODE_SET_STATS"
        )
      ]
    ),
    "*apply_material": (
      rules: [
        (
          kind: Assignment,
          match: "p(1) = 150, 80"
        )
      ]
    ),
    "*apply_materialEnc": (
      rules: [
        (
          kind: Function,
          match: "encadd ci, mtenc(cnt * 2, p), mtenc(cnt * 2 + 1, p), 0, 1"
        )
      ]
    ),
    "*fish_init": (
      rules: [
        (
          kind: Function,
          match: "dim fishdata, 10, 100"
        )
      ]
    ),
    "*itemNameSub": (
      rules: [
        (
          kind: StringLiteral,
          match: "》という題名の"
        )
      ]
    ),
    "*skipName": (
      rules: [
        (
          kind: StringLiteral,
          match: "(媚薬混入)"
        )
      ]
    ),
    "*skip_stack": (
      rules: [
        (
          kind: StringLiteral,
          match: "をまとめた(計"
        )
      ]
    ),
    "*skipitemDraw": (
      rules: [
        (
          kind: If,
          match: "if ( locvar_cell_draw_p == 528 ) {"
        )
      ]
    ),
    "*fov_los_WHILE1": (
      rules: [
        (
          kind: If,
          match: "if ( locvar_fov_los_ty < fov_los_arg4 == 0 ) {"
        ),
        (
          kind: If,
          match: "if ( map(fov_los_arg1, locvar_fov_los_ty, MAP_MEF_INDEX_PLUS_ONE) != 0 ) {"
        ),
        (
          kind: If,
          match: "if ( mef(MEF_TYPE, map(fov_los_arg1, locvar_fov_los_ty, MAP_MEF_INDEX_PLUS_ONE) - 1) == MEF_TYPE_KEMURIDAMA ) {"
        )
      ],
      loop_kind: While
    ),
    "*fov_los_WEND1": (
      after: "*fov_los_WHILE1",
      loop_kind: WhileEnd
    ),
    "*fov_los_WHILE2": (
      after: "*fov_los_WEND1",
      loop_kind: While,
    ),
    "*fov_los_WEND2": (
      after: "*fov_los_WHILE2",
      loop_kind: WhileEnd
    ),
    "*fov_los_WHILE3": (
      after: "*fov_los_WEND2",
      loop_kind: While,
    ),
    "*fov_los_WEND3": (
      after: "*fov_los_WHILE3",
      loop_kind: WhileEnd,
    ),
    "*fov_los_WHILE4": (
      after: "*fov_los_WEND3",
      loop_kind: While,
    ),
    "*fov_los_WEND4": (
      after: "*fov_los_WHILE4",
      loop_kind: WhileEnd,
    ),
    "*fov_los_WHILE5": (
      after: "*fov_los_WEND4",
      loop_kind: While,
    ),
    "*fov_los_WEND5": (
      after: "*fov_los_WHILE5",
      loop_kind: WhileEnd,
    ),
    "*fov_los_WHILE6": (
      after: "*fov_los_WEND5",
      loop_kind: While,
    ),
    "*fov_los_WEND6": (
      after: "*fov_los_WHILE6",
      loop_kind: WhileEnd,
    ),
    "*fov_los_WHILE7": (
      after: "*fov_los_WEND6",
      loop_kind: While,
    ),
    "*fov_los_WEND7": (
      after: "*fov_los_WHILE7",
      loop_kind: WhileEnd,
    ),
    "*fov_los_WHILE8": (
      after: "*fov_los_WEND7",
      loop_kind: While,
    ),
    "*fov_los_WEND8": (
      after: "*fov_los_WHILE8",
      loop_kind: WhileEnd,
    ),
    "*fov_los_WHILE9": (
      after: "*fov_los_WEND8",
      loop_kind: While,
    ),
    "*fov_los_WEND9": (
      after: "*fov_los_WHILE9",
      loop_kind: WhileEnd,
    ),
    "*fov_los_WHILE10": (
      after: "*fov_los_WEND9",
      loop_kind: While,
    ),
    "*fov_los_WEND10": (
      after: "*fov_los_WHILE10",
      loop_kind: WhileEnd,
    ),
    "*get_route_WHILE1": (
      rules: [
        (
          kind: If,
          match: "if ( locvar_fov_los_ty < get_route_arg4 == 0 ) {"
        )
      ],
      loop_kind: While
    ),
    "*get_route_WEND1": (
      after: "*get_route_WHILE1",
      loop_kind: WhileEnd
    ),
    "*get_route_WHILE2": (
      after: "*get_route_WEND1",
      loop_kind: While
    ),
    "*get_route_WEND2": (
      after: "*get_route_WHILE2",
      loop_kind: WhileEnd
    ),
    "*get_route_WHILE3": (
      after: "*get_route_WEND2",
      loop_kind: While
    ),
    "*get_route_WEND3": (
      after: "*get_route_WHILE3",
      loop_kind: WhileEnd
    ),
    "*get_route_WHILE4": (
      after: "*get_route_WEND3",
      loop_kind: While
    ),
    "*get_route_WEND4": (
      after: "*get_route_WHILE4",
      loop_kind: WhileEnd
    ),
    "*get_route_WHILE5": (
      after: "*get_route_WEND4",
      loop_kind: While
    ),
    "*get_route_WEND5": (
      after: "*get_route_WHILE5",
      loop_kind: WhileEnd
    ),
    "*get_route_WHILE6": (
      after: "*get_route_WEND5",
      loop_kind: While
    ),
    "*get_route_WEND6": (
      after: "*get_route_WHILE6",
      loop_kind: WhileEnd
    ),
    "*conv_crlf_@": (
      rules: [
        (
          kind: Function,
          match: "getstr locvar_conv_crlf_tmpstr, conv_crlf_arg1, locvar_conv_crlf_i"
        )
      ]
    ),
    "*mRefDefine": (
      rules: [
        (
          kind: Function,
          match: "dim matval, 4"
        )
      ]
    ),
    "*db_item": (
      rules: [
        (
          kind: If,
          match: "if ( dbmode != DBMODE_FIND )"
        ),
        (
          kind: Assignment,
          match: "dbmax = 0"
        ),
        (
          kind: Assignment,
          match: "dbsum = 0"
        ),
      ]
    ),
    "*db_setFilterItem": (
      rules: [
        (
          kind: Assignment,
          match: "filter_item(ITEM_ID_HAND_AXE) = \"\""
        )
      ]
    ),
    "*db_setItem": (
      rules: [
        (
          kind: Assignment,
          match: "ipicref(ITEM_ID_LARGE_BOOKSHELF) = xy2pic(13, 16)"
        )
      ]
    ),
    "*recipe_ref": (
      rules: [
        (
          kind: Assignment,
          match: "matneed = -1, -1, -1, -1, -1, -1, -1, -1, -1, -1"
        )
      ]
    ),
    "*conCalc": (
      rules: [
        (
          kind: Assignment,
          match: "locvar_dmgcon_r = sdata(locvar_dmgcon_res, dmgcon_charid) / 50"
        )
      ]
    ),
    "*skipDmgTxt": (
      rules: [
        (
          kind: StringLiteral,
          match: "死の宣告は無効になった。"
        )
      ]
    ),
    "*exit_death": (
      rules: [
        (
          kind: If,
          match: "if ( cfg_dhyouji == 2 ) {"
        )
      ]
    ),
    "*net_read_WHILE1": (
      rules: [
        (
          kind: Function,
          match: "txt \"[Chat Skipped]\""
        )
      ],
      loop_kind: While
    ),
    "*net_read_WEND1": (
      after: "*net_read_WHILE1",
      loop_kind: WhileEnd
    ),
    "*net_init": (
      rules: [
        (
          kind: Function,
          match: "sdim cgiurl2"
        )
      ]
    ),
    "*net_chat": (
      rules: [
        (
          kind: StringLiteral,
          match: "もう少し待った方がいい気がする。"
        )
      ]
    ),
    "*com_vote_new": (
      rules: [
        (
          kind: StringLiteral,
          match: "現在、処刑投票は行われていない。"
        )
      ]
    ),
    "*com_vote_new_loop": (
      after: "*com_vote_new",
      loop_kind: While

    ),
    "*com_vote_new_loop_WHILE1": (
      after: "*com_vote_new_loop",
      loop_kind: WhileContinue
    ),
    "*com_vote_new_loop_WEND1": (
      after: "*com_vote_new_loop_WHILE1",
      loop_kind: WhileEnd
    ),
    "*com_vote": (
      rules: [
        (
          kind: StringLiteral,
          match: "あなたの異名を登録する"
        )
      ]
    ),
    "*com_vote_loop": (
      after: "*com_vote"
    ),
    "*com_vote_loop_WHILE1": (
      after: "*com_vote_loop",
      loop_kind: While
    ),
    "*com_vote_loop_WEND1": (
      after: "*com_vote_loop_WHILE1",
      loop_kind: WhileEnd
    ),
    "*uploader": (
      rules: [
        (
          kind: Function,
          match: "picload exedir + \"graphic\\\\uploader.bmp\""
        )
      ]
    ),
    "*uploader_load": (
      after: "*uploader"
    ),
    "*uploader_main": (
      after: "*uploader_load"
    ),
    "*uploader_event": (
      after: "*uploader_main"
    ),
    "*OnNavigateComplete2": (
      rules: [
        (
          kind: Assignment,
          match: "pdoc = ie(\"Document\")"
        )
      ]
    ),
    "*browser": (
      rules: [
        (
          kind: Function,
          match: "picload exedir + \"graphic\\\\browser.bmp\""
        )
      ]
    ),
    "*browser_load": (
      after: "*browser"
    ),
    "*browser_main": (
      after: "*browser_load"
    ),
    "*browser_event": (
      after: "*browser_main"
    ),
    "*screen_init": (
      rules: [
        (
          kind: Assignment,
          match: "inf_barh = 16"
        )
      ]
    ),
    "*screen_txtAdv": (
      rules: [
        (
          kind: Function,
          match: "gcopy BUFFER_INF, 192, 360, 24, 16"
        )
      ]
    ),
    "*screen_refresh": (
      after: "*screen_txtAdv"
    ),
    "*screen_refreshFull": (
      rules: [
        (
          kind: Function,
          match: "gcopy BUFFER_INF, 120, 504, inf_msgx, inf_verh"
        )
      ]
    ),
    "*screen_raderRefresh": (
      rules: [
        (
          kind: If,
          match: "if ( map(sx, sy, MAP_TILE_ID_MEMORY) == map(sx, sy, MAP_TILE_ID) ) {"
        )
      ]
    ),
    "*screen_draw": (
      rules: [
        (
          kind: Assignment,
          match: "screendrawhack = 1",
          exact: true
        )
      ]
    ),
    "*screen_sync": (
      after: "*screen_draw"
    ),
    "*screen_drawStatus": (
      rules: [
        (
          kind: Function,
          match: "mes _conblind"
        )
      ]
    ),
    "*autoTurn_pic": (
      rules: [
        (
          kind: Function,
          match: "picload exedir + \"\\\\graphic\\\\anime2.bmp\""
        )
      ]
    ),
    "*screen_drawAutoTurn": (
      rules: [
        (
          kind: Function,
          match: "bmes \"AUTO TURN\", 235, 235, 235"
        )
      ]
    ),
    "*screen_drawMsg2": (
      rules: [
        (
          kind: Function,
          match: "gcopy BUFFER_INF, 672, 477, ap, 2"
        )
      ]
    ),
    "*anime": (
      rules: [
        (
          kind: Assignment,
          match: "anisound = 0"
        )
      ]
    ),
    "*anime_SWEND1": (
      after: "*anime",
      loop_kind: SwitchEnd
    ),
    "*screen_setPos": (
      rules: [
        (
          kind: Assignment,
          match: "sx = cdata(CDATA_X_NEW, CHARA_PLAYER) - scx, cdata(CDATA_X_NEW, CHARA_PLAYER)"
        )
      ]
    ),
    "*los": (
      rules: [
        (
          kind: Assignment,
          match: "sy(2) = cdata(CDATA_Y, CHARA_PLAYER) - 17 / 2, cdata(CDATA_Y, CHARA_PLAYER) + 17 / 2, 17 / 2 - cdata(CDATA_Y, CHARA_PLAYER)"
        )
      ]
    ),
    "*los_jump": (
      after: "*los"
    ),
    "*los_jump2": (
      rules: [
        (
          kind: Assignment,
          match: "slight(lx, ly) += 1000"
        )
      ]
    ),
    "*los_Loc": (
      rules: [
        (
          kind: Assignment,
          match: "sy(2) = tlocinity - val / 2, tlocinity + val / 2, val / 2 - tlocinity"
        )
      ]
    ),
    "*los_draw": (
      rules: [
        (
          kind: Assignment,
          match: "screendrawhack = 2"
        )
      ]
    ),
    "*screen_rain": (
      rules: [
        (
          kind: Function,
          match: "line rainx(cnt) - 40, rainy(cnt) - cnt \\ 3 - 1, rainx(cnt) - 39 + cnt \\ 2, rainy(cnt)"
        )
      ]
    ),
    "*screen_hardRain": (
      rules: [
        (
          kind: Function,
          match: "line rainx(cnt) - 40, rainy(cnt) - cnt \\ 5 - 4, rainx(cnt) - 39 + cnt \\ 2, rainy(cnt)"
        )
      ]
    ),
    "*screen_snow": (
      rules: [
        (
          kind: Function,
          match: "gcopy BUFFER_INF, rainx(cnt) \\ 2 * 8, 600 + cnt \\ 6 * 8"
        )
      ]
    ),
    "*screen_ether": (
      rules: [
        (
          kind: Function,
          match: "gcopy BUFFER_INF, 16 + rainx(cnt) \\ 2 * 8, 600 + cnt \\ 6 * 8"
        )
      ]
    ),
    "*screen_scroll": (
      rules: [
        (
          kind: Assignment,
          match: "scrollp = cfg_walkwait"
        )
      ]
    ),
    "*rader_preDraw": (
      rules: [
        (
          kind: Function,
          match: "gfini raderw * mdata(MDATA_WIDTH), raderh * mdata(MDATA_HEIGHT)"
        )
      ]
    ),
    "*screen_drawRader": (
      rules: [
        (
          kind: Function,
          match: "pos inf_raderx + sx(1), inf_radery + sy(1)"
        )
      ]
    ),
    "*screen_fade": (
      rules: [
        (
          kind: Function,
          match: "gfini windoww, windowh - 88"
        )
      ]
    ),
    "*screen_fadeIn": (
      rules: [
        (
          kind: Function,
          match: "gfini windoww, windowh",
          exact: true
        )
      ]
    ),
    "*screen_fadeOut": (
      after: "*screen_fadeIn"
    ),
    "*screen_drawEventFull": (
      rules: [
        (
          kind: Assignment,
          match: "evscrh = windowh / evtiles - 1"
        )
      ]
    ),
    "*screen_drawEventMap": (
      rules: [
        (
          kind: Function,
          match: "pos x * evtiles, y * evtiles"
        )
      ]
    ),
    "*fishing_draw": (
      rules: [
        (
          kind: Assignment,
          match: "fishdir = 0, 1, 3, 2"
        )
      ]
    ),
    "*calcBodyFix": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_BODY_SPEED_FIX, r1) = 0"
        )
      ]
    ),
    "*calcBodyGain": (
      rules: [
        (
          kind: StringLiteral,
          match: "の身体から新たな"
        )
      ]
    ),
    "*calcLevelUp": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_SKILLPOINT, r1) += p"
        )
      ]
    ),
    "*calcGodRecruitingPenalty": (
      rules: [
        (
          kind: Assignment,
          match: "sdata(cnt + STARTING_SKILL_SPACT, r1) = limit(sdata(cnt + STARTING_SKILL_SPACT, r1) / 5, 1000 * 50000, 1000 * 400000)"
        )
      ]
    ),
    "*calcMaileINITService": (
      rules: [
        (
          kind: If,
          match: "if ( sdata(cnt + STARTING_SKILL_SPACT, r1) > 1000 * 20000 ) {"
        )
      ]
    ),
    "*calcAdvRecruitingPenalty": (
      rules: [
        (
          kind: Assignment,
          match: "sdata(cnt + STARTING_SKILL_SPACT, r1) = limit(sdata(cnt + STARTING_SKILL_SPACT, r1) / 2, 1, 1000 * 200000)"
        )
      ]
    ),
    "*calcSoulSpindlePenalty": (
      rules: [
        (
          kind: Assignment,
          match: "sdata(cnt + STARTING_SKILL_SPACT, r1) = limit(sdata(cnt + STARTING_SKILL_SPACT, r1), 1, 1000 * 50000)"
        )
      ]
    ),
    "*calcPowerUp": (
      rules: [
        (
          kind: Assignment,
          match: "sdata(mainskill(cnt) + STARTING_SKILL_SPACT, r1) = limit(sdata(mainskill(cnt)"
        )
      ]
    ),
    "*calcExpToNextLevel": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_EXP_TO_NEXT_LVL, r1) = 100000000"
        )
      ]
    ),
    "*expDig": (
      rules: [
        (
          kind: Function,
          match: "skillexp SKILL_NORMAL_MINING, CHARA_PLAYER, 100"
        )
      ]
    ),
    "*expLiteracy": (
      rules: [
        (
          kind: Function,
          match: "skillexp SKILL_NORMAL_LITERACY, CHARA_PLAYER, 15, 10, 100"
        )
      ]
    ),
    "*expTrade": (
      rules: [
        (
          kind: Function,
          match: "skillexp SKILL_NORMAL_NEGOTIATION, r1, limit(r2 / (limit(sdata(SKILL_NORMAL_NEGOTIATION, r1), 1, 100) + 10), 10, 300), 10"
        )
      ]
    ),
    "*expOpenLock": (
      rules: [
        (
          kind: Function,
          match: "skillexp SKILL_NORMAL_LOCK_PICKING, r1, 100"
        )
      ]
    ),
    "*expDetection": (
      rules: [
        (
          kind: Function,
          match: "skillexp SKILL_NORMAL_DETECTION, cc, gdata(GDATA_LEVEL) * 2 + 20"
        )
      ]
    ),
    "*expCasting": (
      rules: [
        (
          kind: Function,
          match: "skillexp SKILL_NORMAL_CASTING, r1, sdataref(SKILL_DATAREF_COST, r2) + 10, 5"
        )
      ]
    ),
    "*expMagicCapacity": (
      rules: [
        (
          kind: Function,
          match: "skillexp SKILL_NORMAL_MAGIC_CAPACITY, r1, limit(abs(cdata(CDATA_MP, r1)) * 400 / (cdata(CDATA_MAX_MP, r1) + 1),"
        )
      ]
    ),
    "*expRegen": (
      rules: [
        (
          kind: Function,
          match: "skillexp SKILL_NORMAL_HEALING, r1, 5 + sdata(SKILL_NORMAL_HEALING, r1), 1000"
        )
      ]
    ),
    "*expStealth": (
      rules: [
        (
          kind: Function,
          match: "skillexp SKILL_NORMAL_STEALTH, r1, 2, 0, 1000"
        )
      ]
    ),
    "*expInvesting": (
      rules: [
        (
          kind: Function,
          match: "skillexp SKILL_NORMAL_INVESTING, CHARA_PLAYER, 600"
        )
      ]
    ),
    "*expWeightLifting": (
      rules: [
        (
          kind: Function,
          match: "skillexp SKILL_NORMAL_WEIGHT_LIFTING, r1, 4, 0, 1000"
        )
      ]
    ),
    "*expSwimming": (
      rules: [
        (
          kind: Function,
          match: "skillexp SKILL_NORMAL_SWIMMING, r1, 4, 0, 1000"
        )
      ]
    ),
    "*expArmor": (
      rules: [
        (
          kind: Function,
          match: "skillexp SKILL_NORMAL_HEAVY_ARMOR, r1, 20, 0, 1000"
        )
      ]
    ),
    "*expRiding": (
      rules: [
        (
          kind: Function,
          match: "skillexp SKILL_ACTIVE_RIDING, r1, 4, 0, 1000"
        )
      ]
    ),
    "*expMagicDevice": (
      rules: [
        (
          kind: Function,
          match: "skillexp SKILL_NORMAL_MAGIC_DEVICE, cc, 40"
        ),
        (
          kind: Function,
          match: "return",
          exact: true
        )
      ]
    ),
    "*expFishing": (
      rules: [
        (
          kind: Function,
          match: "skillexp SKILL_NORMAL_FISHING, CHARA_PLAYER, 100"
        )
      ]
    ),
    "*expMemorize": (
      rules: [
        (
          kind: Function,
          match: "skillexp SKILL_NORMAL_MEMORIZATION, CHARA_PLAYER, 10 + sdataref(SKILL_DATAREF_DIFF, efid) / 5"
        )
      ]
    ),
    "*expProduct": (
      rules: [
        (
          kind: Function,
          match: "skillexp r1, CHARA_PLAYER, limit(100 + r2 * 30, 100, 1500)"
        )
      ]
    ),
    "*charaRefresh": (
      rules: [
        (
          kind: Assignment,
          match: "chararefreshhack = TRUE"
        )
      ]
    ),
    "*calcInitialSkill": (
      rules: [
        (
          kind: Function,
          match: "skillinit SKILL_WEAPON_LONGSWORD, r1, i"
        )
      ]
    ),
    "*calcReadCheck": (
      rules: [
        (
          kind: StringLiteral,
          match: "は余計に混乱した。"
        )
      ]
    ),
    "*calcSearch": (
      rules: [
        (
          kind: Function,
          match: "gosub *expDetection"
        )
      ]
    ),
    "*calcTrap": (
      rules: [
        (
          kind: If,
          match: "if ( rnd(refdiff + 1) < sdata(SKILL_ATTR_PER, cc) + sdata(SKILL_NORMAL_DETECTION, cc) * 4 ) {"
        )
      ]
    ),
    "*expDisarm": (
      rules: [
        (
          kind: Function,
          match: "skillexp SKILL_NORMAL_DISARM_TRAP, cc, 50"
        )
      ]
    ),
    "*calcDisarm": (
      rules: [
        (
          kind: Function,
          match: "gosub *expDisarm"
        )
      ]
    ),
    "*calcStealth": (
      rules: [
        (
          kind: If,
          match: "if ( cdata(CDATA_X, r1) > cdata(CDATA_X, r2) - cv & cdata(CDATA_X, r1) < cdata(CDATA_X, r2) + cv ) {"
        )
      ]
    ),
    "*calcHunger": (
      rules: [
        (
          kind: If,
          match: "if ( trait(TRAIT_RACE_SLOW_DIGESTION) ) {"
        )
      ]
    ),
    "*calcThirst": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_THIRST, r1) = 1"
        )
      ]
    ),
    "*calcCondition": (
      rules: [
        (
          kind: Function,
          match: "healcon r1, CONDITION_POISON, 1"
        )
      ]
    ),
    "*calcBurdenPc": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_BURDEN, CHARA_PLAYER) = 4"
        )
      ]
    ),
    "*learn_sp": (
      rules: [
        (
          kind: Assignment,
          match: "overp = 0"
        )
      ]
    ),
    "*chara_initEquip": (
      rules: [
        (
          kind: If,
          match: "if ( cdatan(CDATAN_RACE, rc) == \"mutant\" ) {"
        )
      ]
    ),
    "*set_figure": (
      rules: [
        (
          kind: If,
          match: "if ( s == \"頭\" ) {"
        )
      ]
    ),
    "*place_chara": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_X, rc) = cdata(CDATA_X, CHARA_PLAYER)"
        )
      ]
    ),
    "*place_necro": (
      rules: [
        (
          kind: Assignment,
          match: "hitugi = 0"
        ),
      ]
    ),
    "*chara_init": (
      rules: [
        (
          kind: Assignment,
          match: "npcmemory(1, dbid)++"
        )
      ]
    ),
    "*chara_fix": (
      rules: [
        (
          kind: Assignment,
          match: "cdatan(CDATAN_NAME, rc) = lang(\"《\", \"{\") + cdatan(CDATAN_NAME, rc) + lang(\"》\", \"}\")"
        )
      ]
    ),
    "*cm_finish": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_HUNGER, rc) = 9000"
        )
      ]
    ),
    "*cm_finishPC": (
      rules: [
        (
          kind: If,
          match: "if ( cdatan(CDATAN_CLASS, CHARA_PLAYER) == \"pianist\" ) {"
        )
      ]
    ),
    "*resurrect_ally": (
      rules: [
        (
          kind: Function,
          match: "txt cnven(cdatan(CDATAN_NAME, rc)) + lang(\"が現れた！\", \" \" + have(rc) + \" been resurrected!\")"
        )
      ]
    ),
    "*resurrect": (
      rules: [
        (
          kind: Function,
          match: "cbitmod CHARA_BIT_SUICIDE_SWITCH, rc, FALSE"
        )
      ]
    ),

    "*renewStatus": (
      rules: [
        (
          kind: If,
          match: "if ( cdata(STARTING_CDATA_BUFF + cnt * ARRAY_CDATA_BUFF, rc) == BUFF_PUNISHMENT ) {"
        )
      ]
    ),
    "*chara_respawn": (
      rules: [
        (
          kind: Function,
          match: "skillmod SKILL_NORMAL_PERFORMER, rc, 1000"
        )
      ]
    ),
    "*cm_init": (
      rules: [
        (
          kind: If,
          match: "if ( cfg_wizard ) {"
        ),
        (
          kind: Assignment,
          match: "mode = MODELIST_CHARA_CREATION"
        ),
        (
          kind: Function,
          match: "picload exedir + \"graphic\\\\void.bmp\", 1"
        ),
        (
          kind: StringLiteral,
          match: "これ以上は冒険者を保存できない。"
        )
      ]
    ),
    "*cm_init_WHILE1": (
      after: "*cm_init",
      loop_kind: While
    ),
    "*cm_init_WEND1": (
      after: "*cm_init_WHILE1",
      loop_kind: WhileEnd
    ),
    "*cm_aka": (
      rules: [
        (
          kind: StringLiteral,
          match: "Choose your Alias."
        )
      ]
    ),
    "*cm_aka_WHILE1": (
      after: "*cm_aka",
      loop_kind: While
    ),
    "*cm_aka_WEND1": (
      after: "*cm_aka_WHILE1",
      loop_kind: WhileEnd
    ),
    "*cm_past": (
      rules: [
        (
          kind: StringLiteral,
          match: "君の経歴を教えてくれるかな。内緒にしてもいいけれど。"
        )
      ]
    ),
    "*cm_past_loop": (
      rules: [
        (
          kind: StringLiteral,
          match: "経歴のロール"
        )
      ]
    ),
    "*cm_race": (
      rules: [
        (
          kind: If,
          match: "if ( cfg_extrarace ) {"
        )
      ]
    ),
    "*cm_race_loop": (
      after: "*cm_race"
    ),
    "*cm_race_loop_WHILE1": (
      after: "*cm_race_loop",
      loop_kind: While
    ),
    "*cm_race_name_change": (
      rules: [
        (
          kind: StringLiteral,
          match: "種族名を変更する？"
        )
      ]
    ),
    "*cm_race_name_change_input": (
      rules: [
        (
          kind: StringLiteral,
          match: "新しい種族は？"
        )
      ]
    ),
    "*cm_sex": (
      rules: [
        (
          kind: StringLiteral,
          match: "What's your gender?"
        )
      ]
    ),
    "*cm_sex_WHILE1": (
      after: "*cm_sex",
      loop_kind: While
    ),
    "*cm_sex_WEND1": (
      after: "*cm_sex_WHILE1",
      loop_kind: WhileEnd
    ),
    "*cm_class": (
      rules: [
        (
          kind: StringLiteral,
          match: "職業や種族は、初期の能力だけでなく、成長の方向性に影響するんだ。"
        )
      ]
    ),
    "*cm_class_WHILE1": (
      after: "*cm_class",
      loop_kind: While
    ),
    "*cm_class_change_name": (
      rules: [
        (
          kind: StringLiteral,
          match: "職業名を変更する？"
        )
      ]
    ),
    "*cm_class_change_name_input": (
      rules: [
        (
          kind: StringLiteral,
          match: "新しい職業は？"
        )
      ]
    ),
    "*cm_skill": (
      rules: [
        (
          kind: StringLiteral,
          match: "君の特筆すべき才能を1つ、教えてほしいな。"
        )
      ]
    ),
    "*cm_stats": (
      rules: [
        (
          kind: StringLiteral,
          match: "死にたくないなら、ある程度の能力は必要だね。"
        )
      ]
    ),
    "*cm_stats_WHILE1": (
      after: "*cm_stats",
      loop_kind: While
    ),
    "*cm_feat": (
      rules: [
        (
          kind: StringLiteral,
          match: "フィートとは、君の持っている有益な特徴だ。3つまで選べるよ。"
        )
      ]
    ),
    "*cm_portrait": (
      rules: [
        (
          kind: StringLiteral,
          match: "君の見た目を知っておきたいな。まあ、後からいつでも変えられるけどね。"
        )
      ]
    ),
    "*cmSubTxt": (
      after: "*cm_portrait"
    ),
    "*cm_gamemode": (
      rules: [
        (
          kind: StringLiteral,
          match: "あえて険しい道を行くのも君の自由だ。"
        )
      ]
    ),
    //"*cm_confirm":  (
    //   rules: [
    //     (
    //       kind: Function,
    //       match: "snd SOUNDLIST_OK1"
    //     )
    //   ]
    // ),
    // (
    //   name: "*cm_birth",
    //   rules: [
    //     (
    //       kind: Function,
    //       match: "snd SOUNDLIST_CHARA"
    //     )
    //   ]
    // ),
    "*cm_birth_loop": (
      rules: [
        (
          kind: Assignment,
          match: "cdatan(CDATAN_NAME, rc) = \"????\""
        )
      ]
    ),
    "*cm_end": (
      rules: [
        (
          kind: StringLiteral,
          match: "最後の質問だ。君の名前は？"
        )
      ]
    ),
    "*cm_name_loop": (
      rules: [
        (
          kind: StringLiteral,
          match: "あいにく、その名前の冒険者はすでに存在する。"
        )
      ]
    ),
    "*cm_bg": (
      after: "*cm_name_loop"
    ),
    "*cm_refer": (
      rules: [
        (
          kind: StringLiteral,
          match: "\"種族: \"",
          exact: true
        )
      ]
    ),
    "*convertartifact_WHILE1": (
      rules: [
        (
          kind: StringLiteral,
          match: " turns its shape into stardust."
        )
      ],
      loop_kind: While
    ),
    "*convertartifact_WEND1": (
      after: "*convertartifact_WHILE1",
      loop_kind: WhileEnd
    ),
    "*item_fltInit": (
      rules: [
        (
          kind: Assignment,
          match: "fsetincome = FILTER_ITEM_POTION, FILTER_ITEM_SCROLL, FILTER_ITEM_SCROLL, FILTER_ITEM_ROD, FILTER_ITEM_SPELLBOOK, FILTER_ORE, FILTER_ITEM_FOOD, FILTER_ITEM_FOOD"
        )
      ]
    ),
    "*item_loot": (
      rules: [
        (
          kind: Assignment,
          match: "inv(INV_ITEM_PROPERTY, ti) = PROP_INHERITED"
        )
      ]
    ),
    "*item_loot_SWEND1": (
      after: "*item_loot",
      loop_kind: SwitchEnd
    ),
    "*item_loot_SWEND2": (
      after: "*item_loot_SWEND1",
      loop_kind: SwitchEnd
    ),
    "*item_rot": (
      rules: [
        (
          kind: StringLiteral,
          match: "は腐った。"
        )
      ]
    ),
    "*curse": (
      rules: [
        (
          kind: StringLiteral,
          match: "悪意のある手が"
        )
      ]
    ),
    "*pregnant": (
      rules: [
        (
          kind: StringLiteral,
          match: "は不安げに腹を押さえた。"
        )
      ]
    ),
    "*curse_enc": (
      rules: [
        (
          kind: StringLiteral,
          match: "Something sucks "
        )
      ]
    ),
    "*item_senseQuality": (
      rules: [
        (
          kind: StringLiteral,
          match: "\"バックパックの中の\"",
          exact: true
        )
      ]
    ),
    "*item_fix": (
      rules: [
        (
          kind: Function,
          match: "encadd ci, fixeditemenc(cnt * 2), fixeditemenc(cnt * 2 + 1), 0, 0, 0, 1"
        )
      ]
    ),
    "*item_init": (
      rules: [
        (
          kind: Assignment,
          match: "fixlv++"
        )
      ]
    ),
    "*item_value": (
      rules: [
        (
          kind: Assignment,
          match: "inv(INV_ITEM_VALUE, ci) = inv(INV_ITEM_VALUE, ci) * (80 + inv(INV_ITEM_SUB_NAME, ci) * 20) / 100"
        )
      ]
    ),
    "*foodRotten": (
      rules: [
        (
          kind: Assignment,
          match: "nutrition = 1000"
        )
      ]
    ),
    "*item_cook": (
      rules: [
        (
          kind: Function,
          match: "snd SOUNDLIST_COOK1"
        )
      ]
    ),
    "*eatEffect": (
      rules: [
        (
          kind: Function,
          match: "skillexp SKILL_ATTR_STR, cc, 2000"
        )
      ]
    ),
    "*eatHard": (
      rules: [
        (
          kind: StringLiteral,
          match: "まるで鉄のように硬い！"
        )
      ]
    ),
    "*eatInsane": (
      rules: [
        (
          kind: StringLiteral,
          match: "気が変になりそうな味だ。"
        )
      ]
    ),
    "*eatHorse": (
      rules: [
        (
          kind: StringLiteral,
          match: "馬肉だ！これは精がつきそうだ。"
        )
      ]
    ),
    "*eatHoly": (
      rules: [
        (
          kind: StringLiteral,
          match: "は神聖なものを汚した気がした。"
        )
      ]
    ),
    "*eatPlayer": (
      rules: [
        (
          kind: StringLiteral,
          match: "＠を食べるなんて…"
        )
      ]
    ),
    "*eatGuard": (
      rules: [
        (
          kind: StringLiteral,
          match: "ガード達はあなたを憎悪した。"
        )
      ]
    ),
    "*eatVesda": (
      rules: [
        (
          kind: StringLiteral,
          match: "の体は一瞬燃え上がった。"
        )
      ]
    ),
    "*eatIssizzle": (
      rules: [
        (
          kind: StringLiteral,
          match: "の胃は狂気で満たされた。"
        ),
        (
          kind: Function,
          match: "resistmod cc, SKILL_RES_MIND, 50"
        ),
        (
          kind: Function,
          match: "dmgsan cc, 200"
        ),
        (
          kind: Function,
          match: "dmgcon cc, CONDITION_INSANE, 1000"
        )
      ]
    ),
    "*eatPutit": (
      rules: [
        (
          kind: StringLiteral,
          match: "肌がつるつるになりそうだ。"
        )
      ]
    ),
    "*eatCupid": (
      rules: [
        (
          kind: StringLiteral,
          match: "は恋をしている気分になった！"
        )
      ]
    ),
    "*eatPoison": (
      rules: [
        (
          kind: StringLiteral,
          match: "これは有毒だ！"
        )
      ]
    ),
    "*eatTroll": (
      rules: [
        (
          kind: StringLiteral,
          match: "血が沸き立つようだ。"
        )
      ]
    ),
    "*eatRotten": (
      rules: [
        (
          kind: StringLiteral,
          match: "腐ってるなんて分かりきっていたのに…うげぇ"
        )
      ]
    ),
    "*eatBeetle": (
      rules: [
        (
          kind: StringLiteral,
          match: "力が湧いてくるようだ。"
        )
      ]
    ),
    "*eatMandrake": (
      rules: [
        (
          kind: StringLiteral,
          match: "微かな魔力の刺激を感じた。"
        )
      ]
    ),
    "*eatGhost": (
      rules: [
        (
          kind: StringLiteral,
          match: "胃の調子がおかしい…"
        )
      ]
    ),
    "*eatHealSan": (
      rules: [
        (
          kind: StringLiteral,
          match: "この肉は心を落ち着かせる効果があるようだ。"
        )
      ]
    ),
    "*eatYith": (
      rules: [
        (
          kind: Function,
          match: "の胃は狂気で満たされた。"
        ),
        (
          kind: Function,
          match: "dmgsan cc, 50"
        ),
        (
          kind: Function,
          match: "resistmodh cc, SKILL_RES_MIND, 50"
        ),
        (
          kind: Function,
          match: "return"
        )
      ]
    ),
    "*eatChaos": (
      rules: [
        (
          kind: StringLiteral,
          match: "の胃は混沌で満たされた。"
        )
      ]
    ),
    "*eatEye": (
      rules: [
        (
          kind: StringLiteral,
          match: "の神経に電流が走った。"
        )
      ]
    ),
    "*eatCat": (
      rules: [
        (
          kind: StringLiteral,
          match: "猫を食べるなんて！！"
        )
      ]
    ),
    "*eatEther": (
      rules: [
        (
          kind: StringLiteral,
          match: "の体内はエーテルで満たされた。"
        )
      ]
    ),
    "*eatEND": (
      rules: [
        (
          kind: StringLiteral,
          match: "体力がつきそうだ。"
        )
      ]
    ),
    "*eatMAG": (
      rules: [
        (
          kind: StringLiteral,
          match: "魔力が鍛えられる。"
        )
      ]
    ),
    "*eatSTR": (
      rules: [
        (
          kind: StringLiteral,
          match: "\"力がつきそうだ。\"",
          exact: true
        )
      ]
    ),
    "*eatWIL": (
      rules: [
        (
          kind: StringLiteral,
          match: "精神が少しずぶとくなった。"
        )
      ]
    ),
    "*eatQuickling": (
      rules: [
        (
          kind: StringLiteral,
          match: "は速くなった気がする！"
        )
      ]
    ),
    "*eatAlien": (
      rules: [
        (
          kind: StringLiteral,
          match: "の体内に入り込んだ。"
        )
      ]
    ),
    "*alien_effect": (
      rules: [
        (
          kind: StringLiteral,
          match: "は寄生された。"
        )
      ]
    ),
    "*setCellObj": (
      rules: [
        (
          kind: Assignment,
          match: "tile_trap = xy2pic(3, 7)"
        )
      ]
    ),
    "*map_createRoom_FOR1": (
      rules: [
        (
          kind: If,
          match: "if ( x2 & y2 ) {"
        )
      ],
      loop_kind: For
    ),
    "*map_createRoom_FOR1_CONTINUE": (
      after: "*map_createRoom_FOR1",
      loop_kind: ForContinue
    ),
    "*map_createRoom_FOR1_BREAK1": (
      after: "*map_createRoom_FOR1_CONTINUE",
      loop_kind: ForBreak
    ),
    "*map_trap_FOR1": (
      rules: [
        (
          kind: Function,
          match: "cell_featset locvar_map_trap_dx, locvar_map_trap_dy, 0, CELL_FEATURE_TRAP, locvar_map_trap_trap"
        )
      ],
      loop_kind: For
    ),
    "*map_trap_FOR1_BREAK1": (
      after: "*map_trap_FOR1",
      loop_kind: ForBreak
    ),
    "*map_web_FOR1": (
      rules: [
        (
          kind: If,
          match: "if ( map_web_x == 0 ) {"
        )
      ],
      loop_kind: For
    ),
    "*map_web_FOR1_BREAK1": (
      after: "*map_web_FOR1",
      loop_kind: ForBreak
    ),
    "*map_barrel_FOR1": (
      rules: [
        (
          kind: Function,
          match: "cell_featset locvar_map_trap_dx, locvar_map_trap_dy, tile_pot, CELL_FEATURE_POT"
        )
      ],
      loop_kind: For
    ),
    "*map_barrel_FOR1_BREAK1": (
      after: "*map_barrel_FOR1",
      loop_kind: ForBreak
    ),
    "*map_connectroom_FOR1": (
      rules: [
        (
          kind: Function,
          match: "repeat rnd(rdroomentrance + 1) + 1"
        )
      ],
      loop_kind: For
    ),
    "*map_connectroom_FOR1_BREAK1": (
      after: "*map_connectroom_FOR1",
      loop_kind: ForBreak
    ),
    "*map_makedoor_FOR1": (
      rules: [
        (
          kind: Function,
          match: "repeat roomheight(cr) * 2 + roomwidth(cr) * 2"
        )
      ],
      loop_kind: For
    ),
    "*map_makedoor_FOR1_BREAK1": (
      after: "*map_makedoor_FOR1",
      loop_kind: ForBreak
    ),
    "*mapEditor_new": (
      rules: [
        (
          kind: Function,
          match: "dialog \"Unsaved data will be lost. Create a new map?\", 3"
        )
      ]
    ),
    "*mapEditor_menu": (
      rules: [
        (
          kind: Assignment,
          match: "wid = wparam & 65535"
        )
      ]
    ),
    "*mapEditor_init": (
      rules: [
        (
          kind: Function,
          match: "AppendMenuA hmenu(3), 0, 10, \"Map Mode Help\""
        )
      ]
    ),
    "*mapEditor_main": (
      after: "*mapEditor_init"
    ),
    "*mapEditor_main_WHILE1": (
      after: "*mapEditor_main",
      loop_kind: While
    ),
    "*mapEditor_main_WHILE1_CONTINUE": (
      after: "*mapEditor_main_WHILE1",
      loop_kind: WhileContinue
    ),
    "*mapEditor_main_WEND1": (
      after: "*mapEditor_main_WHILE1_CONTINUE",
      loop_kind: WhileEnd
    ),
    "*cmap_init1": (
      rules: [
        (
          kind: Assignment,
          match: "medititemmax++"
        )
      ]
    ),
    "*cmap_search1": (
      rules: [
        (
          kind: Assignment,
          match: "meditsearchenabled = 1"
        )
      ]
    ),
    "*cmap_refresh1": (
      rules: [
        (
          kind: Function,
          match: "repeat limit(medititemmax, 1, meditdw / dx * (325 / dy - 1))"
        )
      ]
    ),
    "*cmap_init2": (
      rules: [
        (
          kind: Assignment,
          match: "meditnpcmax = 0"
        )
      ]
    ),
    "*cmap_init3": (
      rules: [
        (
          kind: Assignment,
          match: "meditobjmax = 0"
        ),
      ]
    ),
    "*cmap_init_list": (
      rules: [
        (
          kind: Function,
          match: "notesel buff2"
        ),
        (
          kind: Function,
          match: "repeat cmapdatamax"
        )
      ]
    ),
    "*mapEditor_editMode": (
      rules: [
        (
          kind: If,
          match: "if ( meditmodeprev == 0 ) {"
        )
      ]
    ),
    "*mapEditor_delObj": (
      rules: [
        (
          kind: Assignment,
          match: "cmapdata(0, mnull) = 0, 0, 0, 0, 0"
        )
      ]
    ),
    "*mapEditor_changeProperty": (
      rules: [
        (
          kind: If,
          match: "if ( mproperty == 0 ) {"
        )
      ]
    ),
    "*mapEditor_fill": (
      rules: [
        (
          kind: Assignment,
          match: "map(cnt, p, MAP_TILE_ID) = tile + (rnd(tile(2)) == 0) * rnd(tile(1))"
        )
      ]
    ),
    "*mapEditor_setFog": (
      rules: [
        (
          kind: Assignment,
          match: "map(x, y, MAP_TILE_ID_MEMORY) = tile",
          exact: true
        )
      ]
    ),
    "*mapEditor_resize": (
      rules: [
        (
          kind: Assignment,
          match: "mapbk(x, y, MAP_TILE_ID) = map(x, y, MAP_TILE_ID)"
        )
      ]
    ),
    "*mapEditor_save1": (
      rules: [
        (
          kind: If,
          match: "if ( fmapfile == \"\" ) {"
        )
      ]
    ),
    "*mapEditor_save2": (
      rules: [
        (
          kind: Assignment,
          match: "filedsc = \"map\""
        ),
        (
          kind: Assignment,
          match: "fmode = 6"
        )
      ]
    ),
    "*mapEditor_load": (
      rules: [
        (
          kind: Assignment,
          match: "filedsc = \"map\""
        ),
        (
          kind: Assignment,
          match: "fmode = 5"
        )
      ]
    ),
    "*mapEditor_renewList": (
      rules: [
        (
          kind: Assignment,
          match: "cmapdatamax = 0"
        ),
        (
          kind: Assignment,
          match: "mlistrefresh = 1"
        )
      ]
    ),
    "*mapEditor_setCoast": (
      rules: [
        (
          kind: Assignment,
          match: "coasttile = 285"
        )
      ]
    ),
    "*mapEditor_setCoast2": (
      rules: [
        (
          kind: If,
          match: "if ( chipm(CHIPM_ROLE, map(x, y, MAP_TILE_ID)) == coasttile(3) ) {"
        )
      ]
    ),
    "*mapEditor_export": (
      rules: [
        (
          kind: Assignment,
          match: "mapeditorrader++"
        )
      ]
    ),
    "*map_randomDungeon": (
      rules: [
        (
          kind: Assignment,
          match: "rdtry++"
        )
      ]
    ),
    "*map_createDungeonHunt": (
      rules: [
        (
          kind: Function,
          match: "repeat 10 + rnd(6)"
        )
      ]
    ),
    "*map_createDungeonHarvest": (
      rules: [
        (
          kind: StringLiteral,
          match: "街周辺の畑"
        )
      ]
    ),
    "*map_createDungeonStandard": (
      rules: [
        (
          kind: Function,
          match: "map_createroom 1"
        )
      ]
    ),
    "*map_createDungeonResident": (
      after: "*map_createDungeonStandard"
    ),
    "*map_createDungeonJail": (
      after: "*map_createDungeonResident"
    ),
    "*map_createDungeonWide": (
      rules: [
        (
          kind: Assignment,
          match: "rdroomsizemax = 3"
        )
      ]
    ),
    "*map_createDungeonBigRoom": (
      rules: [
        (
          kind: Assignment,
          match: "p(2) = p"
        )
      ]
    ),
    "*map_createDungeonPerform": (
      rules: [
        (
          kind: Assignment,
          match: "gdata(GDATA_COUNT_NOTICE) = 9999"
        ),
        (
          kind: StringLiteral,
          match: "パーティー場"
        )
      ]
    ),
    "*map_createDungeonConquer": (
      rules: [
        (
          kind: Assignment,
          match: "gdata(GDATA_LEVEL_START_ON) = 5"
        )
      ]
    ),
    "*map_createDungeonHighPass": (
      rules: [
        (
          kind: Assignment,
          match: "mdata(MDATA_HEIGHT) = 60 + rnd(60)"
        )
      ]
    ),
    "*map_createDungeonMaze": (
      rules: [
        (
          kind: Assignment,
          match: "rdsecond = TRUE"
        )
      ]
    ),
    "*dighole": (
      rules: [
        (
          kind: Function,
          match: "dim maze, _mclass * _mclass"
        )
      ]
    ),
    "*map_createDungeonDog": (
      rules: [
        (
          kind: If,
          match: "if ( map(tx, ty, MAP_TILE_ID) != t ) {"
        )
      ]
    ),
    // (
    //   name: "*ExportItemDB",
    //   rules: [
    //     (
    //       kind: Function,
    //       match: "	repeat maxitemid - 2"
    //     )
    //   ]
    // ),
    // (
    //   name: "*ExportCardDescriptions",
    //   rules: [
    //     (
    //       kind: Function,
    //       match: "	repeat maxnpcid - 2"
    //     )
    //   ]
    // ),
    // (
    //   name: "*Load_Item_Highlights",
    //   rules: [
    //     (
    //       kind: Function,
    //       match: "	//Verify that the ItemList file exists, displaying an error message and returning if not."
    //     )
    //   ]
    // ),
    "*home_setup": (
      rules: [
        (
          kind: Assignment,
          match: "gdata(GDATA_HOME_BASE) = 1000"
        )
      ]
    ),
    "*building_new": (
      rules: [
        (
          kind: StringLiteral,
          match: "本当にこの場所に建設する？ "
        )
      ]
    ),
    "*setHome": (
      rules: [
        (
          kind: Assignment,
          match: "adata(ADATA_ICON, p) = xy2pic(11, 4)"
        )
      ]
    ),
    "*com_home": (
      rules: [
        (
          kind: StringLiteral,
          match: "ブリーダーを任命する"
        )
      ]
    ),
    "*com_home_WHILE1": (
      after: "*com_home",
      loop_kind: While
    ),
    "*com_home_WEND1": (
      after: "*com_home_WHILE1",
      loop_kind: WhileEnd
    ),
    "*com_home_WHILE2": (
      after: "*com_home_WEND1",
      loop_kind: While
    ),
    "*com_home_WHILE3": (
      after: "*com_home_WHILE2",
      loop_kind: While
    ),
    "*com_home_SWEND1": (
      after: "*com_home_WHILE3",
      loop_kind: SwitchEnd
    ),
    "*com_home_WEND2": (
      after: "*com_home_SWEND1",
      loop_kind: WhileEnd
    ),
    "*com_home_WEND3": (
      after: "*com_home_WEND2",
      loop_kind: WhileEnd
    ),
    "*home_setWallTile": (
      rules: [
        (
          kind: If,
          match: "if ( mdata(MDATA_TILE_FILE) != 2 | cnt >= 297 ) {"
        )
      ]
    ),
    "*shop_turn": (
      rules: [
        (
          kind: Assignment,
          match: "worker = getworker(gdata(GDATA_AREA))"
        ),
        (
          kind: If,
          match: "if ( worker != (-1) ) {"
        ),
      ]
    ),
    "*shop_turn_main": (
      rules: [
        (
          kind: StringLiteral,
          match: "[店]店には店番がいない。"
        )
      ]
    ),
    "*shop_update": (
      rules: [
        (
          kind: Assignment,
          match: "mdata(MDATA_MODERATE_CROWD) = (100 - gdata(GDATA_RANK_SHOP) / 100) / 4 + 1"
        )
      ]
    ),
    "*museum_value": (
      rules: [
        (
          kind: Assignment,
          match: "rtval = rtval / 2 * 3 + 40"
        )
      ]
    ),
    "*museum_unique_level": (
      rules: [
        (
          kind: If,
          match: "if ( cdata(CDATA_LEVEL, MAX_CHARA_NC) >= gdata(GDATA_DEEPEST_LEVEL) * 2 ) {"
        )
      ]
    ),
    "*museum_update": (
      rules: [
        (
          kind: StringLiteral,
          match: " Your museum is now known as <"
        )
      ]
    ),
    "*house_value": (
      rules: [
        (
          kind: Assignment,
          match: "gdata(GDATA_HOME_FURNITURE) += limit(inv(INV_ITEM_VALUE, val) / 50, 50, 500)"
        )
      ]
    ),
    "*house_update": (
      rules: [
        (
          kind: StringLiteral,
          match: "家具("
        )
      ]
    ),
    "*ranch_update": (
      rules: [
        (
          kind: Assignment,
          match: "livestock = 0"
        )
      ]
    ),
    "*skipBreeder": (
      rules: [
        (
          kind: Function,
          match: "itemcreate -1, ITEM_ID_SHIT, x, y, 0"
        ),
      ]
    ),
    "*fltChara": (
      rules: [
        (
          kind: Function,
          match: "flt calcobjlv(10), calcfixlv(FIX_QUALITY_GOOD)"
        )
      ]
    ),
    "*chara_spawn": (
      rules: [
        (
          kind: If,
          match: "if ( gdata(GDATA_CROWD) * 3 < mdata(MDATA_MODERATE_CROWD) * 2 ) {"
        )
      ]
    ),
    "*map_exit": (
      rules: [
        (
          kind: Assignment,
          match: "gdata(STARTING_GDATA_HELP + 1) = 1"
        )
      ]
    ),
    "*map_clean": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_EXIST, cnt) = CHAR_STATE_ADV",
          exact: true
        )
      ]
    ),
    "*map_save": (
      rules: [
        (
          kind: Assignment,
          match: "map(cnt, y, MAP_BLOOD_AND_DEBRIS) = 0"
        )
      ]
    ),
    "*map_init": (
      rules: [
        (
          kind: StringLiteral,
          match: "Warning, only do this i"
        )
      ]
    ),
    "*map_init_main": (
      rules: [
        (
          kind: Assignment,
          match: "maxmedal = 0"
        )
      ]
    ),
    "*map_preBegin": (
      rules: [
        (
          kind: StringLiteral,
          match: "三年の月日が経ち、あなたは再び冒険の旅に出た。"
        )
      ]
    ),
    "*skip_advPlace": (
      rules: [
        (
          kind: If,
          match: "if ( cbit(CHARA_BIT_HIRED, cnt) == TRUE ) {"
        )
      ]
    ),
    "*map_begin": (
      rules: [
        (
          kind: StringLiteral,
          match: "マップのロードに失敗しました。"
        )
      ]
    ),
    "*check_renew": (
      rules: [
        (
          kind: Function,
          match: "itemcreate cnt, ITEM_ID_STRADIVARIUS, -1, -1, 0"
        )
      ]
    ),
    "*map_prepareTile": (
      rules: [
        (
          kind: If,
          match: "if ( gdata(GDATA_HOUR) >= 10 & gdata(GDATA_HOUR) < 12 ) {"
        )
      ]
    ),
    "*world_newRandArea": (
      rules: [
        (
          kind: Assignment,
          match: "cyinit = rnd(mdata(MDATA_HEIGHT))"
        )
      ]
    ),
    "*world_update": (
      rules: [
        (
          kind: If,
          match: "if ( gdata(GDATA_WORLD_RENEW) == TRUE ) {"
        )
      ]
    ),
    "*world_refresh": (
      after: "*world_update"
    ),
    "*world_setArea": (
      rules: [
        (
          kind: If,
          match: "if ( adata(ADATA_ID, cnt) == 900 ) {"
        )
      ]
    ),
    "*world_clear": (
      rules: [
        (
          kind: Assignment,
          match: "map(x, y, MAP_LIGHT_TYPE) = 0"
        )
      ]
    ),
    "*setArea": (
      rules: [
        (
          kind: Assignment,
          match: "adata(ADATA_ID, p) = AREA_TEST_GROUND"
        )
      ]
    ),
    "*map_createRandArea": (
      rules: [
        (
          kind: Assignment,
          match: "adata(ADATA_ID, p) = AREA_RANDOM_DUNGEON"
        )
      ]
    ),
    "*mapEvent": (
      rules: [
        (
          kind: If,
          match: "if ( gdata(GDATA_FLAG_FIRE_GIANT) == 1 ) {"
        )
      ]
    ),
    "*ludus_festival": (
      rules: [
        (
          kind: Function,
          match: "characreate -1, CREATURE_ID_PART_TIME_WORKER2, 30, 22"
        )
      ]
    ),
    "*noyel_festival": (
      rules: [
        (
          kind: Function,
          match: "itemcreate -1, ITEM_ID_STATUE_JURE, 29, 16, 0"
        )
      ]
    ),
    "*db_card": (
      rules: [
        (
          kind: Assignment,
          match: "cardreftype = 10"
        )
      ]
    ),
    "*dbghit_WHILE1": (
      rules: [
        (
          kind: Function,
          match: "await"
        ),
        (
          kind: Function,
          match: "stick locvar_dbghit_a"
        ),
        (
          kind: If,
          match: "if ( locvar_dbghit_a ) {"
        ),
        (
          kind: Function,
          match: "return"
        )
      ],
      loop_kind: While
    ),
    "*dbghit_WEND1": (
      after: "*dbghit_WHILE1",
      loop_kind: WhileEnd
    ),
    "*tcgdraw_WHILE1": (
      rules: [
        (
          kind: Assignment,
          match: "locvar_tcgdraw_t++"
        )
      ],
      loop_kind: While
    ),
    "*tcgdraw_WEND1": (
      after: "*tcgdraw_WHILE1",
      loop_kind: WhileEnd
    ),
    "*getrandomcard_WHILE1": (
      rules: [
        (
          kind: Assignment,
          match: "locvar_tcgdraw_c = rnd(locvar_makecardlist_maxcard)"
        )
      ],
      loop_kind: While
    ),
    "*getrandomcard_WEND1": (
      after: "*getrandomcard_WHILE1",
      loop_kind: WhileEnd
    ),
    "*actionchain_WHILE1": (
      rules: [
        (
          kind: Assignment,
          match: "locvar_tcgdraw_chaintime--"
        )
      ],
      loop_kind: While
    ),
    "*actionchain_WEND1": (
      after: "*actionchain_WHILE1",
      loop_kind: WhileEnd
    ),
    "*actionproc_WHILE1": (
      rules: [
        (
          kind: Assignment,
          match: "locvar_tcgdraw_cc = locvar_actionproc_cardstack(0, locvar_actionproc_stack - 1)"
        )
      ],
      loop_kind: While
    ),
    "*actionproc_SWEND1": (
      after: "*actionproc_WHILE1",
      loop_kind: SwitchEnd
    ),
    "*actionproc_WHILE1_CONTINUE": (
      after: "*actionproc_SWEND1",
      loop_kind: WhileContinue
    ),
    "*actionproc_WEND1": (
      after: "*actionproc_WHILE1_CONTINUE",
      loop_kind: WhileEnd
    ),
    "*tcgDeck_loop": (
      rules: [
        (
          kind: Assignment,
          match: "locvar_cnvrare_s(cnt) += lang(\"のデッキ\", \" Deck\")"
        )
      ]
    ),
    "*tcgmain_WHILE1": (
      rules: [
        (
          kind: Function,
          match: "cpisme"
        ),
        (
          kind: If,
          match: "if ( gameover() ) {"
        )
      ],
      loop_kind: While
    ),
    "*tcgmain_WEND1": (
      after: "*tcgmain_WHILE1",
      loop_kind: WhileEnd
    ),
    "*phase_begin": (
      rules: [
        (
          kind: Assignment,
          match: "locvar_tcgdraw_phase = 0"
        )
      ]
    ),
    "*phase_draw": (
      rules: [
        (
          kind: Assignment,
          match: "locvar_tcgdraw_phase = 1"
        )
      ]
    ),
    "*phase_main": (
      rules: [
        (
          kind: Assignment,
          match: "locvar_tcgdraw_phase = 2"
        )
      ]
    ),
    "*phase_end": (
      rules: [
        (
          kind: Assignment,
          match: "locvar_tcgdraw_phase = 3"
        )
      ]
    ),
    "*refresh_bg": (
      rules: [
        (
          kind: Function,
          match: "dim locvar_cslinedown_mana, 10"
        )
      ]
    ),
    "*tcg_drawDeck": (
      rules: [
        (
          kind: If,
          match: "if ( locvar_cslinedown_ccf == cnt ) {"
        )
      ]
    ),
    "*tcg_drawInterface": (
      rules: [
        (
          kind: Assignment,
          match: "locvar_tcgdrawcard_x = locvar_dmgplayer_cpx(cnt)"
        )
      ]
    ),
    "*tcg_initBg": (
      rules: [
        (
          kind: Function,
          match: "repeat 2"
        ),
        (
          kind: Assignment,
          match: "locvar_makecardlist_cnt2 = cnt"
        ),
        (
          kind: Function,
          match: "gsel BUFFER_SCREEN"
        ),
        (
          kind: Function,
          match: "return"
        ),
      ]
    ),
    "*select_deck_pos": (
      rules: [
        (
          kind: If,
          match: "if ( locvar_tcgdrawcard_dsc < 0 ) {"
        )
      ]
    ),
    "*select_deck": (
      rules: [
        (
          kind: Assignment,
          match: "locvar_cslinedown_cflist = 1, 2, 3, 4, 5, 6, 7, 8, 9"
        )
      ]
    ),
    "*select_deck_loop": (
      rules: [
        (
          kind: If,
          match: "if ( locvar_cdbit_card(0, cnt) != (-1) ) {"
        )
      ]
    ),
    "*select_deck_loop_WHILE1": (
      after: "*select_deck_loop",
      loop_kind: While
    ),
    "*select_deck_loop_WHILE2": (
      after: "*select_deck_loop_WHILE1",
      loop_kind: While
    ),
    "*select_deck_loop_WHILE2_CONTINUE": (
      after: "*select_deck_loop_WHILE2",
      loop_kind: WhileContinue
    ),
    "*select_deck_loop_WEND2": (
      after: "*select_deck_loop_WHILE2_CONTINUE",
      loop_kind: WhileEnd
    ),
    "*select_deck_loop_WHILE1_CONTINUE": (
      after: "*select_deck_loop_WEND2",
      loop_kind: WhileContinue
    ),
    "*select_deck_loop_WEND1": (
      after: "*select_deck_loop_WHILE1_CONTINUE",
      loop_kind: WhileEnd
    ),
    "*card_player": (
      rules: [
        (
          kind: Assignment,
          match: "locvar_tcgdrawcard_csline = 1"
        )
      ]
    ),
    "*card_player_WHILE1": (
      after: "*card_player",
      loop_kind: While
    ),
    "*card_player_WHILE1_CONTINUE": (
      after: "*card_player_WHILE1",
      loop_kind: WhileContinue
    ),
    "*card_player_WEND1": (
      after: "*card_player_WHILE1_CONTINUE",
      loop_kind: WhileEnd
    ),
    "*select_action": (
      rules: [
        (
          kind: Function,
          match: "redraw 0"
        ),
        (
          kind: Assignment,
          match: "locvar_makecardlist_p = 0"
        ),
      ]
    ),
    "*select_action_WHILE1": (
      after: "*select_action",
      loop_kind: While
    ),
    "*select_action_WEND1": (
      after: "*select_action_WHILE1",
      loop_kind: WhileEnd
    ),
    "*ai_evaluate": (
      rules: [
        (
          kind: Assignment,
          match: "locvar_validaction_emax = 0"
        )
      ]
    ),
    "*ai_sac": (
      rules: [
        (
          kind: Assignment,
          match: "locvar_makecardlist_p(1) = 50"
        )
      ]
    ),
    "*card_ai": (
      rules: [
        (
          kind: Assignment,
          match: "locvar_validaction_ec = 0"
        )
      ]
    ),
    "*card_ai_WHILE1": (
      after: "*card_ai",
      loop_kind: While
    ),
    "*card_ai_WEND1": (
      after: "*card_ai_WHILE1",
      loop_kind: WhileEnd
    ),
    "*com_product": (
      rules: [
        (
          kind: StringLiteral,
          match: "必要スキル: "
        )
      ]
    ),
    "*com_product_loop": (
      after: "*com_product"
    ),
    "*com_material": (
      rules: [
        (
          kind: If,
          match: "if ( mat(cnt) != 0 ) {"
        )
      ]
    ),
    "*com_material_loop_pgchk": (
      after: "*com_material"
    ),
    "*com_material_loop": (
      after: "*com_material_loop_pgchk"
    ),
    "*com_txtadv": (
      rules: [
        (
          kind: StringLiteral,
          match: "ディーラーに話しかけた。"
        )
      ]
    ),
    "*com_txtadv_loop": (
      after: "*com_txtadv"
    ),
    "*com_txtadv_loop_WHILE1": (
      after: "*com_txtadv_loop",
      loop_kind: While
    ),
    "*com_adv_anime1": (
      rules: [
        (
          kind: Assignment,
          match: "mattile = rnd(mattile(2)) + mattile(1)"
        )
      ]
    ),
    "*com_adv_anime2": (
      after: "*com_adv_anime1"
    ),
    "*com_adv_animeSub": (
      rules: [
        (
          kind: Function,
          match: "gcopy BUFFER_SCREEN, 170, noteinfo(0) * 20 + 120 + txtadvmsgfix + 16, x(1), 20 * listmax"
        )
      ]
    ),
    "*com_txtAdvQuit": (
      rules: [
        (
          kind: StringLiteral,
          match: "幾つかの戦利品がある。"
        )
      ]
    ),
    "*atx_RE": (
      rules: [
        (
          kind: StringLiteral,
          match: "ランダムサイト"
        )
      ]
    ),
    "*atx_RE_main": (
      rules: [
        (
          kind: StringLiteral,
          match: "何をしよう？"
        )
      ]
    ),
    "*atx_RE_search": (
      rules: [
        (
          kind: StringLiteral,
          match: "茂みを見つけた。"
        )
      ]
    ),
    "*atx_RE_end": (
      rules: [
        (
          kind: StringLiteral,
          match: "探索を終えた。"
        )
      ]
    ),
    "*adv_casinoCard": (
      rules: [
        (
          kind: StringLiteral,
          match: "I want to play Blackjack."
        )
      ]
    ),
    "*adv_casinoBlackJack": (
      rules: [
        (
          kind: StringLiteral,
          match: "では、賭けるチップを宣言してください。"
        )
      ]
    ),
    "*set_npcGod": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_GOD, tc) = GOD_YACATECT"
        )
      ]
    ),
    "*god_init": (
      rules: [
        (
          kind: Function,
          match: "sdim godname,"
        )
      ]
    ),
    "*god_effect": (
      rules: [
        (
          kind: If,
          match: "if ( cdata(CDATA_GOD, r1) == GOD_MANI ) {"
        )
      ]
    ),
    "*god_detail": (
      rules: [
        (
          kind: StringLiteral,
          match: "マニは機械仕掛けの神です。"
        )
      ]
    ),
    "*god_select": (
      rules: [
        (
          kind: StringLiteral,
          match: "信仰を捨てる"
        )
      ]
    ),
    "*god_select_WHILE1": (
      after: "*god_select",
      loop_kind: While
    ),
    "*god_select_WEND1": (
      after: "*god_select_WHILE1",
      loop_kind: WhileEnd
    ),
    "*change_god": (
      rules: [
        (
          kind: Assignment,
          match: "gdata(GDATA_FLAG_TIMES_CONVERTED)++"
        )
      ]
    ),
    "*god_pray": (
      rules: [
        (
          kind: StringLiteral,
          match: "あなたの神に祈りを乞う？"
        )
      ]
    ),
    "*god_offer": (
      rules: [
        (
          kind: StringLiteral,
          match: " on the altar and mutter the name of "
        )
      ]
    ),
    "*god_punish": (
      rules: [
        (
          kind: Assignment,
          match: "efid = SKILL_EFFECT_CURSE"
        ),
        (
          kind: Assignment,
          match: "efid = SKILL_SPACT_PUNISHMENT"
        ),
        (
          kind: Assignment,
          match: "efid = SKILL_EFFECT_DECREASE_STAT"
        )
      ]
    ),
    "*random_event": (
      rules: [
        (
          kind: Assignment,
          match: "id = 4, 120"
        )
      ]
    ),
    "*random_eventProc": (
      rules: [
        (
          kind: StringLiteral,
          match: "夢の中の収穫"
        )
      ]
    ),
    "*random_eventProc_SWEND1": (
      after: "*random_eventProc",
      loop_kind: SwitchEnd
    ),
    "*re_select": (
      rules: [
        (
          kind: Function,
          match: "txt lang(\"「\", \"\\\"\") + listn(0, 0) + lang(\"」\", \"\\\"\")"
        )
      ]
    ),
    "*re_select_WHILE1": (
      after: "*re_select",
      loop_kind: While
    ),
    "*re_select_WEND1": (
      after: "*re_select_WHILE1",
      loop_kind: WhileEnd
    ),
    "*event_income": (
      rules: [
        (
          kind: StringLiteral,
          match: "請求書が送られてきた。"
        )
      ]
    ),
    "*initial_recipe": (
      rules: [
        (
          kind: Function,
          match: "repeat length(rplistdef)"
        )
      ]
    ),
    "*recipe_init": (
      rules: [
        (
          kind: Assignment,
          match: "rplistdef(length(rplistdef)) = "
        )
      ]
    ),
    "*com_blend": (
      rules: [
        (
          kind: Function,
          match: "picload exedir + \"graphic\\\\deco_blend.bmp\", 1"
        )
      ]
    ),
    "*com_blend_step": (
      rules: [
        (
          kind: StringLiteral,
          match: "幾つ作る？"
        )
      ]
    ),
    "*com_blend_recipe_loop": (
      after: "*com_blend_step"
    ),
    "*com_blend_recipe_loop_WHILE1": (
      after: "*com_blend_recipe_loop",
      loop_kind: While
    ),
    "*com_blend_recipe_loop_WHILE1_CONTINUE": (
      after: "*com_blend_recipe_loop_WHILE1",
      loop_kind: WhileContinue
    ),
    "*com_blend_material_loop": (
      after: "*com_blend_recipe_loop_WHILE1_CONTINUE"
    ),
    "*com_blend_material_loop_WHILE1": (
      after: "*com_blend_material_loop",
    ),
    "*com_blend_material_loop_WHILE1_CONTINUE": (
      after: "*com_blend_material_loop_WHILE1",
      loop_kind: WhileContinue
    ),
    "*com_blend_material_loop_WEND1": (
      after: "*com_blend_material_loop_WHILE1_CONTINUE",
      loop_kind: WhileEnd
    ),
    "*blend_checkMat": (
      rules: [
        (
          kind: If,
          match: "if ( rpref(10 + cnt * 2) == (-1) ) {"
        ),
        (
          kind: Assignment,
          match: "f = 0"
        )
      ]
    ),
    "*blend_deleteMat": (
      rules: [
        (
          kind: If,
          match: "if ( rpdata(RPDATA_TYPE, rpid) > 0 & cnt == 0 ) {"
        )
      ]
    ),
    "*blend_complete": (
      rules: [
        (
          kind: StringLiteral,
          match: "調合失敗！"
        )
      ]
    ),
    "*blend": (
      rules: [
        (
          kind: StringLiteral,
          match: "の調合をはじめた。"
        )
      ]
    ),
    "*blend_act": (
      rules: [
        (
          kind: StringLiteral,
          match: "あっ！空き瓶を井戸に落としてしまった…"
        )
      ]
    ),
    "*blend_act_SWEND1": (
      after: "*blend_act",
      loop_kind: SwitchEnd
    ),
    "*com_import": (
      rules: [
        (
          kind: Function,
          match: "net_dllist \".ept\", 1"
        )
      ]
    ),
    "*com_import_loop_pgchk": (
      after: "*com_import"
    ),
    "*com_import_loop": (
      after: "*com_import_loop_pgchk",
      loop_kind: While
    ),
    "*findLocation": (
      rules: [
        (
          kind: Assignment,
          match: "tlocx = cdata(CDATA_X, list(0, cnt))"
        )
      ]
    ),
    "*findLocation_WHILE1": (
      after: "*findLocation"
    ),
    "*findLocation_WHILE1_CONTINUE": (
      after: "*findLocation_WHILE1",
      loop_kind: WhileContinue
    ),
    "*com_target": (
      rules: [
        (
          kind: StringLiteral,
          match: "視界内にターゲットは存在しない。"
        ),
        (
          kind: Assignment,
          match: "page = cnt / pagesize"
        )
      ]
    ),
    "*com_target_loop_pgchk": (
      after: "*com_target"
    ),
    "*com_target_loop": (
      after: "*com_target_loop_pgchk"
    ),
    "*com_target_loop_WEND1": (
      after: "*com_target_loop",
      loop_kind: WhileEnd
    ),
    "*com_mapset": (
      rules: [
        (
          kind: Assignment,
          match: "ww = 33"
        )
      ]
    ),
    "*com_mapset_WHILE1": (
      after: "*com_mapset",
      loop_kind: While
    ),
    "*com_mapset_WHILE1_CONTINUE": (
      after: "*com_mapset_WHILE1",
      loop_kind: WhileContinue
    ),
    "*com_mapset_WEND1": (
      after: "*com_mapset_WHILE1_CONTINUE",
      loop_kind: WhileEnd
    ),
    "*com_ally": (
      rules: [
        (
          kind: If,
          match: "if ( allyctrl == 7 ) {"
        )
      ]
    ),
    "*com_ally_loop": (
      after: "*com_ally"
    ),
    "*com_ally_loop_WHILE1": (
      after: "*com_ally_loop",
      loop_type: While
    ),
    "*com_ally_loop_WHILE1_CONTINUE": (
      after: "*com_ally_loop_WHILE1",
      loop_type: Continue
    ),
    "*com_knowOther": (
      rules: [
        (
          kind: StringLiteral,
          match: "特に何も考えていない"
        )
      ]
    ),
    "*com_knowOther_loop": (
      after: "*com_knowOther"
    ),
    "*com_knowOther_pgchg": (
      after: "*com_knowOther_loop"
    ),
    "*com_knowSelf": (
      rules: [
        (
          kind: StringLiteral,
          match: "<title1>◆ "
        )
      ]
    ),
    "*com_knowSelf_loop": (
      after: "*com_knowSelf"
    ),
    "*com_knowSelf_pgchg": (
      after: "*com_knowSelf_loop"
    ),
    "*com_trait": (
      rules: [
        (
          kind: Function,
          match: "snd SOUNDLIST_FEAT"
        ),
        (
          kind: Function,
          match: "picload exedir + \"graphic\\\\deco_feat.bmp\", 1"
        ),
      ]
    ),
    "*com_trait_loop": (
      after: "*com_trait"
    ),
    "*com_trait_loop_WHILE1": (
      after: "*com_trait_loop",
      loop_kind: While
    ),
    "*com_journal": (
      rules: [
        (
          kind: StringLiteral,
          match: " - Completed Quests - "
        )
      ]
    ),
    "*com_journal_loop": (
      after: "*com_journal"
    ),
    "*com_journal_loop_pgchg": (
      after: "*com_journal_loop"
    ),
    "*com_quest": (
      rules: [
        (
          kind: StringLiteral,
          match: "新しい依頼は掲示されていないようだ。"
        )
      ]
    ),
    "*com_quest_loop_pgchk": (
      after: "*com_quest"
    ),
    "*com_quest_loop": (
      after: "*com_quest_loop_pgchk",
      loop_kind: While
    ),
    "*com_listNpc": (
      rules: [
        (
          kind: If,
          match: "if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_TEMP ) {"
        ),
        (
          kind: Assignment,
          match: "list(0, listmax) = cnt, -cdata(CDATA_LEVEL, cnt)"
        )
      ]
    ),
    "*com_listNpc_loop_pgchk": (
      after: "*com_listNpc"
    ),
    "*com_listNpc_loop": (
      after: "*com_listNpc_loop_pgchk",
      loop_kind: While
    ),
    "*com_reserve": (
      rules: [
        (
          kind: If,
          match: "if ( itemmemory(2, cnt) == 0 ) {"
        )
      ]
    ),
    "*com_reserve_loop_pgchk": (
      after: "*com_reserve"
    ),
    "*com_reserve_loop": (
      after: "*com_reserve_loop_pgchk",
      loop_kind: While
    ),
    "*com_jukebox": (
      rules: [
        (
          kind: Function,
          match: "repeat 134 - 50 - 1, 50"
        )
      ]
    ),
    "*com_jukebox_loop_pgchk": (
      after: "*com_jukebox"
    ),
    "*com_jukebox_loop": (
      rules: [
        (
          kind: Assignment,
          match: "s += \"No Music\""
        )
      ]
    ),
    "*com_listAdv": (
      rules: [
        (
          kind: Assignment,
          match: "list(0, listmax) = cnt, -cdata(CDATA_FAME, cnt)"
        )
      ]
    ),
    "*com_listAdv_loop_pgchk": (
      after: "*com_listAdv"
    ),
    "*com_listAdv_loop": (
      after: "*com_listAdv_loop_pgchk",
      loop_kind: While
    ),
    "*wish_fix": (
      rules: [
        (
          kind: Assignment,
          match: "inputlog = del_str(inputlog, lang(\"アイテム\", \"item\"))"
        )
      ]
    ),
    "*com_aka": (
      rules: [
        (
          kind: Assignment,
          match: "i = 10500"
        )
      ]
    ),
    "*com_aka_WHILE1": (
      after: "*com_aka"
    ),
    "*com_aka_WEND1": (
      after: "*com_aka_WHILE1"
    ),
    "*com_wish_end": (
      rules: [
        (
          kind: StringLiteral,
          match: "は狂喜して叫んだ。「"
        )
      ]
    ),
    "*com_wish": (
      rules: [
        (
          kind: Function,
          match: "何を望む？"
        )
      ]
    ),
    "*wish_item": (
      rules: [
        (
          kind: If,
          match: "if ( ioriginalnameref(cnt) == inputlog ) {"
        )
      ]
    ),
    "*wish_skill": (
      rules: [
        (
          kind: StringLiteral,
          match: "の技術を会得した！"
        )
      ]
    ),
    "*wish_card": (
      rules: [
        (
          kind: Function,
          match: "itemcreate -1, ITEM_ID_CARD, cdata(CDATA_X, CHARA_PLAYER), cdata(CDATA_Y, CHARA_PLAYER), 0"
        ),
        (
          kind: StringLiteral,
          match: "足元に"
        )
      ]
    ),
    "*wish_figure": (
      rules: [
        (
          kind: Function,
          match: "itemcreate -1, ITEM_ID_FIGURINE, cdata(CDATA_X, CHARA_PLAYER), cdata(CDATA_Y, CHARA_PLAYER), 0"
        ),
        (
          kind: StringLiteral,
          match: "足元に"
        )
      ]
    ),
    "*wish_monster": (
      rules: [
        (
          kind: Assignment,
          match: "p = 1000 - (strlen(s) - strlen(s2)) * 10"
        )
      ]
    ),
    "*com_shortcut": (
      rules: [
        (
          kind: StringLiteral,
          match: "そのキーにはショートカットが割り当てられていない。"
        )
      ]
    ),
    "*com_dig": (
      rules: [
        (
          kind: StringLiteral,
          match: "どの方向を掘る？"
        )
      ]
    ),
    "*com_bash": (
      rules: [
        (
          kind: StringLiteral,
          match: "どの方向に体当たりする？"
        )
      ]
    ),
    "*com_skill": (
      after: "*com_bash"
    ),
    "*com_applySkill": (
      rules: [
        (
          kind: If,
          match: "if ( spact(cnt) == 1 ) {"
        ),
        (
          kind: If,
          match: "cnt + 600 != 746"
        ),
      ]
    ),
    "*com_applySkill_loop": (
      after: "*com_applySkill",
    ),
    "*com_applySkill_loop_WHILE1": (
      after: "*com_applySkill_loop",
      loop_kind: While
    ),
    "*com_applyWideSkill": (
      rules: [
        (
          kind: If,
          match: "if ( spact(cnt) == 1 ) {"
        ),
        (
          kind: Expression,
          match: "cnt + 600 == 746"
        ),
      ]
    ),
    "*com_applyWideSkill_loop_pgchk": (
      after: "*com_applyWideSkill"
    ),
    "*com_applyWideSkill_loop": (
      after: "*com_applyWideSkill_loop_pgchk",
      loop_kind: While
    ),
    "*com_stack": (
      rules: [
        (
          kind: StringLiteral,
          match: "同じアイテムを、鮮度や価値の低いほうにあわせてまとめる？"
        )
      ]
    ),
    "*com_give": (
      rules: [
        (
          kind: StringLiteral,
          match: "どの方向に？ "
        )
      ]
    ),
    "*com_interact": (
      rules: [
        (
          kind: StringLiteral,
          match: "操作する対象の方向は？"
        )
      ]
    ),
    "*com_name": (
      after: "*com_interact",
      // rules: [
      //   (
      //     kind: StringLiteral,
      //     match: "を何と呼ぶ？ ",
      //     position: LabelTop
      //   )
      // ]
    ),
    "*com_tone": (
      rules: [
        (
          kind: StringLiteral,
          match: "デフォルトの口調"
        )
      ]
    ),
    "*com_tone_loop_pgchk": (
      after: "*com_tone"
    ),
    "*com_tone_loop": (
      after: "*com_tone_loop_pgchk"
    ),
    "*com_userNpc": (
      rules: [
        (
          kind: If,
          match: "if ( instr(userdatan(6, cnt), 0, \"_tmp_\") == (-1) ) {"
        )
      ]
    ),
    "*com_userNpc_loop_pgchk": (
      after: "*com_userNpc"
    ),
    "*com_userNpc_loop": (
      after: "*com_userNpc_loop_pgchk"
    ),
    "*com_book": (
      rules: [
        (
          kind: Function,
          match: "noteload exedir + \"data\\\\book.txt\""
        ),
        (
          kind: Assignment,
          match: "listmax = noteinfo(0)"
        ),
      ]
    ),
    "*com_book_loop": (
      after: "*com_book"
    ),
    "*com_book_loop_pgchg": (
      after: "*com_book_loop"
    ),
    "*com_spellcast": (
      after: "*com_book_loop_pgchg"
    ),
    "*com_spell": (
      rules: [
        (
          kind: If,
          match: "if ( spell(cnt) > 0 ) {"
        )
      ]
    ),
    "*com_spell_loop_pgchk": (
      after: "*com_spell"
    ),
    "*com_spell_loop": (
      after: "*com_spell_loop_pgchk"
    ),
    "*skill_desc": (
      rules: [
        (
          kind: Assignment,
          match: "s += \"\" + limit(bonus, 1, 100) + \"%\""
        )
      ]
    ),
    "*trainer_skill": (
      rules: [
        (
          kind: Assignment,
          match: "dblist(0, dbmax) ="
        ),
        (
          kind: If,
          match: "if ( gdata(GDATA_AREA) == AREA_YOWYN ) {"
        ),
        (
          kind: If,
          match: "if ( gdata(GDATA_AREA) == AREA_VERNIS ) {"
        )
      ]
    ),
    "*notable_skill": (
      after: "*trainer_skill"
    ),
    "*setHistory1": (
      rules: [
        (
          kind: StringLiteral,
          match: "生まれつき天涯孤独だった。"
        )
      ]
    ),
    "*setHistory2": (
      rules: [
        (
          kind: StringLiteral,
          match: "自分を見つめ直すため旅に出る。"
        )
      ]
    ),
    "*setHistory3": (
      rules: [
        (
          kind: StringLiteral,
          match: "温厚で慈悲深いが、"
        )
      ]
    ),
    "*setHistory4": (
      rules: [
        (
          kind: StringLiteral,
          match: "熱中すると周りが見えなくなる。"
        )
      ]
    ),
    "*setHistory5": (
      rules: [
        (
          kind: StringLiteral,
          match: "監禁が趣味"
        )
      ]
    ),
    "*com_charainfo": (
      rules: [
        (
          kind: If,
          match: "if ( dbg_showallskill ) {"
        )
      ]
    ),
    "*com_charainfo_loop": (
      after: "*com_charainfo"
    ),
    "*com_charainfo_loop_WHILE1": (
      after: "*com_charainfo_loop"
    ),
    "*com_charainfo_loop_WHILE1_CONTINUE": (
      after: "*com_charainfo_loop_WHILE1"
    ),
    "*portrait_item": (
      rules: [
        (
          kind: Assignment,
          match: "rtvaln = \"hair\""
        )
      ]
    ),
    "*get_pic_selection": (
      rules: [
        (
          kind: Assignment,
          match: "rtval = 100, 0, cdata(CDATA_PIC, cc) - 692"
        )
      ]
    ),
    "*com_item_mark": (
      rules: [
        (
          kind: StringLiteral,
          match: "移動キーでマーク移動"
        )
      ]
    ),
    "*com_item_mark_loop": (
      after: "*com_item_mark"
    ),
    "*com_item_mark_adjust": (
      rules: [
        (
          kind: StringLiteral,
          match: "angle, hit the enter key to decide the position, hit the cancel key to exit."
        )
      ]
    ),
    "*com_item_mark_adjust_loop": (
      after: "*com_item_mark_adjust"
    ),
    "*com_shape_change": (
      rules: [
        (
          kind: StringLiteral,
          match: "元々の姿にする"
        )
      ]
    ),
    "*com_shape_change_WHILE1": (
      after: "*com_shape_change"
    ),
    "*com_shape_change_WHILE1_CONTINUE": (
      after: "*com_shape_change_WHILE1"
    ),
    "*com_portrait": (
      rules: [
        (
          kind: Function,
          match: "buffer BUFFER_PIC, 3200, 112"
        )
      ]
    ),
    "*com_portrait_loop": (
      after: "*com_portrait"
    ),
    "*com_portrait_loop_WHILE1": (
      after: "*com_portrait_loop"
    ),
    "*com_portrait_loop_WHILE1_CONTINUE": (
      after: "*com_portrait_loop_WHILE1"
    ),
    "*com_mirror": (
      rules: [
        (
          kind: StringLiteral,
          match: "脚部鎧　"
        )
      ]
    ),
    "*com_mirror_loop_WHILE1": (
      after: "*com_mirror"
    ),
    "*com_calcAttack": (
      rules: [
        (
          kind: StringLiteral,
          match: "\"Unarmed\"",
          exact: true
        )
      ]
    ),
    "*com_skill_calcAttack": (
      rules: [
        (
          kind: Function,
          match: "mes lang(\"命中\", \"Hit\")"
        )
      ]
    ),
    "*show_weaponStat": (
      rules: [
        (
          kind: StringLiteral,
          match: "は両手にしっくりとおさまる。"
        )
      ]
    ),
    "*com_wear": (
      rules: [
        (
          kind: Assignment,
          match: "mainhand = cnt"
        )
      ]
    ),
    "*com_wear_loop_pgchk": (
      after: "*com_wear"
    ),
    "*com_wear_loop": (
      after: "*com_wear_loop_pgchk"
    ),
    "*com_get": (
      rules: [
        (
          kind: StringLiteral,
          match: "それは持ち運べない。"
        )
      ]
    ),
    "*com_allyInventory": (
      rules: [
        (
          kind: StringLiteral,
          match: "は忙しい。"
        )
      ]
    ),
    "*sort_list": (
      rules: [
        (
          kind: Assignment,
          match: "list(0, cnt) = list(0, cnt + 1), list(1, cnt + 1)"
        )
      ]
    ),
    "*sort_list2": (
      after: "*sort_list"
    ),
    "*com_inventory": (
      rules: [
        (
          kind: StringLiteral,
          match: "ここには祭壇がない。"
        )
      ]
    ),
    "*com_inventory_loop": (
      rules: [
        (
          kind: StringLiteral,
          match: "そのアイテムは存在しない。"
        )
      ]
    ),
    "*com_inventory_loop_WHILE1": (
      after: "*com_inventory_loop"
    ),
    "*inv_skipSc": (
      rules: [
        (
          kind: StringLiteral,
          match: "これ以上は置けない。"
        )
      ]
    ),
    "*com_inventory_end": (
      rules: [
        (
          kind: Function,
          match: "荷車の荷物は登録できない。"
        )
      ]
    ),
    "*com_inventory_loop_WHILE1_CONTINUE": (
      after: "*com_inventory_end"
    ),
    "*com_inventory_loop_WEND1": (
      after: "*com_inventory_loop_WHILE1_CONTINUE"
    ),
    "*com_identify": (
      rules: [
        (
          kind: StringLiteral,
          match: "特に情報はない"
        )
      ]
    ),
    "*com_identify_loop_pgchk": (
      after: "*com_identify",
    ),
    "*com_identify_loop": (
      after: "*com_identify_loop_pgchk"
    ),
    "*findTarget": (
      rules: [
        (
          kind: If,
          match: "if ( synccheck(cdata(CDATA_TARGET, cc), -1) == 0 ) {"
        )
      ]
    ),
    "*com_confirmAttack": (
      rules: [
        (
          kind: StringLiteral,
          match: "Really attack "
        )
      ]
    ),
    "*com_fire": (
      rules: [
        (
          kind: Function,
          match: "射撃用の道具を装備していない。"
        )
      ]
    ),
    // (
    //   name: "*FindRangeWeapon",
    //   rules: [
    //     (
    //       kind: Function,
    //       match: "inv(INV_ITEM_SKILL_REF, ammo) = SKILL_WEAPON_CROSSBOW"
    //     )
    //   ]
    // ),
    "*com_findTarget": (
      rules: [
        (
          kind: Assignment,
          match: "p = dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), list(1, cnt), list(2, cnt))"
        )
      ]
    ),
    "*com_rest": (
      rules: [
        (
          kind: Assignment,
          match: "r1 = 50"
        )
      ]
    ),
    "*com_rowActCancel": (
      rules: [
        (
          kind: StringLiteral,
          match: "を中断したほうがいいだろうか？"
        )
      ]
    ),
    "*com_save": (
      rules: [
        (
          kind: Function,
          match: "これまでの冒険を記録して終了する？"
        )
      ]
    ),
    "*check_return": (
      rules: [
        (
          kind: Assignment,
          match: "p = gdata(GDATA_QUEST_POOL + cnt)"
        ),
        (
          kind: If,
          match: "if ( qdata(QDATA_STATE, p) == QUEST_STATE_ONGOING ) {"
        )
      ]
    ),
    "*com_return": (
      rules: [
        (
          kind: StringLiteral,
          match: "依頼請負中の帰還は法律で禁止されている。それでも帰還する？"
        )
      ]
    ),
    "*com_gasha": (
      rules: [
        (
          kind: StringLiteral,
          match: "を使ってガシャガシャする？"
        )
      ]
    ),
    "*com_train": (
      rules: [
        (
          kind: Assignment,
          match: "gdata(GDATA_ROW_ACT) = ACTION_TRAIN"
        )
      ]
    ),
    "*com_dump": (
      rules: [
        (
          kind: StringLiteral,
          match: "カスタムNPCを作成"
        )
      ]
    ),
    "*dump_chara": (
      rules: [
        (
          kind: StringLiteral,
          match: "DV        : "
        )
      ]
    ),
    "*com_ammo": (
      rules: [
        (
          kind: StringLiteral,
          match: "現在の装填弾:"
        )
      ]
    ),
    "*gene_itemfix": (
      rules: [
        (
          kind: If,
          match: "if ( inv(INV_ITEM_ID, cnt) == ITEM_ID_CARD | inv(INV_ITEM_ID, cnt) == ITEM_ID_FIGURINE ) {"
        )
      ]
    ),
    "*fixOnMapEnter": (
      rules: [
        (
          kind: Assignment,
          match: "mdata(MDATA_RESTORE_POS) = 1"
        )
      ]
    ),
    "*fixSave": (
      rules: [
        (
          kind: If,
          match: "if ( gdata(GDATA_VERSION) < "
        ),
        (
          kind: Assignment,
          match: "gdata(GDATA_VERSION) ="
        )
      ]
    ),
    "*mapReset": (
      rules: [
        (
          kind: Assignment,
          match: "gdata(GDATA_MAP_VERSION)++"
        )
      ]
    ),
    "*apply_gene": (
      rules: [
        (
          kind: Assignment,
          match: "ibigin = (ibigin - 250) / 8"
        )
      ]
    ),
    "*load_gene": (
      rules: [
        (
          kind: Assignment,
          match: "gdata(GDATA_PLAY_TIME) = genetemp(GDATA_PLAY_TIME)"
        )
      ]
    ),
    "*generate_gene": (
      rules: [
        (
          kind: Assignment,
          match: "fmode = 14"
        )
      ]
    ),
    "*unzip": (
      rules: [
        (
          kind: Function,
          match: "memcpy filetemp, filebuff, len - p * 2, 0, lenhead + p * 2"
        )
      ]
    ),
    "*set_userNpc": (
      rules: [
        (
          kind: Assignment,
          match: "cun = cdata(CDATA_USERNPC_ID, rc)"
        )
      ]
    ),
    "*userNpc_update": (
      rules: [
        (
          kind: Assignment,
          match: "usernpcmax = noteinfo(0)"
        )
      ]
    ),
    "*user_npc": (
      rules: [
        (
          kind: StringLiteral,
          match: "どのファイルからNPCを作成する？"
        )
      ]
    ),
    "*game_ctrlFile": (
      rules: [
        (
          kind: Function,
          match: "bsave folder + \"header.txt\", playerheader"
        )
      ]
    ),
    "*export_map": (
      rules: [
        (
          kind: StringLiteral,
          match: "[＋製]"
        )
      ]
    ),
    "*export_chara": (
      rules: [
        (
          kind: Assignment,
          match: "headtemp = \"【\" + gdatan(GDATAN_TEAM1) + \"】(\" + n + \"体) Lv\" + lv + \"\\n\""
        )
      ]
    ),
    "*del_userNpc": (
      rules: [
        (
          kind: Function,
          match: "dirlist buff, exedir + \"user\\\\!tmp*.npc\""
        )
      ]
    ),
    "*del_userTemp": (
      rules: [
        (
          kind: Function,
          match: "dirlist buff, exedir + \"user\\\\*.t\""
        )
      ]
    ),
    "*game_load": (
      rules: [
        (
          kind: Function,
          match: "gosub *fixSave"
        )
      ]
    ),
    "*game_save": (
      rules: [
        (
          kind: Function,
          match: "exist file + getpath(save_s, 8)"
        )
      ]
    ),
    "*extract_map": (
      rules: [
        (
          kind: Assignment,
          match: "gdata(GDATA_TELEPORT_AREA) = AREA_SHOW_HOUSE"
        )
      ]
    ),
    "*game_title": (
      rules: [
        (
          kind: Assignment,
          match: "mode = MODELIST_TITLE"
        )
      ]
    ),
    "*game_title_WHILE1": (
      after: "*game_title"
    ),
    "*game_title_selectID": (
      rules: [
        (
          kind: StringLiteral,
          match: "どの冒険を再開するんだい？"
        )
      ]
    ),
    "*game_title_selectID_WHILE1": (
      after: "*game_title_selectID"
    ),
    "*game_title_selectGen": (
      rules: [
        (
          kind: StringLiteral,
          match: "どの遺伝子を引き継ぐ？"
        )
      ]
    ),
    "*game_title_selectGen_WHILE1": (
      rules: [
        (
          kind: StringLiteral,
          match: "No gene files found"
        )
      ]
    ),
    "*define_los": (
      rules: [
        (
          kind: Function,
          match: "dim fovlist, 2, 17"
        )
      ]
    ),
    "*esc_check": (
      rules: [
        (
          kind: If,
          match: "if ( wparam == 27 ) {"
        )
      ]
    ),
    "*prompt_word": (
      rules: [
        (
          kind: Assignment,
          match: "p(3) = peek(inputlog, p(4))"
        )
      ]
    ),
    "*prompt_direction": (
      rules: [
        (
          kind: Function,
          match: "gcopy BUFFER_SCREEN, x, y, 48 * 3, 48 * 3"
        )
      ]
    ),
    "*prompt_direction_WHILE1": (
      rules: [
        (
          kind: Function,
          match: "grotate BUFFER_INF, 212, 432, 1.0 * 3.14, 28, 28"
        )
      ]
    ),
    "*prompt_direction_WHILE1_CONTINUE": (
      rules: [
        (
          kind: Function,
          match: "goto *prompt_direction_WHILE1"
        )
      ]
    ),
    "*prompt_key": (
      rules: [
        (
          kind: If,
          match: "if ( promptl(1, cnt) == \"null\" ) {"
        )
      ]
    ),
    "*prompt_key_WHILE1": (
      rules: [
        (
          kind: Function,
          match: "window2 dx(1) + sx + 20, dy, dx - 40, 36, 0, 2"
        )
      ]
    ),
    "*game_debug": (
      rules: [
        (
          kind: StringLiteral,
          match: "Debug Console"
        )
      ]
    ),
    "*game_debug_WHILE1": (
      after: "*game_debug"
    ),
    "*game_debug_WEND1": (
      after: "*game_debug_WHILE1"
    ),
    "*dbg_GetInfo": (
      rules: [
        (
          kind: StringLiteral,
          match: "Shows charainfo."
        )
      ]
    ),
    "*console_write": (
      rules: [
        (
          kind: Function,
          match: "objprm 1, dbm"
        )
      ]
    ),
    "*mutexobj": (
      rules: [
        (
          kind: Assignment,
          match: "mutex_handle = stat"
        )
      ]
    ),
    "*randomSite": (
      rules: [
        (
          kind: StringLiteral,
          match: "採掘に失敗した。"
        )
      ]
    ),
    "*disarmTrap": (
      rules: [
        (
          kind: StringLiteral,
          match: "罠を解除した。"
        )
      ]
    ),
    "*procMove": (
      rules: [
        (
          kind: StringLiteral,
          match: "槍が地面から飛び出した。"
        )
      ]
    ),
    "*perform": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_ROW_ACT, cc) = ACTION_PERFORM"
        )
      ]
    ),
    "*perform_dance": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_ROW_ACT, cc) = ACTION_PERFORM_DANCE"
        )
      ]
    ),
    "*perform_preach": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_ROW_ACT, cc) = ACTION_PERFORM_PREACH"
        )
      ]
    ),
    "*skill_charge": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_ROW_ACT, cc) = ACTION_CHARGE"
        )
      ]
    ),
    "*skill_persuasion": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_ROW_ACT, cc) = ACTION_PERSUASION"
        )
      ]
    ),
    "*skill_peculiar_joke": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_ROW_ACT, cc) = ACTION_PECULIAR_JOKE"
        )
      ]
    ),
    "*skill_blended_lie": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_ROW_ACT, cc) = ACTION_BLENDED_LIE"
        )
      ]
    ),
    "*skill_intimidation": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_ROW_ACT, cc) = ACTION_INTIMIDATION"
        )
      ]
    ),
    "*skill_mysterious_song": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_ROW_ACT, cc) = ACTION_MYSTERIOUS_SONG"
        )
      ]
    ),
    "*eat_meal": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_ROW_ACT, cc) = ACTION_MEAL"
        )
      ]
    ),
    "*eat_meal_xmas_cake": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_ROW_ACT, cc) = ACTION_XMAS_CAKE"
        )
      ]
    ),
    "*sexsex": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_ROW_ACT, cc) = ACTION_SEX"
        )
      ]
    ),
    "*skill_tuin_der_lusten": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_ROW_ACT, cc) = ACTION_TUIN_DER_LUSTEN"
        )
      ]
    ),
    "*generalAct": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_ROW_ACT, cc) = ACTION_GENERAL"
        )
      ]
    ),
    "*sleep_draw": (
      after: "*generalAct"
    ),
    "*sleep_draw_init": (
      rules: [
        (
          kind: Function,
          match: "picload exedir + \"\\\\graphic\\\\bg_night.bmp\", 1"
        )
      ]
    ),
    "*sleep": (
      rules: [
        (
          kind: StringLiteral,
          match: "しかし、大事な用を思い出して飛び起きた。"
        )
      ]
    ),
    "*rest": (
      rules: [
        (
          kind: StringLiteral,
          match: "あなたは横になった。"
        )
      ]
    ),
    "*travel": (
      rules: [
        (
          kind: Assignment,
          match: "traveldone = 1"
        )
      ]
    ),
    "*choose_fish": (
      rules: [
        (
          kind: Assignment,
          match: "dbsum += fishdata(FISHDATA_RARE, cnt)"
        )
      ]
    ),
    "*get_fish": (
      rules: [
        (
          kind: StringLiteral,
          match: "を釣り上げた！"
        )
      ]
    ),
    "*fishing": (
      rules: [
        (
          kind: StringLiteral,
          match: "何も釣れなかった…"
        )
      ]
    ),
    "*plant": (
      rules: [
        (
          kind: StringLiteral,
          match: "採取を始めた。"
        )
      ]
    ),
    "*search": (
      rules: [
        (
          kind: StringLiteral,
          match: "探索を始めた。"
        )
      ]
    ),
    "*dig": (
      rules: [
        (
          kind: StringLiteral,
          match: "鉱石を掘り始めた。"
        )
      ]
    ),
    "*eat": (
      rules: [
        (
          kind: StringLiteral,
          match: "「いただきマンモス」"
        )
      ]
    ),
    "*insta_eat": (
      rules: [
        (
          kind: Assignment,
          match: "cieat = ci"
        )
      ]
    ),
    "*eat_finish": (
      rules: [
        (
          kind: Function,
          match: "もう当分食べなくてもいい。"
        )
      ]
    ),
    "*readSpellbook": (
      rules: [
        (
          kind: StringLiteral,
          match: "は塵となって崩れ落ちた。"
        )
      ]
    ),
    "*read": (
      rules: [
        (
          kind: StringLiteral,
          match: "すくつの探索を許可する、という内容の文面が形式的に書いてある。"
        )
      ]
    ),
    "*cast": (
      rules: [
        (
          kind: Assignment,
          match: "spellbk = efid"
        )
      ]
    ),
    "*cast_proc": (
      rules: [
        (
          kind: Assignment,
          match: "efsource = 3"
        )
      ]
    ),
    "*drinkPotion": (
      rules: [
        (
          kind: If,
          match: "if ( potionthrow ) {"
        )
      ]
    ),
    "*drinkWell": (
      rules: [
        (
          kind: StringLiteral,
          match: " falls in the well!"
        )
      ]
    ),
    "*readScroll": (
      rules: [
        (
          kind: Function,
          match: "skillexp SKILL_NORMAL_LITERACY, cc, 25, 2"
        )
      ]
    ),
    "*zapStaff": (
      rules: [
        (
          kind: Function,
          match: "name(cc) + \" zap \" +"
        )
      ]
    ),
    "*zapStaffSkip": (
      after: "*zapStaff"
    ),
    "*action": (
      rules: [
        (
          kind: If,
          match: "if ( efid == SKILL_SPACT_DEATH_WORD ) {"
        )
      ]
    ),
    "*effect_selectTg": (
      rules: [
        (
          kind: Assignment,
          match: "noeffect = 0"
        )
      ]
    ),
    "*effect": (
      rules: [
        (
          kind: Assignment,
          match: "obvious = 1"
        )
      ]
    ),
    "*chainBomb_loop": (
      rules: [
        (
          kind: Assignment,
          match: "chainbomb++"
        )
      ]
    ),
    "*chainBomb_loop_WHILE1": (
      rules: [
        (
          kind: Assignment,
          match: "chainbomb--"
        )
      ]
    ),
    "*chainBomb_loop_WEND1": (
      after: "*chainBomb_loop_WHILE1"
    ),
    "*effect_SWEND1": (
      after: "*chainBomb_loop_WEND1"
    ),
    "*effect2": (
      rules: [
        (
          kind: StringLiteral,
          match: "There's a mark on the map..."
        )
      ]
    ),
    "*delMutation_cursed": (
      rules: [
        (
          kind: StringLiteral,
          match: "あなたは変容した！ "
        )
      ]
    ),
    "*spUncurse_cursed": (
      rules: [
        (
          kind: If,
          match: "if ( efid == SKILL_SPACT_CURSE ) {"
        )
      ]
    ),
    "*jump_changeCreature": (
      rules: [
        (
          kind: StringLiteral,
          match: "は変化した。"
        )
      ]
    ),
    "*effect_end": (
      rules: [
        (
          kind: Assignment,
          match: "ci = efcibk"
        ),
        (
          kind: Assignment,
          match: "efstatus = 0"
        ),
        (
          kind: Assignment,
          match: "efsource = 0"
        ),
        (
          kind: Function,
          match: "return 1"
        ),
      ]
    ),
    "*effect_heal": (
      rules: [
        (
          kind: Assignment,
          match: "subloop = 1"
        )
      ]
    ),
    "*effect_directive": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_DIRECTIVE_MODE, tc) = DIRECTIVE_MODE_INTERCEPT"
        )
      ]
    ),
    "*effect_elixer": (
      after: "*effect_directive"
    ),
    "*act_throw": (
      rules: [
        (
          kind: StringLiteral,
          match: "それは地面に落ちて砕けた。"
        )
      ]
    ),
    "*act_pray": (
      rules: [
        (
          kind: Function,
          match: "goto *god_pray"
        )
      ]
    ),
    "*act_exchange": (
      rules: [
        (
          kind: Function,
          match: "item_exchange ci, ti"
        )
      ]
    ),
    "*act_get": (
      rules: [
        (
          kind: StringLiteral,
          match: "を撤去する？ "
        )
      ]
    ),
    "*act_drop": (
      rules: [
        (
          kind: StringLiteral,
          match: "を地面に置いた。"
        )
      ]
    ),
    "*act_equip": (
      rules: [
        (
          kind: Assignment,
          match: "inv(INV_ITEM_EQUIP, ci) = body"
        )
      ]
    ),
    "*act_unequip": (
      rules: [
        (
          kind: Assignment,
          match: "ci = p - 1"
        ),
        (
          kind: Assignment,
          match: "inv(INV_ITEM_EQUIP, ci) = 0"
        )
      ]
    ),
    "*act_unequip_part": (
      rules: [
        (
          kind: If,
          match: "if ( cdata(cnt, r1) / EXT_EQUIP_SLOTS == body ) {"
        )
      ]
    ),
    "*act_read": (
      rules: [
        (
          kind: Assignment,
          match: "dbmode = DBMODE_ON_READ"
        )
      ]
    ),
    "*act_eat": (
      rules: [
        (
          kind: StringLiteral,
          match: "の食べ物を横取りした。"
        )
      ]
    ),
    "*act_drink": (
      after: "*act_eat"
    ),
    "*act_zap": (
      rules: [
        (
          kind: Function,
          match: "gosub *zapStaff"
        )
      ]
    ),
    "*act_bash": (
      rules: [
        (
          kind: StringLiteral,
          match: "に体当たりした。"
        )
      ]
    ),
    "*search_for_chara": (
      rules: [
        (
          kind: Assignment,
          match: "listmax2++"
        )
      ]
    ),
    "*act_movePC": (
      rules: [
        (
          kind: StringLiteral,
          match: "と入れ替わった。"
        )
      ]
    ),
    "*move_skip": (
      rules: [
        (
          kind: StringLiteral,
          match: "Do you want to leave "
        )
      ]
    ),
    "*act_move": (
      rules: [
        (
          kind: StringLiteral,
          match: "は蜘蛛の巣にひっかかった。"
        )
      ]
    ),
    "*cell_info": (
      rules: [
        (
          kind: StringLiteral,
          match: "地面に何かがあるようだ。"
        )
      ]
    ),
    "*act_moveLevel": (
      rules: [
        (
          kind: If,
          match: "if ( movelevelbystairs == TRUE ) {"
        )
      ]
    ),
    "*lockpick_val": (
      rules: [
        (
          kind: Assignment,
          match: "nannido = val"
        )
      ]
    ),
    "*lockpick": (
      rules: [
        (
          kind: StringLiteral,
          match: "楽勝だ。"
        )
      ]
    ),
    "*lockpick_WHILE1_CONTINUE": (
      after: "*lockpick"
    ),
    "*lockpick_WEND1": (
      after: "*lockpick_WHILE1_CONTINUE"
    ),
    "*act_open": (
      rules: [
        (
          kind: StringLiteral,
          match: "足枷を外した。"
        )
      ]
    ),
    "*act_open_SWEND1": (
      after: "*act_open"
    ),
    "*open_chest": (
      rules: [
        (
          kind: If,
          match: "if ( inv(INV_ITEM_ID, ri) == ITEM_ID_SAFE ) {"
        )
      ]
    ),
    "*open_newYear": (
      rules: [
        (
          kind: StringLiteral,
          match: "罠だ！お年玉袋は発火した。"
        )
      ]
    ),
    "*open_catbox": (
      rules: [
        (
          kind: StringLiteral,
          match: "猫が入っていた！"
        )
      ]
    ),
    "*act_openDoor": (
      rules: [
        (
          kind: StringLiteral,
          match: "は扉を開けた。"
        )
      ]
    ),
    "*act_close": (
      rules: [
        (
          kind: StringLiteral,
          match: "何を閉める？"
        )
      ]
    ),
    "*act_fire": (
      rules: [
        (
          kind: StringLiteral,
          match: "通常弾を装填した。"
        )
      ]
    ),
    "*act_melee": (
      rules: [
        (
          kind: If,
          match: "if ( cdata(CDATA_BARRIER, tc) ) {"
        )
      ]
    ),
    "*act_attack": (
      rules: [
        (
          kind: StringLiteral,
          match: "は怖気づいた。"
        )
      ]
    ),
    "*act_attackSub": (
      rules: [
        (
          kind: If,
          match: "if ( ammoproc == ENCHANT_AMMO_EXPLOSIVE ) {"
        )
      ]
    ),
    "*act_search": (
      rules: [
        (
          kind: StringLiteral,
          match: "周囲を注意深く調べた。"
        )
      ]
    ),
    "*revealTrap": (
      rules: [
        (
          kind: Function,
          match: "cell_featset refx, refy, tile_trap, -1, -1"
        )
      ]
    ),
    "*revealHiddenPath": (
      rules: [
        (
          kind: Assignment,
          match: "map(refx, refy, MAP_TILE_ID) = tile_tunnel"
        ),
        (
          kind: Function,
          match: "cell_featset refx, refy, 0, CELL_FEATURE_NONE"
        ),
        (
          kind: Function,
          match: "return"
        ),
      ]
    ),
    "*act_dig": (
      rules: [
        (
          kind: Assignment,
          match: "digx = tlocx"
        )
      ]
    ),
    "*act_dip": (
      rules: [
        (
          kind: StringLiteral,
          match: "You dip "
        )
      ]
    ),
    "*act_use": (
      rules: [
        (
          kind: StringLiteral,
          match: "act_use"
        )
      ]
    ),
    "*act_use_SWEND1": (
      after: "*act_use"
    ),
    "*gene_skill": (
      rules: [
        (
          kind: If,
          match: "if ( dbmax >= 2 ) {"
        )
      ]
    ),
    "*gene_body": (
      rules: [
        (
          kind: Assignment,
          match: "rtval = dblist(0, rnd(dbmax))"
        )
      ]
    ),
    "*item_seed": (
      rules: [
        (
          kind: StringLiteral,
          match: "You can't plant it here."
        )
      ]
    ),
    "*item_seedGrowth": (
      rules: [
        (
          kind: If,
          match: "if ( feat(FEAT_CELL_PARAM_1) \\ 50 == 0 ) {"
        )
      ]
    ),
    "*item_seedNextGrowth": (
      rules: [
        (
          kind: Assignment,
          match: "feat(FEAT_CELL_PARAM_1) += 50"
        )
      ]
    ),
    "*item_seedRegrowth": (
      rules: [
        (
          kind: StringLiteral,
          match: "新しい芽が息吹いている！"
        )
      ]
    ),
    // (
    //   name: "*item_seedRegrowth_custom",
    //   rules: [
    //     (
    //       kind: Function,
    //       match: "	p = 15"
    //     )
    //   ]
    // ),
    // (
    //   name: "*item_seedPick_custom",
    //   rules: [
    //     (
    //       kind: Function,
    //       match: "	skillexp SKILL_NORMAL_GARDENING, CHARA_PLAYER, 300"
    //     )
    //   ]
    // ),
    "*item_seedPick": (
      rules: [
        (
          kind: StringLiteral,
          match: "を収穫した。"
        )
      ]
    ),
    "*act_pickpocket": (
      rules: [
        (
          kind: Assignment,
          match: "gdata(GDATA_ROW_ACT) = ACTION_STEAL"
        ),
        (
          kind: Function,
          match: "return"
        )
      ]
    ),
    "*chat_refresh": (
      rules: [
        (
          kind: Function,
          match: "picload exedir + \"graphic\\\\face1.bmp\", 1"
        ),
        (
          kind: Function,
          match: "picload exedir + \"graphic\\\\ie_chat.bmp\""
        )
      ]
    ),
    "*chat": (
      rules: [
        (
          kind: StringLiteral,
          match: "は耳を貸さない。"
        )
      ]
    ),
    "*chat_scene": (
      after: "*chat"
    ),
    "*chat_event": (
      rules: [
        (
          kind: StringLiteral,
          match: "後になって後悔しても知らない"
        )
      ]
    ),
    "*chat_event_SWEND1": (
      after: "*chat_event"
    ),
    "*chat_unique": (
      rules: [
        (
          kind: StringLiteral,
          match: "So you've made it this far. Evidently, <Chaos> wants no poise even within their own creation...Nefia. Well, it seems they have left me no choice but to whip you!"
        )
      ]
    ),
    "*chat_unique_mizuki": (
      rules: [
        (
          kind: StringLiteral,
          match: "上記に沿って話す"
        )
      ]
    ),
    "*chat_unique_SWEND1": (
      rules: [
        (
          kind: StringLiteral,
          match: "…(あなたの言葉を聞いていない)"
        )
      ]
    ),
    "*chat_unique_leold_limb": (
      rules: [
        (
          kind: StringLiteral,
          match: "自分が試す"
        )
      ]
    ),
    // (
    //   name: "*com_change_gamemode",
    //   rules: [
    //     (
    //       kind: Function,
    //       match: "	pos 0, 0"
    //     )
    //   ]
    // ),
    "*com_change_gamemode_loop": (
      rules: [
        (
          kind: StringLiteral,
          match: "そっと目をそらす…"
        )
      ]
    ),
    "*com_change_gamemode_finish": (
      rules: [
        (
          kind: StringLiteral,
          match: "あはははははっ！本当に選んでしまったのですね…♪ようこそ、新しい宇宙へ。"
        )
      ]
    ),
    "*chat_unique_leold_maxspeed": (
      rules: [
        (
          kind: StringLiteral,
          match: "すまん。今の俺ではこれ以上鍛えることができないようだ。"
        )
      ]
    ),
    "*chat_unique_leold_lack_ap": (
      rules: [
        (
          kind: Function,
          match: "…こりゃもっとAP貯めないと無理だな。"
        )
      ]
    ),
    "*chat_unique_leold_done": (
      rules: [
        (
          kind: Assignment,
          match: "bitp = CHARA_BIT_AWAKE_INSULT"
        )
      ]
    ),
    "*chat_unique_leold_awaken": (
      rules: [
        (
          kind: StringLiteral,
          match: "スキルボーナス100獲得(消費AP1500)"
        )
      ]
    ),
    "*evochat_portrait": (
      rules: [
        (
          kind: StringLiteral,
          match: "(現在、立ち姿は決まっていない)"
        )
      ]
    ),
    "*sqMother_1": (
      rules: [
        (
          kind: Function,
          match: "(Hand her a potion of cure corruption.)"
        )
      ]
    ),
    "*chat_unique_lankata": (
      rules: [
        (
          kind: Function,
          match: "chara_vanquish findchara(CREATURE_ID_ALFRED_THE_CANGNAN_WIND)"
        )
      ]
    ),
    "*chat_evOpening": (
      rules: [
        (
          kind: Function,
          match: "itemcreate -1, ITEM_ID_BEGGARS_PENDANT, 28, 6, 0"
        )
      ]
    ),
    "*chat_evReached": (
      rules: [
        (
          kind: Function,
          match: "We made it! Thank you!"
        )
      ]
    ),
    "*chat_default": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_INTEREST, tc) -= rnd(30)"
        )
      ]
    ),
    "*chat_slave": (
      rules: [
        (
          kind: Function,
          match: "Okay. Let me check the stable..."
        )
      ]
    ),
    "*chat_quest": (
      rules: [
        (
          kind: Function,
          match: "Thanks. I'm counting on you."
        )
      ]
    ),
    "*chat_instaQuest": (
      rules: [
        (
          kind: If,
          match: "if ( qdata(QDATA_EXIST, rq) == QUEST_TYPE_HUNT | qdata(QDATA_EXIST, rq) == QUEST_TYPE_HUNTEX ) {"
        )
      ]
    ),
    "*chat_train": (
      rules: [
        (
          kind: Function,
          match: "訓練が必要なときは、声をかけて"
        )
      ]
    ),
    "*chat_invest": (
      rules: [
        (
          kind: Function,
          match: "投資をしてくれる"
        )
      ]
    ),
    "*chat_end": (
      rules: [
        (
          kind: Assignment,
          match: "questteleport = 0"
        ),
        (
          kind: Assignment,
          match: "hyouzyou = 0"
        ),
        (
          kind: Function,
          match: "return"
        ),
      ]
    ),
    "*chat_select": (
      after: "*chat_end"
    ),
    "*chat_select_WHILE1": (
      after: "*chat_select"
    ),
    "*chat_select_WEND1": (
      after: "*chat_select_WHILE1"
    ),
    "*chat_draw": (
      rules: [
        (
          kind: Assignment,
          match: "chatpicloaded = FALSE"
        )
      ]
    ),
    "*chat_draw2": (
      after: "*chat_draw"
    ),
    "*shop_init": (
      rules: [
        (
          kind: If,
          match: "if ( cdata(CDATA_ROLE, tc) == ROLE_SHOP_TRADE ) {"
        ),
        (
          kind: Assignment,
          match: "invfile = cdata(CDATA_ROLE_FILE_ID, tc)"
        ),
      ]
    ),
    "*shop": (
      rules: [
        (
          kind: Assignment,
          match: "shoptrade = 1"
        )
      ]
    ),
    "*shop_end": (
      rules: [
        (
          kind: Assignment,
          match: "file = \"shoptmp.s2\""
        ),
        (
          kind: Assignment,
          match: "fmode = 3"
        ),
        (
          kind: Assignment,
          match: "mode = MODELIST_MAIN"
        ),
        (
          kind: Function,
          match: "return"
        )
      ]
    ),
    "*shop_restock": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_ROLE_RESTOCK, tc) ="
        )
      ]
    ),
    "*item_quantity": (
      rules: [
        (
          kind: Assignment,
          match: "rtval = i / 200"
        )
      ]
    ),
    "*shop_tradePrice": (
      rules: [
        (
          kind: Assignment,
          match: "trate(cnt) = 100"
        )
      ]
    ),
    "*renew_economy": (
      rules: [
        (
          kind: Assignment,
          match: "gdata(GDATA_CAPITAL) = 15"
        )
      ]
    ),
    "*com_politics_chart": (
      rules: [
        (
          kind: Function,
          match: "picload exedir + \"graphic\\\\deco_politics.bmp\", 1"
        ),
        (
          kind: Assignment,
          match: "lv = 0"
        )
      ]
    ),
    "*com_politics_chart_loop": (
      rules: [
        (
          kind: Assignment,
          match: "s = lang(\"ポストチャート\", \"City Chart\"), strhint3b"
        )
      ]
    ),
    "*com_politics_economy": (
      rules: [
        (
          kind: Function,
          match: "picload exedir + \"graphic\\\\deco_politics.bmp\", 1"
        ),
        (
          kind: Assignment,
          match: "ww = 540"
        )
      ]
    ),
    "*com_politics_economy_loop": (
      rules: [
        (
          kind: Assignment,
          match: "mdata(MDATA_CITY_PROPERTY_VALUE) = 300"
        )
      ]
    ),
    "*com_politics_rule": (
      rules: [
        (
          kind: StringLiteral,
          match: "この街の消費税は"
        )
      ]
    ),
    "*skip_rule": (
      rules: [
        (
          kind: Function,
          match: "picload exedir + \"graphic\\\\deco_politics.bmp\", 1"
        ),
        (
          kind: Assignment,
          match: "ww = 480"
        )
      ]
    ),
    "*com_politics_rule_loop_pgchk": (
      after: "*skip_rule"
    ),
    "*com_politics_rule_loop": (
      rules: [
        (
          kind: Function,
          match: "display_topic lang(\"法律\", \"Law\"), wx + 65, wy + 45"
        )
      ]
    ),
    "*com_build": (
      rules: [
        (
          kind: Assignment,
          match: "city = adata(ADATA_ECONOMY, area)"
        )
      ]
    ),
    "*com_build_WHILE1": (
      after: "*com_build",
      loop_kind: While
    ),
    "*com_build_WHILE1_CONTINUE": (
      after: "*com_build_WHILE1",
      loop_kind: WhileContinue
    ),
    "*com_build_WEND1": (
      after: "*com_build_WHILE1_CONTINUE",
      loop_kind: WhileEnd
    ),
    "*com_select_building": (
      rules: [
        (
          kind: Function,
          match: "snd SOUNDLIST_CHAT"
        ),
        (
          kind: Assignment,
          match: "cc = CHARA_PLAYER"
        ),
        (
          kind: Function,
          match: "repeat 7"
        )
      ]
    ),
    "*com_select_building_loop": (
      rules: [
        (
          kind: StringLiteral,
          match: "どの設備を建設する？"
        )
      ]
    ),
    "*com_select_building_loop_WHILE1": (
      after: "*com_select_building_loop"
    ),
    "*com_select_building_loop_WHILE1_CONTINUE": (
      after: "*com_select_building_loop_WHILE1"
    ),
    "*draw_budget": (
      rules: [
        (
          kind: Function,
          match: "\"Budget:\""
        )
      ]
    ),
    "*raceID_fix": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_RACE_ID, r1) = DB_RACE_KOBOLT"
        )
      ]
    ),
    "*db_setFilterRace": (
      rules: [
        (
          kind: Function,
          match: "dim racebit, 10, 78"
        )
      ]
    ),
    "*db_race": (
      rules: [
        (
          kind: Assignment,
          match: "listn(1, listmax) = \"wasp\""
        )
      ]
    ),
    "*db_class": (
      rules: [
        (
          kind: Assignment,
          match: "listn(1, listmax) = \"warrior\""
        )
      ]
    ),
    "*db_creature": (
      rules: [
        (
          kind: If,
          match: "if ( dbmode != DBMODE_FIND )"
        ),
        (
          kind: Assignment,
          match: "dbsum = 0"
        ),
        (
          kind: Assignment,
          match: "dbmax = 0"
        ),
      ]
    ),
    "*db_creature2": (
      rules: [
        (
          kind: Function,
          match: "return \"\" + \"/nefia1/\""
        )
      ]
    ),
    "*db_setFilterCreature": (
      rules: [
        (
          kind: Assignment,
          match: "maxnpcid = MAX_CREATURE_ID"
        )
      ]
    ),
    "*randname_test": (
      rules: [
        (
          kind: Function,
          match: "randnameinit"
        )
      ]
    ),
    "*add_ally": (
      rules: [
        (
          kind: Assignment,
          match: "gdata(GDATA_ACTIVE_GOD_PETS)--"
        )
      ]
    ),
    "*adv_init": (
      after: "*add_ally"
    ),
    "*adv_generate": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_EXIST, rc) = CHAR_STATE_ADV"
        )
      ]
    ),
    "*adv_action": (
      rules: [
        (
          kind: Function,
          match: "cbitmod CHARA_BIT_HIRED, rc, FALSE"
        )
      ]
    ),
    "*chara_item": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_AI_ITEM, rc) = ci"
        )
      ]
    ),
    "*adv_gainItem": (
      rules: [
        (
          kind: Assignment,
          match: "f = 0"
        ),
        (
          kind: Function,
          match: "inv_getheader rc"
        ),
        (
          kind: Function,
          match: "repeat 10"
        ),
        (
          kind: If,
          match: "flttypemajor = fsetitem(rnd(length(fsetitem)))"
        )
      ]
    ),
    "*chara_adjustInv": (
      rules: [
        (
          kind: Assignment,
          match: "p = inv_getfreeid(tc)"
        ),
        (
          kind: Function,
          match: "repeat 100"
        )
      ]
    ),
    "*chara_equipFull": (
      rules: [
        (
          kind: If,
          match: "if ( inv(INV_ITEM_NUM, cnt) == 0 | inv(INV_ITEM_EQUIP, cnt) != 0 ) {"
        )
      ]
    ),
    "*chara_equip": (
      rules: [
        (
          kind: Assignment,
          match: "i = iequiploc(ci)"
        )
      ]
    ),
    "*supplyEquip": (
      rules: [
        (
          kind: Assignment,
          match: "haveweapon = FALSE"
        )
      ]
    ),
    "*client_update": (
      rules: [
        (
          kind: Assignment,
          match: "qdata(QDATA_MAP, i) = gdata(GDATA_AREA)"
        )
      ]
    ),
    "*quest_reward": (
      rules: [
        (
          kind: If,
          match: "if ( qdata(QDATA_TYPE, rq) == QUEST_SUBTYPE_SUPPLY | qdata(QDATA_TYPE, rq) == QUEST_SUBTYPE_DELIVER ) {"
        )
      ]
    ),
    "*quest_update": (
      rules: [
        (
          kind: Function,
          match: "repeat gdata(GDATA_CLIENT)"
        ),
        (
          kind: If,
          match: "if ( cdata(CDATA_RELATION_ORG, rc) != RELATION_NEUTRAL ) {"
        ),
        (
          kind: If,
          match: "if ( cdata(CDATA_ROLE, rc) == ROLE_SPECIAL ) {"
        ),
        (
          kind: Function,
          match: "gosub *quest_reward"
        )
      ]
    ),
    "*quest_create": (
      rules: [
        (
          kind: Assignment,
          match: "qdata(QDATA_TYPE, rq) = QUEST_TYPE_NONE"
        )
      ]
    ),
    "*quest_check": (
      rules: [
        (
          kind: Assignment,
          match: "qdata(QDATA_DEADLINE, rq)--"
        )
      ]
    ),
    "*quest_exit": (
      rules: [
        (
          kind: Assignment,
          match: "val = gdata(GDATA_QUEST)"
        )
      ]
    ),
    "*quest_death": (
      rules: [
        (
          kind: Function,
          match: "gosub *chara_respawn"
        ),
        (
          kind: Function,
          match: "skillexp SKILL_ATTR_CHA, CHARA_PLAYER, -500"
        )
      ]
    ),
    "*quest_fail": (
      rules: [
        (
          kind: StringLiteral,
          match: "あなたは敗北した。"
        )
      ]
    ),
    "*quest_petArenaWin": (
      rules: [
        (
          kind: If,
          match: "if ( petarenawin == 1 ) {"
        )
      ]
    ),
    "*quest_eliminate": (
      rules: [
        (
          kind: If,
          match: "if ( gdata(GDATA_QUEST) == QUEST_SUBTYPE_ELIMINATE ) {"
        )
      ]
    ),
    "*quest_success": (
      rules: [
        (
          kind: Assignment,
          match: "p = qdata(QDATA_REWARD, rq)"
        )
      ]
    ),
    "*scene": (
      rules: [
        (
          kind: Assignment,
          match: "scidx = instr(buff, 0, s)"
        )
      ]
    ),
    "*scene_loop": (
      rules: [
        (
          kind: Function,
          match: "noteload lang(\"scene1.hsp\", \"scene2.hsp\")"
        ),
        (
          kind: Assignment,
          match: "scidxtop = scidx"
        )
      ]
    ),
    "*scene_loop_WHILE1": (
      rules: [
        (
          kind: Function,
          match: "instr(buff, scidx, \"{\")"
        )
      ]
    ),
    "*scene_loop_WHILE1_CONTINUE": (
      rules: [
        (
          kind: Function,
          match: "goto *scene_loop_WHILE1"
        )
      ]
    ),
    "*scene_loop_WEND1": (
      rules: [
        (
          kind: Assignment,
          match: "buff = strmid(buff, scidxtop, scidx - scidxtop)"
        )
      ]
    ),
    "*scene_end": (
      rules: [
        (
          kind: Function,
          match: "gosub *screen_fadeOut"
        ),
        (
          kind: Assignment,
          match: "msgtempprev = \"\""
        ),
      ]
    ),
    "*ai_turn": (
      rules: [
        (
          kind: Assignment,
          match: "petarenawin = 1"
        )
      ]
    ),
    "*ai_item": (
      rules: [
        (
          kind: If,
          match: "if ( a == 52000 ) {"
        ),
        (
          kind: If,
          match: "if ( a == 53000 ) {"
        ),
      ]
    ),
    "*ai_action": (
      rules: [
        (
          kind: Assignment,
          match: "retreat = 0"
        )
      ]
    ),
    "*ai_calmMove": (
      rules: [
        (
          kind: If,
          match: "if ( cdatan(CDATAN_RACE, cc) == \"cat\" ) {"
        )
      ]
    ),
    "*ai_calmMove_WEND1": (
      rules: [
        (
          kind: Assignment,
          match: "tlocx = cdata(CDATA_X, gdata(GDATA_FLAG_GIANT_ID))"
        )
      ]
    ),
    "*ai_followMove": (
      rules: [
        (
          kind: StringLiteral,
          match: "\" displace\"",
          exact: true
        )
      ]
    ),
    "*ai_moveH": (
      rules: [
        (
          kind: Assignment,
          match: "dir = 2, 0, 3"
        )
      ]
    ),
    "*ai_moveV": (
      rules: [
        (
          kind: Assignment,
          match: "dir = 0, 1, 2"
        )
      ]
    ),
    "*ai_actMain": (
      rules: [
        (
          kind: Assignment,
          match: "pcattacker = cc"
        )
      ]
    ),
    "*com_quick": (
      rules: [
        (
          kind: Assignment,
          match: "page = quickpage"
        )
      ]
    ),
    "*com_quick_loop": (
      rules: [
        (
          kind: StringLiteral,
          match: "\"aaa\"",
          exact: true
        ),
      ]
    ),
    "*com_quick_loop_WHILE1": (
      rules: [
        (
          kind: Assignment,
          match: "x = 25, 50, 50, 100, 100, 100, 150, 150, 175"
        )
      ]
    ),
    "*com_quick_loop_WEND1": (
      rules: [
        (
          kind: Assignment,
          match: "quickpage = page"
        )
      ]
    ),
    "*elona_help": (
      rules: [
        (
          kind: Function,
          match: "noteload exedir + \"data\\\\exhelp.txt\""
        )
      ]
    ),
    "*convertHelp": (
      rules: [
        (
          kind: If,
          match: "if ( instr(s(cnt), 0, \"(\") == (-1) ) {"
        )
      ]
    ),
    "*com_help": (
      rules: [
        (
          kind: Function,
          match: "lang(\"manual_JP.txt\", \"manual_ENG.txt\")"
        )
      ]
    ),
    "*com_help_loop_pgchk": (
      after: "*com_help"
    ),
    "*com_help_loop": (
      rules: [
        (
          kind: StringLiteral,
          match: "Elona In-Game Help"
        )
      ]
    ),
    "*com_chatlog": (
      rules: [
        (
          kind: Function,
          match: "picload exedir + \"graphic\\\\ie_scroll.bmp\""
        ),
        (
          kind: StringLiteral,
          match: "何かキーを押すと閉じる"
        ),
        (
          kind: Assignment,
          match: "header = instr(netbuf, 0, \"<!--START-->\")"
        )
      ]
    ),
    "*com_chatlog_WHILE1": (
      after: "*com_chatlog"
    ),
    "*com_log": (
      rules: [
        (
          kind: Function,
          match: "snd SOUNDLIST_LOG"
        )
      ]
    ),
    "*com_log_WHILE1": (
      after: "*com_log"
    ),
    "*cfg_write": (
      rules: [
        (
          kind: Function,
          match: "notesave exedir + \"\\\\config.txt\""
        )
      ]
    ),
    "*config_init": (
      rules: [
        (
          kind: Function,
          match: "sdim key_buff, 4, 65"
        )
      ]
    ),
    "*config_loadCore": (
      rules: [
        (
          kind: StringLiteral,
          match: "infVerType."
        )
      ]
    ),
    "*config_load": (
      rules: [
        (
          kind: StringLiteral,
          match: "key_sCancel."
        )
      ]
    ),
    "*config_load_WHILE1": (
      rules: [
        (
          kind: Function,
          match: "gcopy BUFFER_BUF, 0, 0, 340, 100"
        )
      ]
    ),
    "*config_load_WEND1": (
      rules: [
        (
          kind: Assignment,
          match: "valn = \"language.\", \"\" + p"
        )
      ]
    ),
    "*dump_config": (
      rules: [
        (
          kind: Function,
          match: "noteload exedir + \"\\\\user\\\\export.txt\""
        )
      ]
    ),
    "*dump_config_import": (
      rules: [
        (
          kind: Assignment,
          match: "userrelation = int(s)"
        )
      ]
    ),
    "*com_config": (
      rules: [
        (
          kind: Assignment,
          match: "cfg_fullscreen2 = cfg_fullscreen"
        )
      ]
    ),
    "*com_config_loop": (
      rules: [
        (
          kind: Assignment,
          match: "key_quickinv = \"X\""
        ),
        (
          kind: Function,
          match: "redraw 0"
        )
      ]
    ),
    "*com_config_loop_WHILE1": (
      rules: [
        (
          kind: Function,
          match: "mes s(cfg_extrahelp)"
        )
      ]
    ),
    "*com_story": (
      rules: [
        (
          kind: Function,
          match: "\"Which scene do you want to replay?\")"
        )
      ]
    ),
    "*com_story_loop_pgchk": (
      after: "*com_story"
    ),
    "*com_story_loop": (
      rules: [
        (
          kind: Function,
          match: "mes \"Elona - Scene playback\""
        )
      ]
    ),
    "*com_story_loop_UNUSED": (
      rules: [
        (
          kind: If,
          match: "if ( idtresult == 5 ) {"
        )
      ]
    ),
    "*game_init": (
      rules: [
        (
          kind: If,
          match: "if ( dirinfo(4) == \"medit\" ) {"
        )
      ]
    ),
    "*world_init": (
      rules: [
        (
          kind: Function,
          match: "evadd EVENT_OPENING"
        )
      ]
    ),
    "*main_init": (
      rules: [
        (
          kind: Assignment,
          match: "evproc = 1"
        )
      ]
    ),
    "*spdSkip": (
      rules: [
        (
          kind: StringLiteral,
          match: "クエスト[残り"
        )
      ]
    ),
    "*weather_change": (
      rules: [
        (
          kind: If,
          match: "if ( gdata(GDATA_AREA) == AREA_NORTH_TYRIS & gdata(GDATA_WORLD_X) < 65 & gdata(GDATA_WORLD_Y) > 10 ) {"
        )
      ]
    ),
    "*advance_hour": (
      rules: [
        (
          kind: Assignment,
          match: "gdata(GDATA_NEXT_WEATHER)--"
        )
      ]
    ),
    "*game_main": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_SPEED_SUM, ct) -= mdata(MDATA_TIMESCALE)"
        )
      ]
    ),
    "*game_main_redo": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_TIME_SCALE, cc) = cdata(CDATA_SPEED_FIX, cc)"
        )
      ]
    ),
    "*game_main_redo_WHILE1": (
      rules: [
        (
          kind: Assignment,
          match: "gdata(GDATA_RETURN)--"
        )
      ]
    ),
    "*game_main_redo_WEND1": (
      rules: [
        (
          kind: Function,
          match: "modcorrupt 5"
        )
      ]
    ),
    "*turn_init": (
      rules: [
        (
          kind: If,
          match: "if ( cdata(CDATA_EXP, cc) >= cdata(CDATA_EXP_TO_NEXT_LVL, cc) ) {"
        )
      ]
    ),
    "*turn_end": (
      rules: [
        (
          kind: Assignment,
          match: "gdata(GDATA_TIME_STOP_TIME)--"
        )
      ]
    ),
    "*pc_turn_init": (
      rules: [
        (
          kind: Function,
          match: "dmghp CHARA_PLAYER, 999999, DAMAGE_FROM_CORRUPT"
        )
      ]
    ),
    "*pc_turn_init_WHILE1": (
      rules: [
        (
          kind: Assignment,
          match: "p = 16 - 1 - cnt"
        ),
      ]
    ),
    "*pc_turn_init_WHILE1_CONTINUE": (
      rules: [
        (
          kind: Function,
          match: "goto *pc_turn_init_WHILE1"
        )
      ]
    ),
    "*pc_turn_init_WEND1": (
      rules: [
        (
          kind: If,
          match: "if ( trait(TRAIT_ETHER_ADDICTED_POTION) != 0 ) {"
        )
      ]
    ),
    "*pc_turn": (
      rules: [
        (
          kind: If,
          match: "if ( firstturn == 1 ) {"
        )
      ]
    ),
    "*pcQuitY": (
      rules: [
        (
          kind: If,
          match: "if ( gdata(GDATA_QUIT_Y) != (-1) ) {"
        )
      ]
    ),
    "*game_win": (
      rules: [
        (
          kind: StringLiteral,
          match: "Unbelievable! You conquered Lesimas!"
        )
      ]
    ),
    "*game_win_WHILE1": (
      after: "*game_win"
    ),
    "*game_win_WEND1": (
      after: "*game_win_WHILE1"
    ),
    "*game_win2": (
      rules: [
        (
          kind: StringLiteral,
          match: "Unbelievable! You conquered Rehmido!"
        )
      ]
    ),
    "*game_win2_WHILE1": (
      after: "*game_win2"
    ),
    "*game_win2_WEND1": (
      after: "*game_win2_WHILE1"
    ),
    "*game_win3": (
      rules: [
        (
          kind: StringLiteral,
          match: "Unbelievable! You conquered God's prison!"
        )
      ]
    ),
    "*game_win3_WHILE1": (
      after: "*game_win3",
    ),
    "*game_win3_WEND1": (
      after: "*game_win3_WHILE1",
    ),
    "*pc_dead": (
      rules: [
        (
          kind: Function,
          match: "txt lang(\"遺言は？\", \"You leave a dying message.\")"
        )
      ]
    ),
    "*dead_draw": (
      rules: [
        (
          kind: Assignment,
          match: "s = \"New!\""
        )
      ]
    ),
    "*event": (
      rules: [
        (
          kind: StringLiteral,
          match: "無事に納入を終えた！"
        )
      ]
    ),
    "*event_SWEND1": (
      after: "*event"
    ),
  },
)
