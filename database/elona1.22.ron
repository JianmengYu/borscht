#![enable(implicit_some)]

AnalysisConfig(
  meta: (
    variant_name: "Elona",
    version: "1.22",
    ax_sha256: "7273270714a8a877512761880207d0014b0d22d69fb4d22b3e5c06396d6f23cc"
  ),

  variable_groups: {
    "food_type": (
      variables: [
        ( name: "FOOD_TYPE_NONE", value: 0 ),
        ( name: "FOOD_TYPE_MEAT", value: 1 ),
        ( name: "FOOD_TYPE_VEGETABLE", value: 2 ),
        ( name: "FOOD_TYPE_FRUIT", value: 3 ),
        ( name: "FOOD_TYPE_SWEET", value: 4 ),
        ( name: "FOOD_TYPE_PASTA", value: 5 ),
        ( name: "FOOD_TYPE_FISH", value: 6 ),
        ( name: "FOOD_TYPE_BREAD", value: 7 ),
        ( name: "FOOD_TYPE_EGG", value: 8 ),

        ( name: "MAX_FOOD_TYPE", value: 9 ),
      ],
    ),
    "random_dungeon_type": (
      variables: [
        ( name: "RANDOM_DUNGEON_STANDARD", value: 1 ),
        ( name: "RANDOM_DUNGEON_WIDE", value: 2 ),
        ( name: "RANDOM_DUNGEON_BIG_ROOM", value: 3 ),
        ( name: "RANDOM_DUNGEON_RESIDENT", value: 4 ),
        ( name: "RANDOM_DUNGEON_JAIL", value: 5 ),
        ( name: "RANDOM_DUNGEON_HUNT", value: 6 ),
        ( name: "RANDOM_DUNGEON_HARVEST_UNUSED", value: 7 ),
        ( name: "RANDOM_DUNGEON_LONG", value: 8 ),
        ( name: "RANDOM_DUNGEON_MAZE", value: 9 ),
        ( name: "RANDOM_DUNGEON_DOG", value: 10 ),
        ( name: "RANDOM_DUNGEON_PERFORM_UNUSED", value: 11 ),
      ]
    ),
    "gsel_buffer": (
      variables: [
        ( name: "BUFFER_SCREEN", value: 0 ),
        ( name: "BUFFER_ITEM", value: 1 ),
        ( name: "BUFFER_MAP", value: 2 ),
        ( name: "BUFFER_INF", value: 3 ),
        ( name: "BUFFER_BUF", value: 4 ),
        ( name: "BUFFER_CHR", value: 5 ),
        ( name: "BUFFER_MAP_S", value: 6 ),
        ( name: "BUFFER_PIC", value: 7 ),
        ( name: "BUFFER_LOG", value: 8 ),
        ( name: "BUFFER_PIC2", value: 9 ),
        ( name: "BUFFER_PCC", value: 10 ),
      ]
    ),
    "boolean": (
      variables: [
        ( name: "FALSEM", value: -1 ),
        ( name: "FALSE", value: 0 ),
        ( name: "TRUE", value: 1 ),
      ]
    ),
    "bdataref": (
      variables: [
        ( name: "BDATAREF_BUFF_TYPE", value: 0 ),
      ]
    ),
    "buff_type": (
      variables: [
        ( name: "BUFF_TYPE_BUFF", value: 1 ),
        ( name: "BUFF_TYPE_HEX", value: 2 ),
        ( name: "BUFF_TYPE_FOOD", value: 3 ),
      ]
    ),
    "buff_id": (
      variables: [
        ( name: "BUFF_NONE", value: 0 ),
        ( name: "BUFF_HOLY_SHIELD", value: 1 ),
        ( name: "BUFF_MIST_OF_SILENCE", value: 2 ),
        ( name: "BUFF_REGENERATION", value: 3 ),
        ( name: "BUFF_ATTRIBUTE_SHIELD", value: 4 ),
        ( name: "BUFF_SPEED", value: 5 ),
        ( name: "BUFF_SLOW", value: 6 ),
        ( name: "BUFF_HERO", value: 7 ),
        ( name: "BUFF_MIST_OF_FRAILNESS", value: 8 ),
        ( name: "BUFF_ELEMENT_SCAR", value: 9 ),
        ( name: "BUFF_HOLY_VEIL", value: 10 ),
        ( name: "BUFF_NIGHTMARE", value: 11 ),
        ( name: "BUFF_DIVINE_WISDOM", value: 12 ),
        ( name: "BUFF_PUNISHMENT", value: 13 ),
        ( name: "BUFF_LULWYS_TRICK", value: 14 ),
        ( name: "BUFF_INCOGNITO", value: 15 ),
        ( name: "BUFF_DEATH_WORD", value: 16 ),
        ( name: "BUFF_BOOST", value: 17 ),
        ( name: "BUFF_CONTINGENCY", value: 18 ),
        ( name: "BUFF_LUCK", value: 19 ),
        ( name: "BUFF_GROW_STRENGTH", value: 20 ),
        ( name: "BUFF_GROW_CONSTITUTION", value: 21 ),
        ( name: "BUFF_GROW_DEXTERITY", value: 22 ),
        ( name: "BUFF_GROW_PERCEPTION", value: 23 ),
        ( name: "BUFF_GROW_LEARNING", value: 24 ),
        ( name: "BUFF_GROW_WILL", value: 25 ),
        ( name: "BUFF_GROW_MAGIC", value: 26 ),
        ( name: "BUFF_GROW_CHARISMA", value: 27 ),
        ( name: "BUFF_GROW_SPEED", value: 28 ),
        ( name: "MAX_BUFF", value: 28, code_value: "BUFF_GROW_SPEED + 1" ),
      ]
    ),
    "mefsubref": (
      variables: [
        ( name: "MEFSUBREF_X", value: 0 ),
        ( name: "MEFSUBREF_Y", value: 1 ),
        ( name: "MEFSUBREF_TYPE", value: 2 ),
      ]
    ),
    "map_effect_type": (
      variables: [
        ( name: "MAP_EFFECT_TYPE_NONE", value: 0 ),
        ( name: "MAP_EFFECT_TYPE_FOOT", value: 1 ),
      ]
    ),
    "map_effect": (
      variables: [
        ( name: "MAP_EFFECT_NONE", value: 0 ),
        ( name: "MAP_EFFECT_RIPPLE", value: 1 ),
        ( name: "MAP_EFFECT_FOOT", value: 2 ),
        ( name: "MAP_EFFECT_SNOW", value: 3 ),
        ( name: "MAP_EFFECT_SPLASH", value: 4 ),
        ( name: "MAP_EFFECT_SPLASH2", value: 5 ),

        ( name: "MAX_MAP_EFFECT", value: "MAP_EFFECT_SPLASH2 + 1" ),
      ]
    ),
    "mef": (
      variables: [
        ( name: "MEF_TYPE", value: 0 ),
        ( name: "MEF_CHIP", value: 1 ),
        ( name: "MEF_X", value: 2 ),
        ( name: "MEF_Y", value: 3 ),
        ( name: "MEF_TURNS_REMAINING", value: 4 ),
        ( name: "MEF_POWER", value: 5 ),
        ( name: "MEF_SOURCE", value: 6 ),
        ( name: "MEF_ITEM_ID", value: 7 ),
        ( name: "MEF_ITEM_STATUS", value: 8 ),
      ]
    ),
    "mef_type": (
      variables: [
        ( name: "MEF_TYPE_NONE", value: 0 ),
        ( name: "MEF_TYPE_WEB", value: 1 ),
        ( name: "MEF_TYPE_MIST", value: 2 ),
        ( name: "MEF_TYPE_ACID", value: 3 ),
        ( name: "MEF_TYPE_ETHER", value: 4 ),
        ( name: "MEF_TYPE_FIRE", value: 5 ),
        ( name: "MEF_TYPE_POTION", value: 6 ),
        ( name: "MEF_TYPE_NUKE", value: 7 ),
      ]
    ),
    "cell_feature": (
      variables: [
        ( name: "CELL_FEATURE_NONE", value: 0 ),
        ( name: "CELL_FEATURE_UPSTAIRS", value: 10 ),
        ( name: "CELL_FEATURE_DOWNSTAIRS", value: 11 ),
        ( name: "CELL_FEATURE_TRAP", value: 14 ),
        ( name: "CELL_FEATURE_NEFIA", value: 15 ),
        ( name: "CELL_FEATURE_DOOR_OPENED", value: 20 ),
        ( name: "CELL_FEATURE_DOOR_CLOSED", value: 21 ),
        ( name: "CELL_FEATURE_HIDDEN_PATH", value: 22 ),
        ( name: "CELL_FEATURE_SAMPLING_SPOT_DETECTION", value: 24 ),
        ( name: "CELL_FEATURE_SAMPLING_SPOT_MINING", value: 25 ),
        ( name: "CELL_FEATURE_SAMPLING_SPOT_FISHING", value: 26 ),
        ( name: "CELL_FEATURE_SAMPLING_SPOT_GENE_ENGINEER", value: 27 ),
        ( name: "CELL_FEATURE_SAMPLING_SPOT_GARDENING", value: 28 ),
        ( name: "CELL_FEATURE_PLANTED_SEED", value: 29 ),
        ( name: "CELL_FEATURE_POT", value: 30 ),
        ( name: "CELL_FEATURE_SMALL_MEDAL", value: 32 ),
        ( name: "CELL_FEATURE_BUILDING", value: 34 ),
      ],
      ignore: [ -1 ]
    ),
    "cell_sub_feature": (
      variables: [
        ( name: "CELL_SUB_FEATURE_TRAP_IMPALEMENT", value: 0 ),
        ( name: "CELL_SUB_FEATURE_TRAP_POISON", value: 1 ),
        ( name: "CELL_SUB_FEATURE_TRAP_SLEEP", value: 2 ),
        ( name: "CELL_SUB_FEATURE_TRAP_TELEPORT", value: 3 ),
        ( name: "CELL_SUB_FEATURE_TRAP_BLIND", value: 4 ),
        ( name: "CELL_SUB_FEATURE_TRAP_CONFUSION", value: 5 ),
        ( name: "CELL_SUB_FEATURE_TRAP_PARALYZE", value: 6 ),
        ( name: "CELL_SUB_FEATURE_TRAP_QUEST_MINE", value: 7 ),
        ( name: "CELL_SUB_FEATURE_TRAP_BLADE_STRINGS", value: 8 ),
        ( name: "CELL_SUB_FEATURE_TRAP_QUEST_PITFALL", value: 9 ),
        ( name: "CELL_SUB_FEATURE_TRAP_QUEST_PITFALL2", value: 10 ),
        ( name: "CELL_SUB_FEATURE_TRAP_HOSTILE_BLADE_STRINGS", value: 20 ),
        ( name: "CELL_SUB_FEATURE_TRAP_PITFALL", value: 21 ),
        ( name: "CELL_SUB_FEATURE_TRAP_MINE", value: 22 ),
        ( name: "CELL_SUB_FEATURE_SEED_VEGETABLE", value: 36 ),
        ( name: "CELL_SUB_FEATURE_SEED_FRUIT", value: 37 ),
        ( name: "CELL_SUB_FEATURE_SEED_HERB", value: 38 ),
        ( name: "CELL_SUB_FEATURE_SEED_STRANGE", value: 39 ),
        ( name: "CELL_SUB_FEATURE_SEED_ARTIFACT", value: 40 ),
        ( name: "CELL_SUB_FEATURE_SEED_GEM", value: 41 ),
        ( name: "CELL_SUB_FEATURE_SEED_MAGIC", value: 42 ),

        ( name: "MAX_CELL_SUB_FEATURE", value: 45, code_value: "CELL_SUB_FEATURE_SEED_MAGIC + 3" ),
      ],
      ignore: [ -1 ]
    ),
    "lightdata": (
      variables: [
        ( name: "LIGHTDATA_PIC", value: 0 ),
        ( name: "LIGHTDATA_ANIM", value: 1 ),
        ( name: "LIGHTDATA_BRIGHT", value: 2 ),
        ( name: "LIGHTDATA_Y", value: 3 ),
        ( name: "LIGHTDATA_POWER", value: 4 ),
        ( name: "LIGHTDATA_FLICK", value: 5 ),
        ( name: "LIGHTDATA_TIME", value: 6 ),
      ]
    ),
    "light_type": (
      variables: [
        ( name: "LIGHT_TYPE_NONE", value: 0 ),
        ( name: "LIGHT_TYPE_TORCH", value: 1 ),
        ( name: "LIGHT_TYPE_TORCH_LAMP", value: 2 ),
        ( name: "LIGHT_TYPE_LAMP", value: 3 ),
        ( name: "LIGHT_TYPE_LANTERN", value: 4 ),
        ( name: "LIGHT_TYPE_TOWN_LIGHT", value: 5 ),
        ( name: "LIGHT_TYPE_STOVE", value: 6 ),
        ( name: "LIGHT_TYPE_CRYSTAL", value: 7 ),
        ( name: "LIGHT_TYPE_CRYSTAL_MIDDLE", value: 8 ),
        ( name: "LIGHT_TYPE_ITEM", value: 9 ),
        ( name: "LIGHT_TYPE_ITEM_MIDDLE", value: 10 ),
        ( name: "LIGHT_TYPE_TOWN", value: 11 ),
        ( name: "LIGHT_TYPE_CANDLE", value: 12 ),
        ( name: "LIGHT_TYPE_CANDLE_LOW", value: 13 ),
        ( name: "LIGHT_TYPE_PORT_LIGHT", value: 14 ),
        ( name: "LIGHT_TYPE_PORT_LIGHT_SNOW", value: 15 ),
        ( name: "LIGHT_TYPE_CRYSTAL_HIGH", value: 16 ),
        ( name: "LIGHT_TYPE_WINDOW", value: 17 ),
        ( name: "LIGHT_TYPE_GATE", value: 18 ),
        ( name: "LIGHT_TYPE_WINDOW_RED", value: 19 ),

        ( name: "MAX_LIGHT_TYPE", value: 20, code_value: "LIGHT_TYPE_WINDOW_RED + 1" ),
      ]
    ),
    "inv": (
      variables: [
        ( name: "INV_ITEM_NUM", value: 0, macro: "iNum" ),
        ( name: "INV_ITEM_VALUE", value: 1, macro: "iValue" ),
        ( name: "INV_ITEM_PIC", value: 2, macro: "iPic" ),
        ( name: "INV_ITEM_ID", value: 3, macro: "iID" ),
        ( name: "INV_ITEM_QUALITY", value: 4, macro: "iQuality" ),
        ( name: "INV_ITEM_X", value: 5, macro: "iX" ),
        ( name: "INV_ITEM_Y", value: 6, macro: "iY" ),
        ( name: "INV_ITEM_WEIGHT", value: 7, macro: "iWeight" ),
        ( name: "INV_ITEM_KNOWN", value: 8, macro: "iKnown" ),
        ( name: "INV_ITEM_CHARGE", value: 9, macro: "iCharge" ),
        ( name: "INV_ITEM_FILE", value: 9, macro: "iFile" ),
        ( name: "INV_ITEM_AMMO", value: 9, macro: "iAmmo" ),
        ( name: "INV_ITEM_NEXT_PERIOD", value: 9, macro: "iNextPeriod" ),
        ( name: "INV_ITEM_CLIENT", value: 9, macro: "iClient" ),
        ( name: "INV_ITEM_DICE1", value: 10, macro: "iDice1" ),
        ( name: "INV_ITEM_DICE2", value: 11, macro: "iDice2" ),
        ( name: "INV_ITEM_DAMAGE", value: 12, macro: "iDmg" ),
        ( name: "INV_ITEM_ATTACK", value: 13, macro: "iAtk" ),
        ( name: "INV_ITEM_DV", value: 14, macro: "iDV" ),
        ( name: "INV_ITEM_PV", value: 15, macro: "iPV" ),
        ( name: "INV_ITEM_SKILL_REF", value: 16, macro: "iSkillRef" ),
        ( name: "INV_ITEM_STATUS", value: 17, macro: "iStatus" ),
        ( name: "INV_ITEM_EQUIP", value: 18, macro: "iEquip" ),
        ( name: "INV_ITEM_EFFECT", value: 19, macro: "iEffect" ),
        ( name: "INV_ITEM_LEVEL", value: 20, macro: "iLevel" ),
        ( name: "INV_ITEM_PROPERTY", value: 21, macro: "iProperty" ),
        ( name: "INV_ITEM_COL", value: 22, macro: "iCol" ),
        ( name: "INV_ITEM_SUB_NAME", value: 23, macro: "iSubName" ),
        ( name: "INV_ITEM_MATERIAL", value: 24, macro: "iMaterial" ),
        ( name: "INV_ITEM_PARAM1", value: 25, primary: true, macro: "iParam1" ),
        ( name: "INV_ITEM_GOD", value: 25, macro: "iGod" ),
        ( name: "INV_ITEM_BOOK_ID", value: 25, macro: "iBookId" ),
        ( name: "INV_ITEM_GROWTH", value: 25, macro: "iGrowth" ),
        ( name: "INV_ITEM_PARAM2", value: 26, primary: true, macro: "iParam2" ),
        ( name: "INV_ITEM_EXP", value: 26, macro: "iExp" ),
        ( name: "INV_ITEM_PARAM3", value: 27, primary: true, macro: "iParam3" ),
        ( name: "INV_ITEM_ROT", value: 27, macro: "iRot" ),
        ( name: "INV_ITEM_INTERVAL", value: 27, macro: "iInterval" ),
        ( name: "INV_ITEM_PARAM4", value: 28, primary: true, macro: "iParam4" ),
        ( name: "INV_ITEM_FISHING_BAIT", value: 28, macro: "iPoleBite" ),
        ( name: "INV_ITEM_IDENTIFY_LEVEL", value: 29, macro: "iIdtLevel" ),
        ( name: "INV_ITEM_TURN", value: 30, macro: "iTurn" ),

        ( name: "STARTING_INV_ITEM_BIT", value: 35 ),
        ( name: "RANGE_INV_ITEM_BIT", value: 5, exclude: true ),

        ( name: "STARTING_INV_ITEM_ENCHANT", value: 40 ),
        ( name: "STARTING_INV_ITEM_ENCHANT_POWER", value: 41 ),
        ( name: "RANGE_INV_ITEM_ENCHANT", value: 15, exclude: true ),
        ( name: "RANGE_INV_ITEM_FIXED_ENCHANT", value: 10, exclude: true ),

        ( name: "INV_ITEM_MAX", value: 70 ),
      ]
    ),
    "invctrl": (
      variables: [
        ( name: "INVCTRL_INFO", value: 1 ),
        ( name: "INVCTRL_DROP", value: 2 ),
        ( name: "INVCTRL_GET", value: 3 ),
        ( name: "INVCTRL_EAT", value: 5 ),
        ( name: "INVCTRL_EQUIP", value: 6 ),
        ( name: "INVCTRL_READ", value: 7 ),
        ( name: "INVCTRL_DRINK", value: 8 ),
        ( name: "INVCTRL_ZAP", value: 9 ),
        ( name: "INVCTRL_GIVE", value: 10 ),
        ( name: "INVCTRL_SHOP_BUY", value: 11 ),
        ( name: "INVCTRL_SHOP_SELL", value: 12 ),
        ( name: "INVCTRL_IDENTIFY", value: 13 ),
        ( name: "INVCTRL_USE", value: 14 ),
        ( name: "INVCTRL_OPEN", value: 15 ),
        ( name: "INVCTRL_COOK", value: 16 ),
        ( name: "INVCTRL_DIP_SOURCE", value: 17 ),
        ( name: "INVCTRL_DIP", value: 18 ),
        ( name: "INVCTRL_OFFER", value: 19 ),
        ( name: "INVCTRL_TRADE_TARGET", value: 20 ),
        ( name: "INVCTRL_TRADE_OFFER", value: 21 ),
        ( name: "INVCTRL_INV_FILE_GET", value: 22 ),
        ( name: "INVCTRL_MATERIAL_ENCHANT", value: 23 ),
        ( name: "INVCTRL_PUT", value: 24 ),
        ( name: "INVCTRL_ALLYGET", value: 25 ),
        ( name: "INVCTRL_THROW", value: 26 ),
        ( name: "INVCTRL_PICKPOCKET", value: 27 ),
        ( name: "INVCTRL_METAL", value: 28 ),
        ( name: "INVCTRL_BOOK_RESERVE", value: 29 ),
        ( name: "INVCTRL_MARK_ITEM", value: 32 ),
      ],
      ignore: [ 0 ]
    ),
    "invctrl_get": (
      variables: [
        ( name: "INVCTRL_GET_SUB_DEFAULT", value: 0 ),
        ( name: "INVCTRL_GET_SUB_HEIR", value: 1 ),
        ( name: "INVCTRL_GET_SUB_CONTAINER", value: 3 ),
        ( name: "INVCTRL_GET_SUB_LITTLE_SISTER_REWARD", value: 4 ),
        ( name: "INVCTRL_GET_SUB_FOUR_DIMENSIONAL_POCKET", value: 5 ),
      ]
    ),
    "invctrl_material_enchant": (
      variables: [
        ( name: "INVCTRL_MATERIAL_ENCHANT_SUB_CHANGE_MATERIAL", value: 0 ),
        ( name: "INVCTRL_MATERIAL_ENCHANT_SUB_ENC_WEAPON", value: 1 ),
        ( name: "INVCTRL_MATERIAL_ENCHANT_SUB_ENC_ARMOR", value: 2 ),
        ( name: "INVCTRL_MATERIAL_ENCHANT_SUB_CHARGE", value: 3 ),
        ( name: "INVCTRL_MATERIAL_ENCHANT_SUB_CHANGE_ITEM", value: 4 ),
        ( name: "INVCTRL_MATERIAL_ENCHANT_SUB_ABSORB", value: 5 ),
        ( name: "INVCTRL_MATERIAL_ENCHANT_SUB_FLIGHT", value: 6 ),
        ( name: "INVCTRL_MATERIAL_ENCHANT_SUB_GAROKS_HAMMER", value: 7 ),
      ]
    ),
    "invctrl_put": (
      variables: [
        ( name: "INVCTRL_PUT_SUB_PAY", value: 0 ),
        ( name: "INVCTRL_PUT_SUB_CONTAINER", value: 3 ),
      ]
    ),
    "item_bit": (
      variables: [
        ( name: "ITEM_BIT_NONE", value: 0 ),
        ( name: "ITEM_BIT_ACIDPROOF", value: 1 ),
        ( name: "ITEM_BIT_FIREPROOF", value: 2 ),
        ( name: "ITEM_BIT_COLDPROOF", value: 3 ),
        ( name: "ITEM_BIT_CHARGE_ITEM", value: 4 ),
        ( name: "ITEM_BIT_PRECIOUS", value: 5 ),
        ( name: "ITEM_BIT_LOVE_BLEND", value: 6 ),
        ( name: "ITEM_BIT_PERIOD", value: 7 ),
        ( name: "ITEM_BIT_REMAKE", value: 8 ),
        ( name: "ITEM_BIT_STOLEN", value: 9 ),
        ( name: "ITEM_BIT_ALIVE", value: 10 ),
        ( name: "ITEM_BIT_DEST_ITEM", value: 11 ),
        ( name: "ITEM_BIT_DROP", value: 12 ),
        ( name: "ITEM_BIT_NO_DROP", value: 13 ),
        ( name: "ITEM_BIT_POISON_BLEND", value: 14 ),
        ( name: "ITEM_BIT_ULTIMATE", value: 15 ),
        ( name: "ITEM_BIT_GUEST_USE", value: 16 ),
        ( name: "ITEM_BIT_HANDMADE", value: 17 ),
        // ( name: "ITEM_BIT_HERBED_IN", value: 18 ),
        // ( name: "ITEM_BIT_ANTISEPTIC", value: 19 ),
        // ( name: "ITEM_BIT_HAZARD", value: 20 ),
      ]
    ),
    "item_file": (
      variables: [
        ( name: "ITEM_ROLE_FILE_NONE2", value: -1 ),
        ( name: "ITEM_ROLE_FILE_NONE", value: 0 ),
        ( name: "ITEM_ROLE_FILE_WANDER", value: 1 ),
        ( name: "ITEM_ROLE_FILE_TXT_ADV", value: 2 ),
        ( name: "ITEM_ROLE_FILE_HEIR_TRUNK", value: 3 ),
        ( name: "ITEM_ROLE_FILE_INCOME", value: 4 ),
        ( name: "ITEM_ROLE_FILE_SHOP_INCOME", value: 5 ),
        ( name: "ITEM_ROLE_FILE_FREEZER", value: 6 ),
        ( name: "ITEM_ROLE_FILE_COOLER_BOX", value: 7 ),
        ( name: "ITEM_ROLE_FILE_POCKET", value: 8 ),
        // ( name: "ITEM_ROLE_FILE_DD_CEMETERY_KEY", value: 9 ),
        // ( name: "ITEM_ROLE_FILE_POTION_RACK", value: 10 ),
        // ( name: "ITEM_ROLE_FILE_BREAD_DISPLAY", value: 11 ),
        // ( name: "ITEM_ROLE_FILE_BOOKSHELF", value: 12 ),
        ( name: "STARTING_ITEM_ROLE_FILE_SHELTER", value: 100 ),
      ]
    ),
    "item_property": (
      variables: [
        ( name: "PROP_INHERITED", value: -2 ),
        ( name: "PROP_NONE", value: 0 ),
        ( name: "PROP_NPC", value: 1 ),
        ( name: "PROP_SHOP", value: 2 ),
        ( name: "PROP_CONSTRUCT", value: 3 ),
        ( name: "PROP_QUEST", value: 4 ),
        ( name: "PROP_SPECIAL", value: 5 ),
      ]
    ),
    "item_known": (
      variables: [
        ( name: "ITEM_KNOWN_NONE", value: 0 ),
        ( name: "ITEM_KNOWN_NAME", value: 1 ),
        ( name: "ITEM_KNOWN_QUALITY", value: 2 ),
        ( name: "ITEM_KNOWN_FULL", value: 3 ),
        // ( name: "ITEM_KNOWN_NECRO", value: 10 ),
      ],
      ignore: [ 5 ]
    ),
    "item_status": (
      variables: [
        ( name: "ITEM_STATUS_DOOMED", value: -2 ),
        ( name: "ITEM_STATUS_CURSED", value: -1 ),
        ( name: "ITEM_STATUS_NORMAL", value: 0 ),
        ( name: "ITEM_STATUS_BLESSED", value: 1 ),
      ]
    ),
    "equip_weight_class": (
      variables: [
        ( name: "EQUIP_WEIGHT_CLASS_MEDIUM", value: 15000 ),
        ( name: "EQUIP_WEIGHT_CLASS_HEAVY", value: 35000 ),
      ],
      ignore: [ 0 ]
    ),
    "fix_quality": (
      variables: [
        ( name: "FIX_QUALITY_NONE", value: 0 ),
        ( name: "FIX_QUALITY_BAD", value: 1 ),
        ( name: "FIX_QUALITY_GOOD", value: 2 ),
        ( name: "FIX_QUALITY_GREAT", value: 3 ),
        ( name: "FIX_QUALITY_MIRACLE", value: 4 ),
        ( name: "FIX_QUALITY_GODLY", value: 5 ),
        ( name: "FIX_QUALITY_UNIQUE", value: 6 ),
      ]
    ),
    "item_material": (
      variables: [
        ( name: "ITEM_MATERIAL_SAND", value: 0 ),
        ( name: "ITEM_MATERIAL_LEATHER", value: 1 ),
        ( name: "ITEM_MATERIAL_SILK", value: 2 ),
        ( name: "ITEM_MATERIAL_CLOTH", value: 3 ),
        ( name: "ITEM_MATERIAL_SCALE", value: 4 ),
        ( name: "ITEM_MATERIAL_GLASS", value: 5 ),

        ( name: "ITEM_MATERIAL_MITHRIL", value: 7 ),
        ( name: "ITEM_MATERIAL_ETHER", value: 8 ),
        ( name: "ITEM_MATERIAL_STEEL", value: 9 ),
        ( name: "ITEM_MATERIAL_METAL", value: 10 ),
        ( name: "ITEM_MATERIAL_CRYSTAL", value: 11 ),
        ( name: "ITEM_MATERIAL_BRONZE", value: 12 ),
        ( name: "ITEM_MATERIAL_DIAMOND", value: 13 ),
        ( name: "ITEM_MATERIAL_SPIRIT", value: 14 ),
        ( name: "ITEM_MATERIAL_RUBYNUS", value: 15 ),
        ( name: "ITEM_MATERIAL_PAPER", value: 16 ),
        ( name: "ITEM_MATERIAL_DUSK", value: 17 ),
        ( name: "ITEM_MATERIAL_BONE", value: 18 ),
        ( name: "ITEM_MATERIAL_CHAIN", value: 19 ),
        ( name: "ITEM_MATERIAL_OBSIDIAN", value: 20 ),
        ( name: "ITEM_MATERIAL_MICA", value: 21 ),
        ( name: "ITEM_MATERIAL_PEARL", value: 22 ),
        ( name: "ITEM_MATERIAL_EMERALD", value: 23 ),
        ( name: "ITEM_MATERIAL_DRAGON", value: 24 ),
        ( name: "ITEM_MATERIAL_SILVER", value: 25 ),
        ( name: "ITEM_MATERIAL_PLATINUM", value: 26 ),
        ( name: "ITEM_MATERIAL_ZYLON", value: 27 ),
        ( name: "ITEM_MATERIAL_GRIFFON", value: 28 ),
        ( name: "ITEM_MATERIAL_TITANIUM", value: 29 ),
        ( name: "ITEM_MATERIAL_CHROME", value: 30 ),
        ( name: "ITEM_MATERIAL_ADAMANTIUM", value: 31 ),
        ( name: "ITEM_MATERIAL_GOLD", value: 32 ),
        ( name: "ITEM_MATERIAL_CORAL", value: 33 ),
        ( name: "ITEM_MATERIAL_IRON", value: 34 ),
        ( name: "ITEM_MATERIAL_RAW", value: 35 ),
        ( name: "ITEM_MATERIAL_PLANT_VEGETABLE", value: 36 ),
        ( name: "ITEM_MATERIAL_PLANT_FRUIT", value: 37 ),
        ( name: "ITEM_MATERIAL_PLANT_HERB", value: 38 ),
        ( name: "ITEM_MATERIAL_PLANT_UNKNOWN", value: 39 ),
        ( name: "ITEM_MATERIAL_PLANT_ARTIFACT", value: 40 ),
        ( name: "ITEM_MATERIAL_PLANT_GEM", value: 41 ),
        ( name: "ITEM_MATERIAL_PLANT_MAGIC", value: 42 ),
        ( name: "ITEM_MATERIAL_WOOD", value: 43 ),
        // ( name: "ITEM_MATERIAL_BAMBOO", value: 44 ),
        // ( name: "ITEM_MATERIAL_NANOMACHINE", value: 45 ),

        ( name: "ITEM_MATERIAL_MAX", value: 50 ),

        ( name: "ITEM_MATERIAL_TYPE_METAL", value: 1000 ),
        ( name: "ITEM_MATERIAL_TYPE_LEATHER", value: 1001 ),

        // ( name: "ITEM_MATERIAL_GROUP_MAX", value: 4 ),
        // ( name: "ITEM_MATERIAL_LEVEL_MAX", value: 5 ),
      ]
    ),
    "fishdata": (
      variables: [
        ( name: "FISHDATA_PIC", value: 0 ),
        ( name: "FISHDATA_LEVEL", value: 1 ),
        ( name: "FISHDATA_RARE", value: 2 ),
        ( name: "FISHDATA_POWER", value: 3 ),
        ( name: "FISHDATA_SPEED", value: 4 ),
        ( name: "FISHDATA_WEIGHT", value: 5 ),
        ( name: "FISHDATA_VALUE", value: 6 ),
        ( name: "FISHDATA_ID", value: 7 ),

        ( name: "MAX_FISH", value: 100 ),
      ]
    ),
    "fishdatan": (
      variables: [
        ( name: "FISHDATAN_NAME", value: 0 ),
      ]
    ),
    "material_id": (
      variables: [
        ( name: "MATERIAL_GARBAGE", value: 0 ),
        ( name: "MATERIAL_CASINO_CHIP", value: 1 ),
        ( name: "MATERIAL_CHARCOAL", value: 2 ),
        ( name: "MATERIAL_DRIFTWOOD", value: 3 ),
        ( name: "MATERIAL_BIRDS_FEATHER", value: 4 ),
        ( name: "MATERIAL_WATERDROP", value: 5 ),
        ( name: "MATERIAL_STICK", value: 6 ),
        ( name: "MATERIAL_MITHRIL_FRAGMENT", value: 7 ),
        ( name: "MATERIAL_ETHER_FRAGMENT", value: 8 ),
        ( name: "MATERIAL_IRON_FRAGMENT", value: 9 ),
        ( name: "MATERIAL_ANGELS_TEAR", value: 10 ),
        ( name: "MATERIAL_WITCHS_TEAR", value: 11 ),
        ( name: "MATERIAL_SEAWATER", value: 12 ),
        ( name: "MATERIAL_HOWLING_WEED", value: 13 ),
        ( name: "MATERIAL_RED_WEED", value: 14 ),
        ( name: "MATERIAL_BLUE_WEED", value: 15 ),
        ( name: "MATERIAL_CURSE_WEED", value: 16 ),
        ( name: "MATERIAL_HOLY_WEED", value: 17 ),
        ( name: "MATERIAL_RABBITS_TAIL", value: 18 ),
        ( name: "MATERIAL_TROLL_GENE", value: 19 ),
        ( name: "MATERIAL_SNOW", value: 20 ),
        ( name: "MATERIAL_FAIRY_DUST", value: 21 ),
        ( name: "MATERIAL_ELEMENT_FRAGMENT", value: 22 ),
        ( name: "MATERIAL_ELECTRICITY", value: 23 ),
        ( name: "MATERIAL_BLACK_MIST", value: 24 ),
        ( name: "MATERIAL_HOT_WATER", value: 25 ),
        ( name: "MATERIAL_FIRE_STONE", value: 26 ),
        ( name: "MATERIAL_ICE_STONE", value: 27 ),
        ( name: "MATERIAL_DISCHARGING_STONE", value: 28 ),
        ( name: "MATERIAL_SHINING_WEED", value: 29 ),
        ( name: "MATERIAL_MAGIC_MASS", value: 30 ),
        ( name: "MATERIAL_HUMAN_GENE", value: 31 ),
        ( name: "MATERIAL_WITCHS_EYE", value: 32 ),
        ( name: "MATERIAL_LEATHER", value: 33 ),
        ( name: "MATERIAL_SAP_OF_YAGGDRASIL", value: 34 ),
        ( name: "MATERIAL_MAGIC_PAPER", value: 35 ),
        ( name: "MATERIAL_MAGIC_INK", value: 36 ),
        ( name: "MATERIAL_CURVED_STICK", value: 37 ),
        ( name: "MATERIAL_YELLING_MADMAN", value: 38 ),
        ( name: "MATERIAL_BEARS_TAIL", value: 39 ),
        ( name: "MATERIAL_100_YEN_COIN", value: 40 ),
        ( name: "MATERIAL_500_YEN_COIN", value: 41 ),
        ( name: "MATERIAL_MEDICINAL_WEED", value: 42 ),
        ( name: "MATERIAL_PAPER", value: 43 ),
        ( name: "MATERIAL_GENERATOR", value: 44 ),
        ( name: "MATERIAL_CLOTH", value: 45 ),
        ( name: "MATERIAL_BRANCH", value: 46 ),
        ( name: "MATERIAL_THICK_WOOD", value: 47 ),
        ( name: "MATERIAL_PEBBLE", value: 48 ),
        ( name: "MATERIAL_MEMORY_FRAGMENT", value: 49 ),
        ( name: "MATERIAL_MAGIC_FRAGMENT", value: 50 ),
        ( name: "MATERIAL_CHAOS_STONE", value: 51 ),
        ( name: "MATERIAL_FINE_STONE", value: 52 ),
        ( name: "MATERIAL_VEIN", value: 53 ),
        ( name: "MATERIAL_ADHESIVE", value: 54 ),
        ( name: "MATERIAL_GOOD_PAPER", value: 55 ),
        ( name: "MATERIAL_DURABLE_CLOTH", value: 56 ),
        ( name: "MATERIAL_LOG", value: 57 ),
        ( name: "MATERIAL_WHITE_WEED", value: 58 ),

        ( name: "MAX_MATERIAL", value: "MATERIAL_WHITE_WEED" ),

        ( name: "MAX_MATERIAL_COUNT", value: 400 ),
      ],
      ignore: [ -1 ]
    ),
    "matref": (
      variables: [
        ( name: "MATREF_LEVEL", value: 0 ),
        ( name: "MATREF_RARITY", value: 1 ),
        ( name: "MATREF_PIC", value: 2 ),
      ]
    ),
    "mtref": (
      variables: [
        ( name: "MTREF_WEIGHT", value: 0 ),
        ( name: "MTREF_VALUE", value: 1 ),
        ( name: "MTREF_ATTACK", value: 2 ),
        ( name: "MTREF_DAMAGE", value: 3 ),
        ( name: "MTREF_DV", value: 4 ),
        ( name: "MTREF_PV", value: 5 ),
        ( name: "MTREF_DICE", value: 6 ),
        ( name: "MTREF_COL", value: 7 ),
      ]
    ),
    "mtenc": (
      variables: [
        ( name: "MTENC_ENCHANTMENT", value: 0 ),
        ( name: "MTENC_POWER", value: 1 ),
      ]
    ),
    "atx": (
      variables: [
        ( name: "ATX_RANDOM", value: 0 ),
        ( name: "ATX_DUNGEON", value: 1 ),
        ( name: "ATX_FOREST", value: 2 ),
        ( name: "ATX_FIELD", value: 3 ),
        ( name: "ATX_BUILDING", value: 4 ),
        ( name: "ATX_WATER", value: 5 ),
        ( name: "ATX_MINE", value: 6 ),
        ( name: "ATX_BUSH", value: 7 ),
        ( name: "ATX_REMAIN", value: 8 ),
        ( name: "ATX_DUNGEON1", value: 9 ),
        ( name: "ATX_FOREST1", value: 10 ),
        ( name: "ATX_FIELD1", value: 11 ),
        ( name: "ATX_BUILDING1", value: 12 ),
        ( name: "ATX_WATER1", value: 13 ),
        ( name: "ATX_MINE1", value: 14 ),
        ( name: "ATX_BUSH1", value: 15 ),
        ( name: "ATX_REMAIN1", value: 16 ),
        ( name: "ATX_GEN1", value: 17 ),
        ( name: "ATX_GLOBAL1", value: 18 ),
        ( name: "ATX_GENERAL1", value: 19 ),
      ]
    ),
    "atxid": (
      variables: [
        ( name: "ATXID_UNKNOWN", value: 0 ),
        ( name: "ATXID_ATX_ID", value: 1 ),
      ]
    ),
    "wield_style": (
      variables: [
        ( name: "STYLE_NONE", value: 0 ),
        ( name: "STYLE_SHIELD", value: 1 ),
        ( name: "STYLE_TWOHAND", value: 2 ),
        ( name: "STYLE_DUAL_WIELD", value: 4 ),
      ]
    ),
    "dbmode": (
      includes: [
        "dbmode_normal",
        "dbmode_flavor",
      ]
    ),
    "dbmode_normal": (
      variables: [
        ( name: "DBMODE_NONE", value: 0 ),
        ( name: "DBMODE_FIND", value: 1 ),
        ( name: "DBMODE_REF", value: 2 ),
        ( name: "DBMODE_SET", value: 3 ),
        ( name: "DBMODE_INITIAL_EQUIP", value: 4 ),
        ( name: "DBMODE_REF_EAT", value: 5 ),
        ( name: "DBMODE_REF_READ", value: 6 ),
        ( name: "DBMODE_REF_ZAP", value: 7 ),
        ( name: "DBMODE_REF_DRINK", value: 8 ),
        ( name: "DBMODE_REF_PLAYABLE", value: 9 ),
        ( name: "DBMODE_SET_STATS", value: 10 ),
        ( name: "DBMODE_REF_CM", value: 11 ),
        ( name: "DBMODE_ON_EAT", value: 12 ),
        ( name: "DBMODE_ON_READ", value: 13 ),
        ( name: "DBMODE_ON_ZAP", value: 14 ),
        ( name: "DBMODE_ON_DRINK", value: 15 ),
        ( name: "DBMODE_REF_SPEC", value: 16 ),
        ( name: "DBMODE_DESC", value: 17 ),
      ]
    ),
    "dbmode_flavor": (
      variables: [
        ( name: "DBMODE_FLAVOR_PASSIVE", value: 100 ),
        ( name: "DBMODE_FLAVOR_ANGERED", value: 101 ),
        ( name: "DBMODE_FLAVOR_DEATH", value: 102 ),
        ( name: "DBMODE_FLAVOR_KILL", value: 103 ),
        ( name: "DBMODE_FLAVOR_WELCOME", value: 104 ),
        ( name: "DBMODE_FLAVOR_DIALOG", value: 106 ),
      ]
    ),
    "dbspec": (
      includes: [
        "dbspec_item",
        "dbspec_chara",
      ]
    ),
    "dbspec_item": (
      variables: [
        ( name: "DBSPEC_CAN_READ", value: 2 ),
        ( name: "DBSPEC_CAN_ZAP", value: 3 ),
        ( name: "DBSPEC_CAN_DRINK", value: 4 ),
        ( name: "DBSPEC_TYPE", value: 5 ),
        ( name: "DBSPEC_OBJ_LEVEL", value: 7 ),
        ( name: "DBSPEC_RARE_LEVEL", value: 8 ),
        ( name: "DBSPEC_TYPE_MINOR", value: 9 ),
        ( name: "DBSPEC_CARGO", value: 10 ),
        ( name: "DBSPEC_CAN_USE", value: 11 ),
        ( name: "DBSPEC_OFFER", value: 12 ),
        ( name: "DBSPEC_PCC", value: 18 ),
        ( name: "DBSPEC_PARAM3_ORG", value: 19 ),
        ( name: "DBSPEC_VALUE_ORG", value: 20 ),
      ]
    ),
    "dbspec_chara": (
      variables: [
        ( name: "DBSPEC_CHARA_NONE", value: 1 ),
        ( name: "DBSPEC_CHARA_NAME_ORG", value: 2 ),
        ( name: "DBSPEC_CHARA_LOOT", value: 3 ),
        ( name: "DBSPEC_CLASS_EQUIP_TYPE", value: 4 ),
        ( name: "DBSPEC_CHARA_COL", value: 5 ),
        ( name: "DBSPEC_CHARA_RARE", value: 6 ),
        ( name: "DBSPEC_RACE_BLOOD", value: 7 ),
        ( name: "DBSPEC_CHARA_FILTER", value: 8 ),
        ( name: "DBSPEC_RACE_BREEDER", value: 9 ),
      ]
    ),
    "enchant_ammo": (
      variables: [
        ( name: "ENCHANT_AMMO_NONE", value: -1 ),
        ( name: "ENCHANT_AMMO_RAPID", value: 0 ),
        ( name: "ENCHANT_AMMO_EXPLOSIVE", value: 1 ),
        ( name: "ENCHANT_AMMO_PIERCING", value: 2 ),
        ( name: "ENCHANT_AMMO_MAGIC", value: 3 ),
        ( name: "ENCHANT_AMMO_TIME_STOP", value: 4 ),
        ( name: "ENCHANT_AMMO_BURST", value: 5 ),
        ( name: "ENCHANT_AMMO_MAX", value: 6 ),
      ]
    ),
    "enchant_id": (
      variables: [
        // ( name: "STARTING_ENCHANT_NORMAL", value: 20 ),
        // ( name: "MAX_ENCHANTMENT_LEVEL", value: 4 ),
        // ( name: "MAX_ECHHANTMENT_PROC", value: "27 + 1" ),

        // ( name: "MAX_ITEM_MATERIAL_ENCHANT", value: 8 ),

        ( name: "ENCHANT_NONE", value: 0 ),
        ( name: "ENCHANT_ATTRIBUTE", value: 1 ),
        ( name: "ENCHANT_RESISTANCE", value: 2 ),
        ( name: "ENCHANT_SKILL", value: 3 ),
        ( name: "ENCHANT_SPELL", value: 4 ),

        ( name: "ENCHANT_SUSTAIN", value: 6 ),
        ( name: "ENCHANT_ELEMENTAL_DMG", value: 7 ),
        ( name: "ENCHANT_PROC", value: 8 ),
        ( name: "ENCHANT_AMMO", value: 9 ),
        ( name: "ENCHANT_FOOD", value: 10 ),

        ( name: "ENCHANT_RANDOM_TELEPORT", value: 21 ),
        ( name: "ENCHANT_PREVENT_TELEPORT", value: 22 ),
        ( name: "ENCHANT_RES_BLIND", value: 23 ),
        ( name: "ENCHANT_RES_PARALYZE", value: 24 ),
        ( name: "ENCHANT_RES_CONFUSE", value: 25 ),
        ( name: "ENCHANT_RES_FEAR", value: 26 ),
        ( name: "ENCHANT_RES_SLEEP", value: 27 ),
        ( name: "ENCHANT_RES_POISON", value: 28 ),
        ( name: "ENCHANT_FAST_TRAVEL", value: 29 ),
        ( name: "ENCHANT_RES_ETHERWIND", value: 30 ),
        ( name: "ENCHANT_RES_WEATHER", value: 31 ),
        ( name: "ENCHANT_FLOAT", value: 32 ),
        ( name: "ENCHANT_RES_MUTATION", value: 33 ),
        ( name: "ENCHANT_ENHANCE_SPELL", value: 34 ),
        ( name: "ENCHANT_SEE_INVISIBLE", value: 35 ),
        ( name: "ENCHANT_ABSORB_STAMINA", value: 36 ),
        ( name: "ENCHANT_RAGNAROK", value: 37 ),
        ( name: "ENCHANT_ABSORB_MP", value: 38 ),
        ( name: "ENCHANT_PIERCING_CHANCE", value: 39 ),
        ( name: "ENCHANT_TIME_STOP", value: 40 ),
        ( name: "ENCHANT_RES_STEAL", value: 41 ),
        ( name: "ENCHANT_EAT_ROTTEN", value: 42 ),
        ( name: "ENCHANT_RES_CURSE", value: 43 ),
        ( name: "ENCHANT_CRIT_CHANCE", value: 44 ),
        ( name: "ENCHANT_SUCK_BLOOD", value: 45 ),
        ( name: "ENCHANT_DISTURB_GROWTH", value: 46 ),
        ( name: "ENCHANT_ATTRACT_MONSTER", value: 47 ),
        ( name: "ENCHANT_RES_PREGNANCY", value: 48 ),
        ( name: "ENCHANT_REWARD_QUALITY", value: 49 ),
        ( name: "ENCHANT_EXTRA_MELEE", value: 50 ),
        ( name: "ENCHANT_EXTRA_RANGED", value: 51 ),
        ( name: "ENCHANT_RES_PHYSICAL", value: 52 ),
        ( name: "ENCHANT_IMMUNE_DAMAGE", value: 53 ),
        ( name: "ENCHANT_REFLECT_DAMAGE", value: 54 ),
        ( name: "ENCHANT_CURE_BLEEDING", value: 55 ),
        ( name: "ENCHANT_GOD_SIGNALS", value: 56 ),
        ( name: "ENCHANT_BANE_DRAGON", value: 57 ),
        ( name: "ENCHANT_BANE_UNDEAD", value: 58 ),
        ( name: "ENCHANT_SHOW_RELIGION", value: 59 ),
        ( name: "ENCHANT_DRUNK_LISTENER", value: 60 ),
        ( name: "ENCHANT_GOD_BANE", value: 61 ),

        ( name: "MAX_ENCHANTMENT", value: 62, code_value: "ENCHANT_GOD_BANE + 1" ),
      ]
    ),
    "enchant_proc_id": (
      variables: [
        ( name: "ENCHANT_PROC_ELEMENT_SCAR", value: 0 ),
        ( name: "ENCHANT_PROC_DRAW_SHADOW", value: 1 ),
        ( name: "ENCHANT_PROC_NIGHTMARE", value: 2 ),
        ( name: "ENCHANT_PROC_RAGING_ROAR", value: 3 ),
        ( name: "ENCHANT_PROC_CHAOS_BALL", value: 4 ),
        ( name: "ENCHANT_PROC_LULWYS_TRICK", value: 5 ),
        ( name: "ENCHANT_PROC_DIMENSIONAL_MOVE", value: 6 ),
        ( name: "ENCHANT_PROC_FEATHER", value: 7 ),
        ( name: "ENCHANT_PROC_LIGHTNING_BREATH", value: 8 ),
        ( name: "ENCHANT_PROC_NERVE_BREATH", value: 9 ),
        ( name: "ENCHANT_PROC_NETHER_BREATH", value: 10 ),
        ( name: "ENCHANT_PROC_DIVINE_WISDOM", value: 11 ),
        ( name: "ENCHANT_PROC_HOLY_VEIL", value: 12 ),
        ( name: "ENCHANT_PROC_HERO", value: 13 ),
        ( name: "ENCHANT_PROC_SPEED", value: 14 ),
        ( name: "ENCHANT_PROC_REGENERATION", value: 15 ),
        ( name: "ENCHANT_PROC_HOLY_SHIELD", value: 16 ),
        ( name: "ENCHANT_PROC_MIST_OF_SILENCE", value: 17 ),
        ( name: "ENCHANT_PROC_WEB", value: 18 ),
        ( name: "ENCHANT_PROC_LIGHTNING_BOLT", value: 19 ),
        ( name: "ENCHANT_PROC_DARKNESS_BOLT", value: 20 ),
        ( name: "ENCHANT_PROC_MIND_BOLT", value: 21 ),
        ( name: "ENCHANT_PROC_ICE_BOLT", value: 22 ),
        ( name: "ENCHANT_PROC_HEALING_RAIN", value: 23 ),
        ( name: "ENCHANT_PROC_GRENADE", value: 24 ),
        ( name: "ENCHANT_PROC_DECAPITATION", value: 25 ),
        // ( name: "ENCHANT_PROC_GRAVITY_SPHERE", value: 26 ),
        // ( name: "ENCHANT_PROC_SHINING_WAVE", value: 27 ),

        // ( name: "MAX_ENCHANT_PROC", value: "ENCHANT_PROC_DECAPITATION + 1" ),
        ( name: "MAX_ENCHANT_PROC", value: "ENCHANT_PROC_DECAPITATION + 1" ),
      ]
    ),
    "encref": (
      variables: [
        ( name: "ENCREF_GENERATE_CHANCE", value: 0 ),
        ( name: "ENCREF_VALUE", value: 1 ),
        ( name: "ENCREF_RARITY", value: 2 ),
        ( name: "ENCREF_FILTER_1", value: 3 ),
        ( name: "ENCREF_FILTER_2", value: 4 ),
        ( name: "ENCREF_FILTER_3", value: 5 ),
      ]
    ),
    "encammoref": (
      variables: [
        ( name: "ENCAMMOREF_POWER_MODIFIER", value: 0 ),
        ( name: "ENCAMMOREF_POWER_ADD", value: 1 ),
        ( name: "ENCAMMOREF_SP_COST", value: 2 ),
      ]
    ),
    "encprocref": (
      variables: [
        ( name: "ENCPROCREF_SKILL_ID", value: 0 ),
        ( name: "ENCPROCREF_TARGET_TYPE", value: 1 ),
        ( name: "ENCPROCREF_RARITY", value: 2 ),
        ( name: "ENCPROCREF_FILTER_1", value: 3 ),
        ( name: "ENCPROCREF_FILTER_2", value: 4 ),
        ( name: "ENCPROCREF_PROC_CHANCE", value: 5 ),
      ]
    ),
    "equip_type": (
      variables: [
        ( name: "EQUIP_TYPE_NOTHING", value: 0 ),
        ( name: "EQUIP_TYPE_WARRIOR", value: 1 ),
        ( name: "EQUIP_TYPE_MAGE", value: 2 ),
        ( name: "EQUIP_TYPE_ARCHER", value: 3 ),
        ( name: "EQUIP_TYPE_GUNNER", value: 4 ),
        ( name: "EQUIP_TYPE_WARMAGE", value: 5 ),
        ( name: "EQUIP_TYPE_PRIEST", value: 6 ),
        ( name: "EQUIP_TYPE_THIEF", value: 7 ),
        ( name: "EQUIP_TYPE_CLAYMORE", value: 8 ),
      ]
    ),
    "loot_type": (
      variables: [
        ( name: "LOOT_TYPE_NONE", value: 0 ),
        ( name: "LOOT_TYPE_ANIMAL", value: 1 ),
        ( name: "LOOT_TYPE_INSECT", value: 2 ),
        ( name: "LOOT_TYPE_HUMANOID", value: 3 ),
        ( name: "LOOT_TYPE_DRAKE", value: 4 ),
        ( name: "LOOT_TYPE_DRAGON", value: 5 ),
        ( name: "LOOT_TYPE_LICH", value: 6 ),
      ]
    ),
    "ext": (
      variables: [
        ( name: "EXT_EQUIP_SLOTS", value: 10000 ),
        ( name: "EXT_FOOD", value: 1000 ),
        ( name: "EXT_SDATAREF", value: 1000 ),
        ( name: "EXT_ENCHANTMENT", value: 10000 ),
        ( name: "EXT_ENCHANTMENT_AMMO", value: 1000 ),
        ( name: "EXT_TARGET_TYPE", value: 1000 ),
        ( name: "EXT_RECIPES", value: 100000 ),
        ( name: "EXT_RPACTION", value: 10000 ),
        ( name: "EXT_RF", value: 9000 ),
        ( name: "EXT_RP", value: 400 ),
        ( name: "EXT_FLT", value: 10000 ),
      ]
    ),
    "rpdata": (
      variables: [
        ( name: "STARTING_RPID", value: 200 ),

        ( name: "RPDATA_ITEM", value: 0 ),
        ( name: "RPDATA_TIME", value: 1 ),
        ( name: "RPDATA_TYPE", value: 2 ),
        ( name: "RPDATA_SOURCE", value: 5 ),
        ( name: "RPDATA_SKILL", value: 10 ),
        ( name: "RPDATA_SKILL_REQ", value: 11 ),
        ( name: "RPDATA_MAT", value: 20 ),
        ( name: "RPDATA_EQ", value: 30 ),
        ( name: "RPDATA_MAT_EXT", value: 40 ),
        ( name: "RPDATA_ENC", value: 50 ),
        ( name: "RPDATA_ENC_POW", value: 51 ),
      ]
    ),
    "rpdatan": (
      variables: [
        ( name: "RPDATAN_NAME", value: 0 ),
      ]
    ),
    "rfnameorg": (
      variables: [
        ( name: "RFNAMEORG_ID", value: 0 ),
        ( name: "RFNAMEORG_NAME", value: 1 ),
      ]
    ),
    "rf_id": (
      variables: [
        ( name: "EXT_RF", value: 9000 ),

        ( name: "RF_FLAVOR", value: 9001, code_value: "EXT_RF + 1" ),
        ( name: "RF_ORE", value: 9002, code_value: "EXT_RF + 2" ),
        ( name: "RF_WOOD", value: 9003, code_value: "EXT_RF + 3" ),
        ( name: "RF_ANY", value: 9004, code_value: "EXT_RF + 4" ),
        ( name: "RF_FISH", value: 9005, code_value: "EXT_RF + 5" ),
        ( name: "RF_EVITEM", value: 9006, code_value: "EXT_RF + 6" ),
        ( name: "RF_HERB", value: 9007, code_value: "EXT_RF + 7" ),
        ( name: "RF_SEED", value: 9008, code_value: "EXT_RF + 8" ),
        ( name: "RF_VEGE", value: 9009, code_value: "EXT_RF + 9" ),
        ( name: "RF_DIARY", value: 9010, code_value: "EXT_RF + 10" ),
        ( name: "RF_POISON", value: 9011, code_value: "EXT_RF + 11" ),
        ( name: "RF_FRUIT", value: 9012, code_value: "EXT_RF + 12" ),
        ( name: "RF_BREAD", value: 9013, code_value: "EXT_RF + 13" ),
        ( name: "RF_ALE", value: 9014, code_value: "EXT_RF + 14" ),
        ( name: "RF_MAGI", value: 9015, code_value: "EXT_RF + 15" ),
        ( name: "RF_MAKENN", value: 9016, code_value: "EXT_RF + 16" ),
        ( name: "RF_FLOWER", value: 9017, code_value: "EXT_RF + 17" ),
        ( name: "RF_BONE", value: 9018, code_value: "EXT_RF + 18" ),
        ( name: "RF_METAL", value: 9019, code_value: "EXT_RF + 19" ),
        ( name: "RF_SOFT", value: 9020, code_value: "EXT_RF + 20" ),
        ( name: "RF_SHARP", value: 9021, code_value: "EXT_RF + 21" ),
        ( name: "RF_COFFIN", value: 9022, code_value: "EXT_RF + 22" ),
        ( name: "RF_BAIT", value: 9023, code_value: "EXT_RF + 23" ),
        ( name: "RF_BARREL", value: 9024, code_value: "EXT_RF + 24" ),
        ( name: "RF_LEAF", value: 9025, code_value: "EXT_RF + 25" ),
        ( name: "RF_DISINFECTANT", value: 9026, code_value: "EXT_RF + 26" ),

        ( name: "MAX_RF", value: 9027, code_value: "RF_DISINFECTANT + 1" ),
      ]
    ),
    "recipe_ingredient": (
      includes: [
        "rf_id",
        "item_id",
        "filter"
      ]
    ),
    "rp_action": (
      variables: [
        ( name: "RPACTION_LOVE", value: "EXT_RPACTION" ),
        ( name: "RPACTION_DYE", value: "EXT_RPACTION + 1" ),
        ( name: "RPACTION_POISON", value: "EXT_RPACTION + 2" ),
        ( name: "RPACTION_FIRE_PROOF", value: "EXT_RPACTION + 3" ),
        ( name: "RPACTION_ACID_PROOF", value: "EXT_RPACTION + 4" ),
        ( name: "RPACTION_BAIT", value: "EXT_RPACTION + 5" ),
        ( name: "RPACTION_BLESS", value: "EXT_RPACTION + 6" ),
        ( name: "RPACTION_WELL", value: "EXT_RPACTION + 7" ),
        ( name: "RPACTION_WELL_DRAW", value: "EXT_RPACTION + 8" ),
        ( name: "RPACTION_FUSION", value: "EXT_RPACTION + 9" ),
      ]
    ),
    "recipe_blend": (
      variables: [
        ( name: "STARTING_RECIPE_BLEND_ACTION", value: 10000 ),
      ]
    ),
    "item_or_recipe_blend_id": (
      includes: [
        "item_id",
        "recipe_blend"
      ]
    ),
    "equip_slot": (
      variables: [
        ( name: "EQUIP_SLOT_NONE", value: 0 ),
        ( name: "EQUIP_SLOT_HEAD", value: 1 ),
        ( name: "EQUIP_SLOT_NECK", value: 2 ),
        ( name: "EQUIP_SLOT_BACK", value: 3 ),
        ( name: "EQUIP_SLOT_BODY", value: 4 ),
        ( name: "EQUIP_SLOT_HAND", value: 5 ),
        ( name: "EQUIP_SLOT_RING", value: 6 ),
        ( name: "EQUIP_SLOT_ARM", value: 7 ),
        ( name: "EQUIP_SLOT_WAIST", value: 8 ),
        ( name: "EQUIP_SLOT_LEG", value: 9 ),
        ( name: "EQUIP_SLOT_SHOOT", value: 10 ),
        ( name: "EQUIP_SLOT_AMMO", value: 11 ),

        ( name: "MAX_EQUIP_SLOT", value: "EQUIP_SLOT_AMMO" ),

        ( name: "MAX_EQUIP_SLOT_TOTAL", value: 30 ),
      ]
    ),
    "recipe_blend": (
      variables: [
        ( name: "RECIPE_BLEND_ACTION_HERBED_FOOD", value: 10000, code_value: "STARTING_RECIPE_BLEND_ACTION" ),
        ( name: "RECIPE_BLEND_ACTION_ANOTHER_HEART", value: 10001 ),
        ( name: "RECIPE_BLEND_ACTION_COFFIN", value: 10002 ),
        ( name: "RECIPE_BLEND_ACTION_FIRE_FROOF", value: 10003 ),
        ( name: "RECIPE_BLEND_ACTION_ACID_PROOF", value: 10004 ),
        ( name: "RECIPE_BLEND_ACTION_BAIT", value: 10005 ),
        ( name: "RECIPE_BLEND_ACTION_BLESS", value: 10006 ),
        ( name: "RECIPE_BLEND_ACTION_WELL", value: 10007 ),
        ( name: "RECIPE_BLEND_ACTION_WELL_DRAW", value: 10008 ),
        ( name: "RECIPE_BLEND_ACTION_UNUSED", value: 10009 ),
      ]
    ),
    "filter_race": (
      variables: [
        ( name: "FILTER_NOTHING", value: 0 ),

        ( name: "FILTER_RACE_GOBLIN", value: 1 ),
        ( name: "FILTER_RACE_ORC", value: 2 ),
        ( name: "FILTER_RACE_SLIME", value: 3 ),
        ( name: "FILTER_RACE_ELEA", value: 4 ),
        ( name: "FILTER_RACE_KOBOLT", value: 5 ),
        ( name: "FILTER_RACE_SPIDER", value: 6 ),
        ( name: "FILTER_RACE_YEEK", value: 7 ),
        ( name: "FILTER_RACE_MERCENARY", value: 8 ),
        ( name: "FILTER_RACE_ZOMBIE", value: 9 ),
        ( name: "FILTER_RACE_DOG", value: 10 ),
        ( name: "FILTER_RACE_BEAR", value: 11 ),
        ( name: "FILTER_RACE_KAMIKAZE", value: 12 ),
        ( name: "FILTER_RACE_MUMMY", value: 13 ),
        ( name: "FILTER_RACE_HOUND_FIRE", value: 14 ),
        ( name: "FILTER_RACE_HOUND_ICE", value: 15 ),
        ( name: "FILTER_RACE_HOUND_LIGHTNING", value: 16 ),
        ( name: "FILTER_RACE_HOUND_DARKNESS", value: 17 ),
        ( name: "FILTER_RACE_HOUND_MIND", value: 18 ),
        ( name: "FILTER_RACE_HOUND_NERVE", value: 19 ),
        ( name: "FILTER_RACE_HOUND_POISON", value: 20 ),
        ( name: "FILTER_RACE_HOUND_SOUND", value: 21 ),
        ( name: "FILTER_RACE_HOUND_NETHER", value: 22 ),
        ( name: "FILTER_RACE_HOUND_CHAOS", value: 23 ),
        // ( name: "FILTER_RACE_RAT", value: 24 ),
        // ( name: "FILTER_RACE_WASP", value: 25 ),
        // ( name: "FILTER_RACE_ROCK", value: 26 ),
        // ( name: "FILTER_RACE_ELEA2", value: 27 ),
        // ( name: "FILTER_RACE_KOBOLT2", value: 28 ),
        // ( name: "FILTER_RACE_KOBOLT3", value: 29 ),
        // ( name: "FILTER_RACE_SPIDER2", value: 30 ),
        // ( name: "FILTER_RACE_CAT", value: 31 ),
        // ( name: "FILTER_RACE_YERLES", value: 32 ),
        // ( name: "FILTER_RACE_MACHINE", value: 33 ),
        // ( name: "FILTER_RACE_NORLAND", value: 34 ),
        // ( name: "FILTER_RACE_BAT", value: 35 ),
        // ( name: "FILTER_RACE_BAT2", value: 36 ),
        // ( name: "FILTER_RACE_SHEEP", value: 37 ),
        // ( name: "FILTER_RACE_BIRD", value: 38 ),
        // ( name: "FILTER_RACE_WASP2", value: 39 ),
        // ( name: "FILTER_RACE_DOG2", value: 40 ),
        // ( name: "FILTER_RACE_SPIDER3", value: 41 ),
        // ( name: "FILTER_RACE_GHOST", value: 42 ),
        // ( name: "FILTER_RACE_RAT2", value: 43 ),
        // ( name: "FILTER_RACE_SHELL", value: 44 ),
        // ( name: "FILTER_RACE_BEETLE", value: 45 ),
        // ( name: "FILTER_RACE_BEETLE2", value: 46 ),
        // ( name: "FILTER_RACE_KOBOLT4", value: 47 ),
      ]
    ),
    "filter_item": (
      variables: [
        ( name: "FILTER_NOTHING", value: 0 ),

        ( name: "FILTER_WEAPON", value: 10000 ),
        ( name: "FILTER_WEAPON_HEAVY_SWORD", value: 10001 ),
        ( name: "FILTER_WEAPON_LONGSWORD", value: 10002 ),
        ( name: "FILTER_WEAPON_SHORTSWORD", value: 10003 ),
        ( name: "FILTER_WEAPON_CLUB", value: 10004 ),
        ( name: "FILTER_WEAPON_HAMMER", value: 10005 ),
        ( name: "FILTER_WEAPON_STAVE", value: 10006 ),
        ( name: "FILTER_WEAPON_POLEARM", value: 10007 ),
        ( name: "FILTER_WEAPON_HEAVY_POLEARM", value: 10008 ),
        ( name: "FILTER_WEAPON_SMALL_AXE", value: 10009 ),
        ( name: "FILTER_WEAPON_LARGE_AXE", value: 10010 ),
        ( name: "FILTER_WEAPON_SICKLE", value: 10011 ),

        ( name: "FILTER_HELM", value: 12000 ),
        ( name: "FILTER_HELM_HEAVY", value: 12001 ),
        ( name: "FILTER_HELM_LIGHT", value: 12002 ),
        ( name: "FILTER_HELM_MEDIUM", value: 12003 ),

        ( name: "FILTER_SHIELD", value: 14000 ),
        ( name: "FILTER_SHIELD_LARGE", value: 14001 ),
        ( name: "FILTER_SHIELD_MEDIUM", value: 14002 ),
        ( name: "FILTER_SHIELD_SMALL", value: 14003 ),

        ( name: "FILTER_ARMOR", value: 16000 ),
        ( name: "FILTER_ARMOR_HEAVY", value: 16001 ),
        ( name: "FILTER_ARMOR_MEDIUM", value: 16002 ),
        ( name: "FILTER_ARMOR_LIGHT", value: 16003 ),

        ( name: "FILTER_BOOTS", value: 18000 ),
        ( name: "FILTER_BOOTS_HEAVY", value: 18001 ),
        ( name: "FILTER_BOOTS_LIGHT", value: 18002 ),
        ( name: "FILTER_BOOTS_MEDIUM", value: 18003 ),

        ( name: "FILTER_GIRDLE", value: 19000 ),
        ( name: "FILTER_GIRDLE_MEDIUM", value: 19001 ),

        ( name: "FILTER_CLOAK", value: 20000 ),
        ( name: "FILTER_CLOAK_MEDIUM", value: 20001 ),

        ( name: "FILTER_GLOVES", value: 22000 ),
        ( name: "FILTER_GLOVES_HEAVY", value: 22001 ),
        ( name: "FILTER_GLOVES_MEDIUM", value: 22002 ),
        ( name: "FILTER_GLOVES_LIGHT", value: 22003 ),

        ( name: "FILTER_RANGE", value: 24000 ),
        ( name: "FILTER_RANGE_SHORTBOW", value: 24001 ),
        ( name: "FILTER_RANGE_CROSSBOW", value: 24003 ),
        ( name: "FILTER_RANGE_PISTOL", value: 24020 ),
        ( name: "FILTER_RANGE_LASER", value: 24021 ),
        ( name: "FILTER_RANGE_ROCK_THROW", value: 24030 ),

        ( name: "FILTER_AMMO", value: 25000 ),
        ( name: "FILTER_AMMO_ARROW", value: 25001 ),
        ( name: "FILTER_AMMO_BOLT", value: 25002 ),
        ( name: "FILTER_AMMO_BULLET", value: 25020 ),
        ( name: "FILTER_AMMO_ENERGY", value: 25030 ),

        ( name: "FILTER_ACCESSORY", value: 30000 ),
        ( name: "FILTER_ACCESSORY_RING", value: 32000 ),
        ( name: "FILTER_ACCESSORY_SMALL_RING", value: 32001 ),
        ( name: "FILTER_ACCESSORY_AMULET", value: 34000 ),
        ( name: "FILTER_ACCESSORY_SMALL_AMULET", value: 34001 ),

        ( name: "FILTER_ITEM_MIN", value: 50000 ),

        ( name: "FILTER_ITEM_POTION", value: 52000 ),
        ( name: "FILTER_ITEM_POTION_HEAL", value: 52001 ),
        ( name: "FILTER_ITEM_POTION_ALE", value: 52002 ),

        ( name: "FILTER_ITEM_SCROLL", value: 53000 ),
        ( name: "FILTER_ITEM_DEED", value: 53100 ),

        ( name: "FILTER_ITEM_SPELLBOOK", value: 54000 ),
        ( name: "FILTER_ITEM_BOOK", value: 55000 ),
        ( name: "FILTER_ITEM_RECIPE", value: 55500 ),

        ( name: "FILTER_ITEM_ROD", value: 56000 ),
        ( name: "FILTER_ITEM_ROD_HEALING", value: 56001 ),
        ( name: "FILTER_ITEM_ROD_DAMAGE", value: 56002 ),
        ( name: "FILTER_ITEM_ROD_UTILITY", value: 56003 ),
        ( name: "FILTER_ITEM_ROD_ENVIRONMENTAL", value: 56004 ),

        ( name: "FILTER_ITEM_FOOD", value: 57000 ),
        ( name: "FILTER_ITEM_FOOD_BREAD", value: 57001 ),
        ( name: "FILTER_ITEM_FOOD_PASTA", value: 57002 ),
        ( name: "FILTER_ITEM_FOOD_VEGETABLE", value: 57003 ),
        ( name: "FILTER_ITEM_FOOD_FRUIT", value: 57004 ),

        ( name: "FILTER_ITEM_LIQUID", value: 58000 ),
        ( name: "FILTER_ITEM_FOOD_HERB", value: 58005 ),
        ( name: "FILTER_ITEM_SEED", value: 58500 ),

        ( name: "FILTER_ITEM_TOOL", value: 59000 ),
        ( name: "FILTER_ITEM_TOOL_BLEND", value: 59500 ),

        ( name: "FILTER_FURNITURE", value: 60000 ),
        ( name: "FILTER_FURNITURE_WELL", value: 60001 ),
        ( name: "FILTER_FURNITURE_ALTAR", value: 60002 ),
        ( name: "FILTER_FURNITURE_USABLE", value: 60003 ),
        ( name: "FILTER_FURNITURE_BED", value: 60004 ),
        ( name: "FILTER_FURNITURE_INSTRUMENT", value: 60005 ),

        ( name: "FILTER_REMAINS", value: 62000 ),

        ( name: "FILTER_JUNK", value: 64000 ),
        ( name: "FILTER_JUNK_TOWN", value: 64100 ),

        ( name: "FILTER_GOLD", value: 68000 ),
        ( name: "FILTER_PLATINUM", value: 69000 ),

        ( name: "FILTER_CONTAINER", value: 72000 ),

        ( name: "FILTER_ROCK", value: 75000 ),

        ( name: "FILTER_ORE", value: 77000 ),
        ( name: "FILTER_ORE_GEM", value: 77001 ),

        ( name: "FILTER_ENVIRONMENT", value: 80000 ),

        ( name: "FILTER_CARGO", value: 90000 ),
        ( name: "FILTER_CARGO_FOOD", value: 91000 ),
        ( name: "FILTER_CARGO_TRADE", value: 92000 ),

        ( name: "FILTER_NONE", value: 99999 ),
        ( name: "FILTER_NONE2", value: 99999999 ),
      ]
    ),
    "filter": (
      includes: [
        "filter_item",
        "filter_race",
      ]
    ),
    "filter_item_or_item_id": (
      includes: [
        "filter_item",
        "item_id",
      ]
    ),
    "race_id": (
      variables: [
        ( name: "DB_RACE_KOBOLT", value: 1 ),
        ( name: "DB_RACE_ORC", value: 2 ),
        ( name: "DB_RACE_LARGE_ANIMAL", value: 3 ),
        ( name: "DB_RACE_LIZARDMAN", value: 4 ),
        ( name: "DB_RACE_MINOTAUR", value: 5 ),
        ( name: "DB_RACE_YERLES", value: 6 ),
        ( name: "DB_RACE_NORLAND", value: 7 ),
        ( name: "DB_RACE_EULDERNA", value: 8 ),
        ( name: "DB_RACE_FAIRY", value: 9 ),
        ( name: "DB_RACE_ASURA", value: 10 ),
        ( name: "DB_RACE_SLIME", value: 11 ),
        ( name: "DB_RACE_DOG_GOD", value: 12 ),
        ( name: "DB_RACE_DWARF", value: 13 ),
        ( name: "DB_RACE_JUERE", value: 14 ),
        ( name: "DB_RACE_ZOMBIE", value: 15 ),
        ( name: "DB_RACE_ELEA", value: 16 ),
        ( name: "DB_RACE_RABBIT", value: 17 ),
        ( name: "DB_RACE_SHEEP", value: 18 ),
        ( name: "DB_RACE_FROG", value: 19 ),
        ( name: "DB_RACE_WORM", value: 20 ),
        ( name: "DB_RACE_SNAIL", value: 21 ),
        ( name: "DB_RACE_MANDRAKE", value: 22 ),
        ( name: "DB_RACE_BEETLE", value: 23 ),
        ( name: "DB_RACE_MUSHROOM", value: 24 ),
        ( name: "DB_RACE_BAT", value: 25 ),
        ( name: "DB_RACE_ENT", value: 26 ),
        ( name: "DB_RACE_LICH", value: 27 ),
        ( name: "DB_RACE_BACTERIA", value: 28 ),
        ( name: "DB_RACE_GHOST", value: 29 ),
        ( name: "DB_RACE_SPIRIT", value: 30 ),
        ( name: "DB_RACE_EYE", value: 31 ),
        ( name: "DB_RACE_MAZIN", value: 32 ),
        ( name: "DB_RACE_WASP", value: 33 ),
        ( name: "DB_RACE_GIANT", value: 34 ),
        ( name: "DB_RACE_IMP", value: 35 ),
        ( name: "DB_RACE_HAND", value: 36 ),
        ( name: "DB_RACE_SNAKE", value: 37 ),
        ( name: "DB_RACE_DRAKE", value: 38 ),
        ( name: "DB_RACE_GOBLIN", value: 39 ),
        ( name: "DB_RACE_BEAR", value: 40 ),
        ( name: "DB_RACE_ARMOR", value: 41 ),
        ( name: "DB_RACE_MEDUSA", value: 42 ),
        ( name: "DB_RACE_CUPID", value: 43 ),
        ( name: "DB_RACE_KARUNE", value: 44 ),
        ( name: "DB_RACE_HARPY", value: 45 ),
        ( name: "DB_RACE_DRAGON", value: 46 ),
        ( name: "DB_RACE_DINOSAUR", value: 47 ),
        ( name: "DB_RACE_BEAST", value: 48 ),
        ( name: "DB_RACE_SPIDER", value: 49 ),
        ( name: "DB_RACE_GOLEM", value: 50 ),
        ( name: "DB_RACE_ROCK", value: 51 ),
        ( name: "DB_RACE_ZANAN", value: 52 ),
        ( name: "DB_RACE_SKELETON", value: 53 ),
        ( name: "DB_RACE_PIECE", value: 54 ),
        ( name: "DB_RACE_CAT", value: 55 ),
        ( name: "DB_RACE_DOG", value: 56 ),
        ( name: "DB_RACE_RORAN", value: 57 ),
        ( name: "DB_RACE_RAT", value: 58 ),
        ( name: "DB_RACE_SHELL", value: 59 ),
        ( name: "DB_RACE_CAT_GOD", value: 60 ),
        ( name: "DB_RACE_MACHINE_GOD", value: 61 ),
        ( name: "DB_RACE_UNDEAD_GOD", value: 62 ),
        ( name: "DB_RACE_MACHINE", value: 63 ),
        ( name: "DB_RACE_WISP", value: 64 ),
        ( name: "DB_RACE_BIRD", value: 65 ),
        ( name: "DB_RACE_SEA_MONSTER", value: 66 ),
        ( name: "DB_RACE_CAT_SISTER", value: 67 ),
        ( name: "DB_RACE_MUTANT", value: 68 ),
        ( name: "DB_RACE_YEEK", value: 69 ),
        ( name: "DB_RACE_YITH", value: 70 ),
        ( name: "DB_RACE_SERVANT", value: 71 ),
        ( name: "DB_RACE_HORSE", value: 72 ),
        ( name: "DB_RACE_GOD", value: 73 ),
        ( name: "DB_RACE_QUICKLING", value: 74 ),
        ( name: "DB_RACE_METAL", value: 75 ),
        ( name: "DB_RACE_BEHICLE", value: 76 ),
      ],
      ignore: [ 0 ]
    ),
    "animation_id": (
      variables: [
        ( name: "ANIMATION_BOLT", value: 0 ),
        ( name: "ANIMATION_ARROW", value: 1 ),
        ( name: "ANIMATION_BALL", value: 2 ),
        ( name: "ANIMATION_BREATH", value: 3 ),
        ( name: "ANIMATION_TAIL", value: 4 ),
        ( name: "ANIMATION_HEAL", value: 5 ),
        ( name: "ANIMATION_CURSE", value: 6 ),
        ( name: "ANIMATION_OFFER", value: 7 ),
        ( name: "ANIMATION_FIZZLE", value: 8 ),
        ( name: "ANIMATION_ATTACK", value: 9 ),
        ( name: "ANIMATION_BLOOD", value: 10 ),
        ( name: "ANIMATION_HEAL_FAST", value: 11 ),
        ( name: "ANIMATION_NORMAL_ATTACK", value: 12 ),
        ( name: "ANIMATION_THUNDER", value: 13 ),
        ( name: "ANIMATION_CRUSH", value: 14 ),
        ( name: "ANIMATION_THROW", value: 15 ),
        ( name: "ANIMATION_SAND", value: 16 ),
        ( name: "ANIMATION_BALL_NUKE", value: 17 ),
        ( name: "ANIMATION_SPORE", value: 18 ),
        ( name: "ANIMATION_HOLY", value: 19 ),
        ( name: "ANIMATION_GENE", value: 20 ),
        ( name: "ANIMATION_RAGNA", value: 21 ),
        ( name: "ANIMATION_METEOR", value: 22 ),

        ( name: "ANIMATION_UNUSED1", value: 108 ),
        ( name: "ANIMATION_UNUSED2", value: 109 ),
        ( name: "ANIMATION_UNUSED3", value: 110 ),
        ( name: "ANIMATION_UNUSED4", value: 111 ),
      ]
    ),
    "mode": (
      variables: [
        ( name: "MODELIST_MAIN", value: 0 ),
        ( name: "MODELIST_CHARA_CREATION", value: 1 ),
        ( name: "MODELIST_NEW", value: 2 ),
        ( name: "MODELIST_CONTINUE", value: 3 ),
        ( name: "MODELIST_QUICK_START", value: 4 ),
        ( name: "MODELIST_NORMAL_START", value: 5 ),
        ( name: "MODELIST_SHOP", value: 6 ),
        ( name: "MODELIST_EVENT", value: 7 ),
        ( name: "MODELIST_QUEST_CHAT", value: 8 ),
        ( name: "MODELIST_TXT_ADV", value: 9 ),
        ( name: "MODELIST_TITLE", value: 10 ),
        ( name: "MODELIST_MAP", value: 11 ),
        ( name: "MODELIST_RP", value: 12 ),
      ]
    ),
    "encounter": (
      variables: [
        ( name: "ENCOUNTER_NONE", value: 0 ),
        ( name: "ENCOUNTER_ENEMY", value: 1 ),
        ( name: "ENCOUNTER_MERCHANT", value: 2 ),
        ( name: "ENCOUNTER_ASSASSIN", value: 3 ),
        ( name: "ENCOUNTER_ROGUE", value: 4 ),
        // ( name: "ENCOUNTER_CHESTNUT_GIANT", value: 5 ),
      ]
    ),
    "random_event": (
      variables: [
        ( name: "RANDOM_EVENT_LUCKY", value: 1 ),
        ( name: "RANDOM_EVENT_DREAM_MAGIC", value: 2 ),
        ( name: "RANDOM_EVENT_DREAM_GROWTH", value: 3 ),
        ( name: "RANDOM_EVENT_DREAM_LOSE_RES", value: 4 ),
        ( name: "RANDOM_EVENT_DREAM_CURSE", value: 5 ),
        ( name: "RANDOM_EVENT_DREAM_REGEN_HP", value: 6 ),
        ( name: "RANDOM_EVENT_DREAM_REGEN_MP", value: 7 ),
        ( name: "RANDOM_EVENT_THIEF", value: 8 ),
        ( name: "RANDOM_EVENT_GAIN_PLATINUM", value: 9 ),
        ( name: "RANDOM_EVENT_REMAINS_CAMP", value: 10 ),
        ( name: "RANDOM_EVENT_REMAINS_ADV", value: 11 ),
        ( name: "RANDOM_EVENT_GAIN_MATERIAL", value: 12 ),
        ( name: "RANDOM_EVENT_HUNGRY", value: 13 ),
        ( name: "RANDOM_EVENT_BLOATED", value: 14 ),
        ( name: "RANDOM_EVENT_MURDER", value: 15 ),
        ( name: "RANDOM_EVENT_GAIN_GOLD", value: 16 ),
        ( name: "RANDOM_EVENT_PRIEST", value: 17 ),
        ( name: "RANDOM_EVENT_FAITH", value: 18 ),
        ( name: "RANDOM_EVENT_DREAM_TREASURE", value: 19 ),
        ( name: "RANDOM_EVENT_DREAM_LUCKY", value: 20 ),
        ( name: "RANDOM_EVENT_DREAM_EHEKATL", value: 21 ),
        ( name: "RANDOM_EVENT_DREAM_MUTATION", value: 22 ),
        ( name: "RANDOM_EVENT_DREAM_MATERIAL", value: 23 ),
        ( name: "RANDOM_EVENT_DREAM_POTENTIAL", value: 24 ),
      ]
    ),
    "event": (
      variables: [
        ( name: "EVENT_NONE", value: 0 ),
        ( name: "EVENT_WIN_LESIMAS", value: 1 ),
        ( name: "EVENT_OPENING", value: 2 ),
        ( name: "EVENT_BOSS_LESIMAS", value: 3 ),
        ( name: "EVENT_BOSS_RANDOM", value: 4 ),
        ( name: "EVENT_WIN_BOSS_RANDOM", value: 5 ),
        ( name: "EVENT_DEAD", value: 6 ),
        ( name: "EVENT_VERNIS_SPEECH", value: 7 ),
        ( name: "EVENT_QUEST_ELEMINATE", value: 8 ),
        ( name: "EVENT_QUEST_FAIL", value: 9 ),
        ( name: "EVENT_QUEST_CHECK", value: 10 ),
        ( name: "EVENT_SHOP_WANDER", value: 11 ),
        ( name: "EVENT_FIRST_ALLY", value: 12 ),
        ( name: "EVENT_MARRY", value: 13 ),
        ( name: "EVENT_QUEST_TIMEOUT", value: 14 ),
        ( name: "EVENT_CLIENT_DEAD", value: 15 ),
        ( name: "EVENT_CLIENT_REACHED", value: 16 ),
        ( name: "EVENT_WELCOME", value: 17 ),
        ( name: "EVENT_RAGNAROK", value: 18 ),
        ( name: "EVENT_SHOW_HOUSE", value: 19 ),
        ( name: "EVENT_KILL_MOTHER", value: 20 ),
        ( name: "EVENT_NUKE", value: 21 ),
        ( name: "EVENT_GUILD", value: 22 ),
        ( name: "EVENT_ROGUE", value: 23 ),
        ( name: "EVENT_INIT_ECONOMY", value: 24 ),
        ( name: "EVENT_VISITOR", value: 25 ),
        ( name: "EVENT_SLEEP_AMBUSH", value: 26 ),
        ( name: "EVENT_LITTLE_SISTER", value: 27 ),
        ( name: "EVENT_GOD_INSIDE_EHEKATL", value: 28 ),
        ( name: "EVENT_GOD_INSIDE_RAND_BOSS_2", value: 29 ),
        ( name: "EVENT_GOD_INSIDE_MY_EYES", value: 30 ),
      ]
    ),
    "map_type": (
      variables: [
        ( name: "MAP_TYPE_WORLD", value: 1 ),
        ( name: "MAP_TYPE_VILLAGE", value: 2 ),
        ( name: "MAP_TYPE_TOWN", value: 3 ),
        ( name: "MAP_TYPE_LOCAL", value: 4 ),
        ( name: "MAP_TYPE_HOME", value: 5 ),
        ( name: "MAP_TYPE_FIELD", value: 6 ),
        ( name: "MAP_TYPE_QUEST", value: 7 ),

        ( name: "MAP_TYPE_DUNGEON_MIN", value: 20 ),
        ( name: "MAP_TYPE_DUNGEON_RANGE", value: 4 ),

        ( name: "MAP_TYPE_DUNGEON", value: 20 ),
        ( name: "MAP_TYPE_TOWER", value: 21 ),
        ( name: "MAP_TYPE_FOREST", value: 22 ),
        ( name: "MAP_TYPE_FORT", value: 23 ),

        ( name: "MAP_TYPE_DUNGEON_MAX", value: 23, code_value: "MAP_TYPE_DUNGEON_MIN + MAP_TYPE_DUNGEON_RANGE" ),
      ]
    ),
    "map_field": (
      variables: [
        ( name: "MAP_FIELD_INDOOR", value: 1 ),
        ( name: "MAP_FIELD_OUTDOOR", value: 2 ),
      ]
    ),
    "map_start": (
      variables: [
        ( name: "MAP_START_UPSTAIRS", value: 1 ),
        ( name: "MAP_START_DOWNSTAIRS", value: 2 ),
        ( name: "MAP_START_EDGE", value: 3 ),
        ( name: "MAP_START_CENTER", value: 4 ),
        ( name: "MAP_START_RANDOM", value: 5 ),
        ( name: "MAP_START_WORLD", value: 6 ),
        ( name: "MAP_START_SPEC", value: 7 ),
        ( name: "MAP_START_BOTTOM", value: 8 ),
      ]
    ),
    "map_exit": (
      variables: [
        ( name: "MAP_EXIT_TELEPORT", value: 2 ),
        ( name: "MAP_EXIT_DEAD", value: 3 ),
        ( name: "MAP_EXIT_NORMAL", value: 4 ),
        ( name: "MAP_EXIT_NONE", value: 5 ),
      ]
    ),
    "feat": (
      variables: [
        ( name: "FEAT_CELL_PIC", value: 0 ),
        ( name: "FEAT_CELL_FEATURE_ID", value: 1 ),
        ( name: "FEAT_CELL_SUB_FEATURE_ID", value: 2 ),
        ( name: "FEAT_CELL_PARAM_1", value: 3 ),
        ( name: "FEAT_CELL_PARAM_2", value: 4 ),
      ]
    ),
    "feat_object": (
      variables: [
        ( name: "OBJECT_UPSTAIRS", value: 10 ),
        ( name: "OBJECT_DOWNSTAIRS", value: 11 ),
        ( name: "OBJECT_DOWNLOCKED", value: 12 ),
        ( name: "OBJECT_TRAP", value: 14 ),
        ( name: "OBJECT_AREA", value: 15 ),
        ( name: "OBJECT_DOOR_OPEN", value: 20 ),
        ( name: "OBJECT_DOOR_CLOSED", value: 21 ),
        ( name: "OBJECT_HIDDEN_PATH", value: 22 ),
        ( name: "OBJECT_BOARD", value: 23 ),
        ( name: "OBJECT_RE", value: 24 ),
        ( name: "OBJECT_RE_MINE", value: 25 ),
        ( name: "OBJECT_RE_SPRING", value: 26 ),
        ( name: "OBJECT_RE_REMAIN", value: 27 ),
        ( name: "OBJECT_RE_BUSH", value: 28 ),
        ( name: "OBJECT_PLANT", value: 29 ),
        ( name: "OBJECT_BARREL", value: 30 ),
        ( name: "OBJECT_VOTE_BOX", value: 31 ),
        ( name: "OBJECT_MEDAL", value: 32 ),
        ( name: "OBJECT_TOWN_BOARD", value: 33 ),
        ( name: "OBJECT_BUILDING", value: 34 ),
      ]
    ),
    "mdata": (
      variables: [
        ( name: "MDATA_WIDTH", value: 0 ),
        ( name: "MDATA_HEIGHT", value: 1 ),
        ( name: "MDATA_TILE_FILE", value: 2 ),
        ( name: "MDATA_RENEW", value: 3 ),
        ( name: "MDATA_DOWNSTAIRS_POS", value: 4 ),
        ( name: "MDATA_UPSTAIRS_POS", value: 5 ),
        ( name: "MDATA_TYPE", value: 6 ),
        ( name: "MDATA_CAN_SAVE", value: 7 ),
        ( name: "MDATA_RESTORE_POS", value: 8 ),
        ( name: "MDATA_TIMESCALE", value: 9 ),
        ( name: "MDATA_MODERATE_CROWD", value: 10 ),
        ( name: "MDATA_LEVEL", value: 11 ),
        ( name: "MDATA_TILESET", value: 12 ),
        ( name: "MDATA_MUSIC", value: 13 ),
        ( name: "MDATA_FIELD", value: 14 ),
        ( name: "MDATA_WALL", value: 15 ),
        ( name: "MDATA_RENEW_MINOR", value: 16 ),
        ( name: "MDATA_NO_RENEW", value: 17 ),
        ( name: "MDATA_MAX_INV", value: 18 ),
        ( name: "MDATA_VERSION", value: 19 ),
        ( name: "MDATA_FIRE_SOUND", value: 20 ),
        ( name: "MDATA_VERSION_FIX1", value: 21 ),
      ]
    ),
    "mdatan": (
      variables: [
        (
          name: "MDATAN_NAME",
          value: 0
        )
      ]
    ),
    "map": (
      variables: [
        ( name: "MAP_TILE_ID", value: 0 ),
        ( name: "MAP_CHARA_INDEX_PLUS_ONE", value: 1 ),
        ( name: "MAP_TILE_ID_MEMORY", value: 2 ),
        ( name: "MAP_UNUSED_INDEX3", value: 3 ),
        ( name: "MAP_ITEM_CHIPS", value: 4 ),
        ( name: "MAP_ITEM_CHIPS_MEMORY", value: 5 ),
        ( name: "MAP_FEATS_ON_TILE", value: 6 ),
        ( name: "MAP_BLOOD_AND_DEBRIS", value: 7 ),
        ( name: "MAP_MEF_INDEX_PLUS_ONE", value: 8 ),
        ( name: "MAP_LIGHT_TYPE", value: 9 ),
      ]
    ),
    "map_tileset": (
      variables: [
        ( name: "MAP_TILESET_DUNGEON", value: 0 ),
        ( name: "MAP_TILESET_WORLD", value: 1 ),
        ( name: "MAP_TILESET_TOWN", value: 2 ),
        ( name: "MAP_TILESET_HOME", value: 3 ),
        ( name: "MAP_TILESET_WILDERNESS", value: 4 ),
        ( name: "MAP_TILESET_SNOW_UNUSED", value: 6 ),
        ( name: "MAP_TILESET_TOWER_OF_FIRE", value: 7 ),
        ( name: "MAP_TILESET_SF", value: 8 ),
        ( name: "MAP_TILESET_EASTERN", value: 9 ),
        ( name: "MAP_TILESET_WATER", value: 10 ),
        ( name: "MAP_TILESET_CASTLE", value: 11 ),
        ( name: "MAP_TILESET_JAIL", value: 12 ),

        ( name: "MAP_TILESET_FOREST", value: 96 ),
        ( name: "MAP_TILESET_TOWER", value: 97 ),
        ( name: "MAP_TILESET_FORT", value: 98 ),
        ( name: "MAP_TILESET_CAVE", value: 99 ),
        ( name: "MAP_TILESET_NEFIA_TOWER1", value: 100 ),
        ( name: "MAP_TILESET_NEFIA_TOWER2", value: 101 ),
        ( name: "MAP_TILESET_NEFIA_FORT", value: 200 ),
        ( name: "MAP_TILESET_NEFIA_FOREST", value: 300 ),
      ]
    ),
    "area_id": (
      variables: [
        ( name: "MAX_AREA_COUNT", value: 500 ),
        ( name: "MAX_AREA_OLD", value: 200 ),
        ( name: "MAX_AREA_DATA", value: 40, exclude: true ),
        ( name: "STARTING_USER_AREA", value: 300, exclude: true ),
        ( name: "STARTING_RANDOM_AREA", value: 450, exclude: true ),
        ( name: "STARTING_USER_AREA_OLD", value: 100, exclude: true ),
        ( name: "STARTING_RANDOM_AREA_OLD", value: 150, exclude: true ),

        ( name: "AREA_NONE", value: 0 ),
        ( name: "AREA_WORLD", value: 1 ),
        ( name: "AREA_WILDERNESS", value: 2 ),
        ( name: "AREA_LESIMAS", value: 3 ),
        ( name: "AREA_NORTH_TYRIS", value: 4 ),
        ( name: "AREA_VERNIS", value: 5 ),
        ( name: "AREA_ARENA", value: 6 ),
        ( name: "AREA_HOME", value: 7 ),
        ( name: "AREA_RANDOM_DUNGEON", value: 8 ),
        ( name: "AREA_TEST_GROUND", value: 9 ),
        ( name: "AREA_GRAVEYARD", value: 10 ),
        ( name: "AREA_PORT_KAPUL", value: 11 ),
        ( name: "AREA_YOWYN", value: 12 ),
        ( name: "AREA_QUEST", value: 13 ),
        ( name: "AREA_DERPHY", value: 14 ),
        ( name: "AREA_PALMIA", value: 15 ),
        ( name: "AREA_TOWER_OF_FIRE", value: 16 ),
        ( name: "AREA_CRYPT_OF_THE_DAMNED", value: 17 ),
        ( name: "AREA_ANCIENT_CASTLE", value: 18 ),
        ( name: "AREA_DRAGON_NEST", value: 19 ),
        ( name: "AREA_TRUCE_GROUND", value: 20 ),
        ( name: "AREA_CYBER_DOME", value: 21 ),
        ( name: "AREA_BEAST_FORT", value: 22 ),
        ( name: "AREA_MACHINE_FORT", value: 23 ),
        ( name: "AREA_COLLAPSED_FORT", value: 24 ),
        ( name: "AREA_LARNA", value: 25 ),
        ( name: "AREA_MOUNTAIN_PASS", value: 26 ),
        ( name: "AREA_PUPPY_CAVE", value: 27 ),
        ( name: "AREA_YEEK_NEST", value: 28 ),
        ( name: "AREA_SISTER_MANSION", value: 29 ),
        ( name: "AREA_SHELTER", value: 30 ),
        ( name: "AREA_RANCH", value: 31 ),
        ( name: "AREA_EMBASSY", value: 32 ),
        ( name: "AREA_NOYEL", value: 33 ),
        ( name: "AREA_MIROK_WORKSHOP", value: 34 ),
        ( name: "AREA_SHOW_HOUSE", value: 35 ),
        ( name: "AREA_LUMIEST", value: 36 ),
        ( name: "AREA_PYRAMID", value: 37 ),
        ( name: "AREA_MINOTAUR_NEST", value: 38 ),
        ( name: "AREA_DUNGEON", value: 39 ),
        ( name: "AREA_PET_ARENA", value: 40 ),
        ( name: "AREA_JAIL", value: 41 ),
        ( name: "AREA_VOID", value: 42 ),
        ( name: "AREA_NT_SOUTH_BORDER", value: 43 ),
        ( name: "AREA_SOUTH_TYRIS", value: 44 ),
        ( name: "AREA_ST_NORTH_BORDER", value: 45 ),
        ( name: "AREA_SMOKE_AND_PIPE", value: 46 ),
        ( name: "AREA_TEST_WORLD", value: 47 ),
        ( name: "AREA_TW_NORTH_BORDER", value: 48 ),
        ( name: "AREA_MUSEUM", value: 101 ),
        ( name: "AREA_SHOP", value: 102 ),
        ( name: "AREA_CROP", value: 103 ),
        ( name: "AREA_STORAGE_HOUSE", value: 104 ),
      ],
      ignore: [ 800, 900 ]
    ),
    "adata": (
      variables: [
        ( name: "ADATA_TYPE", value: 0 ),
        ( name: "ADATA_X", value: 1 ),
        ( name: "ADATA_Y", value: 2 ),
        ( name: "ADATA_START_ON", value: 3 ),
        ( name: "ADATA_TILE_FILE", value: 4 ),
        ( name: "ADATA_NAME", value: 5 ),
        ( name: "ADATA_DEEPEST", value: 6 ),
        ( name: "ADATA_INITIALIZED", value: 7 ),
        ( name: "ADATA_TIME_SCALE", value: 9 ),
        ( name: "ADATA_MAX_LEVEL", value: 10 ),
        ( name: "ADATA_CAN_SAVE", value: 11 ),
        ( name: "ADATA_RESTORE_POS", value: 12 ),
        ( name: "ADATA_SHOP_TYPE", value: 13 ),
        ( name: "ADATA_ICON", value: 15 ),
        ( name: "ADATA_ID", value: 16 ),
        ( name: "ADATA_MIN_LEVEL", value: 17 ),
        ( name: "ADATA_TILESET", value: 18 ),
        ( name: "ADATA_LAST_VISIT", value: 19 ),
        ( name: "ADATA_BOSS", value: 20 ),
        ( name: "ADATA_FIELD", value: 21 ),
        ( name: "ADATA_ARENA_WIN", value: 22 ),
        ( name: "ADATA_PET_ARENA_WIN", value: 23 ),
        ( name: "ADATA_RANDOM_SEED", value: 24 ),
        ( name: "ADATA_RANDOM_RENEW", value: 25 ),
        ( name: "ADATA_ARENA_RENEW1", value: 26 ),
        ( name: "ADATA_ARENA_RENEW2", value: 27 ),
        ( name: "ADATA_ECONOMY", value: 28 ),
        ( name: "ADATA_FESTIVAL", value: 29 ),
        ( name: "ADATA_PARENT", value: 30 ),
      ]
    ),
    "shop_type": (
      variables: [
        ( name: "SHOP_TYPE_GOODS", value: 0 ),
        ( name: "SHOP_TYPE_FOOD", value: 1 ),
        ( name: "SHOP_TYPE_MAGIC", value: 2 ),
        ( name: "SHOP_TYPE_BLACKSMITH", value: 3 ),
        ( name: "SHOP_TYPE_INN", value: 4 ),
      ]
    ),
    "shop_sale": (
      variables: [
        ( name: "SHOP_SALE_NONE", value: 0 ),
        ( name: "SHOP_SALE_15_ITEMS", value: 1 ),
        ( name: "SHOP_SALE_5_ITEMS", value: 2 ),
      ]
    ),
    "qdata": (
      variables: [
        ( name: "QDATA_MAX_SIZE", value: 20 ),
        ( name: "QDATA_MAX_CLIENT", value: 500 ),
        ( name: "QNAME_MAX_SIZE", value: 40 ),

        ( name: "QDATA_CLIENT", value: 0 ),
        ( name: "QDATA_MAP", value: 1 ),
        ( name: "QDATA_RENEW", value: 2 ),
        ( name: "QDATA_EXIST", value: 3 ),
        ( name: "QDATA_VAR", value: 4 ),
        ( name: "QDATA_LEVEL", value: 5 ),
        ( name: "QDATA_REWARD", value: 6 ),
        ( name: "QDATA_REWARD_ITEM", value: 7 ),
        ( name: "QDATA_STATE", value: 8 ),
        ( name: "QDATA_DEADLINE", value: 9 ),

        ( name: "QDATA_ENCOUNTER", value: 10 ),
        ( name: "QDATA_DEST_CLIENT", value: 10 ),

        ( name: "QDATA_DEST_ITEM", value: 11 ),
        ( name: "QDATA_PARAM1", value: 12 ),
        ( name: "QDATA_PARAM2", value: 13 ),
        ( name: "QDATA_TYPE", value: 14 ),
        ( name: "QDATA_QUEST_TARGET", value: 15 ),
      ]
    ),
    "quest_type": (
      variables: [
        ( name: "STARTING_QUEST_TYPE", value: 1000 ),

        ( name: "QUEST_TYPE_HUNT", value: 1001 ),
        ( name: "QUEST_TYPE_DELIVER", value: 1002 ),
        ( name: "QUEST_TYPE_COOK", value: 1003 ),
        ( name: "QUEST_TYPE_SUPPLY", value: 1004 ),
        ( name: "QUEST_TYPE_MUSIC", value: 1005 ),
        ( name: "QUEST_TYPE_HARVEST", value: 1006 ),
        ( name: "QUEST_TYPE_ESCORT", value: 1007 ),
        ( name: "QUEST_TYPE_CONQUER", value: 1008 ),
        ( name: "QUEST_TYPE_PARTY", value: 1009 ),
        ( name: "QUEST_TYPE_HUNTEX", value: 1010 ),
        ( name: "QUEST_TYPE_COLLECT", value: 1011 ),
        // ( name: "QUEST_TYPE_THIEVES", value: 1012 ),
        // ( name: "QUEST_TYPE_MINEFIELD", value: 1013 ),

        ( name: "QUEST_TYPE_NONE", value: 0 ),
        ( name: "QUEST_SUBTYPE_ELIMINATE", value: 1 ),
        ( name: "QUEST_SUBTYPE_DELIVER", value: 2 ),
        ( name: "QUEST_SUBTYPE_SUPPLY", value: 3 ),
        ( name: "QUEST_SUBTYPE_MUSIC", value: 4 ),
        ( name: "QUEST_SUBTYPE_CARRY", value: 5 ),
        ( name: "QUEST_SUBTYPE_GUARD", value: 6 ),
        ( name: "QUEST_SUBTYPE_PERFORM", value: 7 ),
        ( name: "QUEST_SUBTYPE_CONQUER", value: 8 ),
        ( name: "QUEST_SUBTYPE_COLLECT", value: 9 ),
        ( name: "QUEST_SUBTYPE_TRAP", value: 10 ),
      ]
    ),
    "quest_state": (
      variables: [
        ( name: "QUEST_STATE_NONE", value: 0 ),
        ( name: "QUEST_STATE_ONGOING", value: 1 ),
        ( name: "QUEST_STATE_FAIL", value: 2 ),
        ( name: "QUEST_STATE_SUCCESS", value: 3 ),
      ]
    ),
    "quest_reward": (
      variables: [
        ( name: "QUEST_REWARD_NONE", value: 0 ),
        ( name: "QUEST_REWARD_WEAR", value: 1 ),
        ( name: "QUEST_REWARD_MAGIC", value: 2 ),
        ( name: "QUEST_REWARD_ARMOR", value: 3 ),
        ( name: "QUEST_REWARD_WEAPON", value: 4 ),
        ( name: "QUEST_REWARD_SUPPLY", value: 5 ),
      ]
    ),
    "quest_reward_or_filter": (
      includes: [
        "quest_reward",
        "filter"
      ]
    ),
    "color": (
      variables: [
        ( name: "COLOR_DEFAULT", value: 0 ),
        ( name: "COLOR_RANDOM", value: 1 ),
        ( name: "COLOR_GREEN", value: 2 ),
        ( name: "COLOR_RED", value: 3 ),
        ( name: "COLOR_BLUE", value: 4 ),
        ( name: "COLOR_YELLOW", value: 5 ),
        ( name: "COLOR_BROWN", value: 6 ),
        ( name: "COLOR_BLACK", value: 7 ),
        ( name: "COLOR_PURPLE", value: 8 ),
        ( name: "COLOR_SKY_BLUE", value: 9 ),
        ( name: "COLOR_PINK", value: 10 ),
        ( name: "COLOR_ORANGE", value: 11 ),
        ( name: "COLOR_WHITE", value: 12 ),
        ( name: "COLOR_FRESH", value: 13 ),
        ( name: "COLOR_DARK_GREEN", value: 14 ),
        ( name: "COLOR_GRAY", value: 15 ),
        ( name: "COLOR_LIGHT_RED", value: 16 ),
        ( name: "COLOR_LIGHT_BLUE", value: 17 ),
        ( name: "COLOR_LIGHT_PURPLE", value: 18 ),
        ( name: "COLOR_LIGHT_GREEN", value: 19 ),
        ( name: "COLOR_TALK", value: 20 ),
        ( name: "COLOR_LIGHT_BLUE2", value: 21 ),
        ( name: "COLOR_RED2", value: 22 ),
        ( name: "COLOR_LIME", value: 23 ),
        ( name: "COLOR_DARK_GRAY", value: 24 ),
        ( name: "COLOR_YELLOW2", value: 25 ),
        ( name: "COLOR_LIGHT_BROWN", value: 26 ),
        ( name: "COLOR_PURPLE2", value: 27 ),
        ( name: "COLOR_DARK_GRAY2", value: 28 ),
        ( name: "COLOR_DARK_GRAY3", value: 29 ),

        ( name: "MAX_COLOR", value: 30, code_value: "COLOR_DARK_GRAY3 + 1" ),

        ( name: "COLOR_TINT_MULT", value: 1000 ),
      ]
    ),
    "god": (
      variables: [
        ( name: "GOD_EYTH", value: 0 ),
        ( name: "GOD_MANI", value: 1 ),
        ( name: "GOD_LULWY", value: 2 ),
        ( name: "GOD_ITZPALT", value: 3 ),
        ( name: "GOD_EHEKATL", value: 4 ),
        ( name: "GOD_OPATOS", value: 5 ),
        ( name: "GOD_JURE", value: 6 ),
        ( name: "GOD_KUMIROMI", value: 7 ),
        ( name: "GOD_YACATECT", value: 8 ),
      ]
    ),
    "god_text": (
      variables: [
        ( name: "GOD_TEXT_BETRAY", value: 1 ),
        ( name: "GOD_TEXT_TAKE_OVER", value: 2 ),
        ( name: "GOD_TEXT_TAKE_OVER_FAIL", value: 3 ),
        ( name: "GOD_TEXT_OFFER_GREAT", value: 4 ),
        ( name: "GOD_TEXT_JOIN", value: 5 ),
        ( name: "GOD_TEXT_GIFT", value: 6 ),
        ( name: "GOD_TEXT_LIKE", value: 7 ),
        ( name: "GOD_TEXT_LOVE", value: 8 ),
        ( name: "GOD_TEXT_KILL", value: 9 ),
        ( name: "GOD_TEXT_SLEEP", value: 10 ),
        ( name: "GOD_TEXT_WELCOME", value: 11 ),
        ( name: "GOD_TEXT_RANDOM", value: 12 ),
        ( name: "GOD_TEXT_WIP", value: 13 ),
      ]
    ),
    "role": (
      variables: [
        ( name: "ROLE_NONE", value: 0 ),
        ( name: "ROLE_SHOPKEEPER", value: 1 ),
        ( name: "ROLE_CHEF", value: 2 ),
        ( name: "ROLE_SPECIAL", value: 3 ),
        ( name: "ROLE_CITIZEN", value: 4 ),
        ( name: "ROLE_IDENTIFIER", value: 5 ),
        ( name: "ROLE_MAYOR", value: 6 ),
        ( name: "ROLE_TRAINER", value: 7 ),
        ( name: "ROLE_INFORMER", value: 8 ),
        ( name: "ROLE_BARTENDER", value: 9 ),
        ( name: "ROLE_ARENA_MASTER", value: 10 ),
        ( name: "ROLE_PET_ARENA_MASTER", value: 11 ),
        ( name: "ROLE_HEALER", value: 12 ),
        ( name: "ROLE_ADVENTURER", value: 13 ),
        ( name: "ROLE_GUARD", value: 14 ),
        ( name: "ROLE_KING", value: 15 ),
        ( name: "ROLE_SHOP_GUARD", value: 16 ),
        ( name: "ROLE_SLAVER", value: 17 ),
        ( name: "ROLE_MAID", value: 18 ),
        ( name: "ROLE_SISTER", value: 19 ),
        ( name: "ROLE_USER", value: 20 ),
        ( name: "ROLE_RETURNER", value: 21 ),
        ( name: "ROLE_HORSE_MASTER", value: 22 ),
        ( name: "ROLE_CARAVAN_MASTER", value: 23 ),

        ( name: "ROLE_SHOP_MIN", value: 1000 ),
        ( name: "ROLE_SHOP_WEAPON", value: 1000 ),
        ( name: "ROLE_SHOP_ARMOR", value: 1001 ),
        ( name: "ROLE_SHOP_FOOD", value: 1002 ),
        ( name: "ROLE_SHOP_BAKERY", value: 1003 ),
        ( name: "ROLE_SHOP_MAGIC", value: 1004 ),
        ( name: "ROLE_SHOP_INN", value: 1005 ),
        ( name: "ROLE_SHOP_GENERAL", value: 1006 ),
        ( name: "ROLE_SHOP_BLACKMARKET", value: 1007 ),
        ( name: "ROLE_SHOP_GOODS", value: 1008 ),
        ( name: "ROLE_SHOP_TRADE", value: 1009 ),
        ( name: "ROLE_SHOP_WANDER", value: 1010 ),
        ( name: "ROLE_SHOP_SALESPERSON", value: 1011 ),
        ( name: "ROLE_SHOP_OFFICE", value: 1012 ),
        ( name: "ROLE_SHOP_DEED", value: 1013 ),
        ( name: "ROLE_SHOP_FISH", value: 1014 ),
        ( name: "ROLE_SHOP_NOYEL", value: 1015 ),
        ( name: "ROLE_SHOP_MIROK", value: 1016 ),
        ( name: "ROLE_SHOP_MOUNTAIN1", value: 1017 ),
        ( name: "ROLE_SHOP_MOUNTAIN2", value: 1018 ),
        ( name: "ROLE_SHOP_SISTER", value: 1019 ),
        ( name: "ROLE_SHOP_BOOK_RESERVE", value: 1020 ),
        ( name: "ROLE_SHOP_THIEF", value: 1021 ),
        ( name: "ROLE_SHOP_FESTIVAL", value: 1022 ),
        ( name: "ROLE_SHOP_STOKE", value: 1023 ),
        ( name: "ROLE_SHOP_MOYER", value: 1024 ),
        ( name: "ROLE_GUEST_HALLOWEEN", value: 1025 ),

        ( name: "ROLE_GUEST_MIN", value: 2000 ),
        ( name: "ROLE_GUEST_BEGGAR", value: 2000 ),
        ( name: "ROLE_GUEST_SEX", value: 2001 ),
        ( name: "ROLE_GUEST_CITIZEN", value: 2002 ),
        ( name: "ROLE_GUEST_MERCHANT", value: 2003 ),
        ( name: "ROLE_GUEST_CRITIC", value: 2004 ),
        ( name: "ROLE_GUEST_TRAINER", value: 2005 ),
        ( name: "ROLE_GUEST_PRODUCER", value: 2006 ),
        ( name: "MAX_ROLE_GUEST", value: 3000 ),
      ]
    ),
    "pcc": (
      variables: [
        ( name: "PCC_HAIR", value: 1 ),
        ( name: "PCC_CHEST", value: 2 ),
        ( name: "PCC_LEG", value: 3 ),
        ( name: "PCC_MANTLE", value: 4 ),
        ( name: "PCC_BELT", value: 5 ),
        ( name: "PCC_BOOTS", value: 6 ),
        ( name: "PCC_PANTS", value: 7 ),
        ( name: "PCC_GLOVE", value: 8 ),
        ( name: "PCC_CLOTH", value: 9 ),
        ( name: "PCC_SUB_HAIR", value: 10 ),
        ( name: "PCC_ETC1", value: 11 ),
        ( name: "PCC_ETC2", value: 12 ),
        ( name: "PCC_ETC3", value: 13 ),
        ( name: "PCC_EYE", value: 14 ),
        ( name: "PCC_BODY", value: 15 ),
        ( name: "PCC_RIDE", value: 16 ),

        ( name: "STARTING_PCC_HIDE", value: 20 ),
        ( name: "PCC_HIDE_CHEST", value: 20 ),
        ( name: "PCC_HIDE_LEG", value: 21 ),
        ( name: "PCC_HIDE_BELT", value: 22 ),
        ( name: "PCC_HIDE_GLOVE", value: 23 ),
        ( name: "PCC_HIDE_MANTLE", value: 24 ),
      ]
    ),
    "chara_state": (
      variables: [
        ( name: "CHAR_STATE_DEAD", value: 0 ),
        ( name: "CHAR_STATE_ALIVE", value: 1 ),
        ( name: "CHAR_STATE_SPIRIT", value: 2 ),
        ( name: "CHAR_STATE_ADV", value: 3 ),
        ( name: "CHAR_STATE_ADV_HOSPITAL", value: 4 ),
        ( name: "CHAR_STATE_ADV_DEAD", value: 5 ),
        ( name: "CHAR_STATE_ALLY_DEAD", value: 6 ),
        ( name: "CHAR_STATE_ALLY_WAIT", value: 7 ),
        ( name: "CHAR_STATE_SUSPEND", value: 8 ),
        ( name: "CHAR_STATE_ALLY_WORK", value: 9 ),
        ( name: "CHAR_STATE_TEMP", value: 10 ),
      ]
    ),
    "relation": (
      variables: [
        ( name: "RELATION_ENEMY", value: -3 ),
        ( name: "RELATION_HATE", value: -2 ),
        ( name: "RELATION_DISLIKE", value: -1 ),
        ( name: "RELATION_NEUTRAL", value: 0 ),
        ( name: "RELATION_ALLY", value: 10 ),
      ]
    ),
    "characreate_loc": (
      includes: [
        "chara"
      ],
      ignore: [ -1, 3 ]
    ),
    "inv_id": (
      includes: [
        "chara"
      ],
      variables: [
        ( name: "INV_GROUND", value: -1 ),
      ]
    ),
    "chara": (
      variables: [
        ( name: "CHARA_PLAYER", value: 0 ),
        // ( name: "CHARA_TEMPORARY", value: 56 ),
        // ( name: "CHARA_TEMPORARY2", value: 57 ),

        ( name: "MAX_CHARA_NULL", value: 1, ),
        ( name: "MAX_CHARA_ADVENTURER", value: 39, code_value: "40 - MAX_CHARA_NULL", ),
        ( name: "MAX_CHARA_FOLLOWER", value: 16, ),
        ( name: "MAX_CHARA_ALLY", value: 8, ),
        ( name: "MAX_CHARA_SAVE", value: 57, code_value: "MAX_CHARA_FOLLOWER + MAX_CHARA_ADVENTURER + 1 + MAX_CHARA_NULL" ),
        ( name: "MAX_CHARA_NC", value: 56, code_value: "MAX_CHARA_SAVE - MAX_CHARA_NULL" ),
        ( name: "MAX_CHARA_TOTAL", value: 245, ),
        ( name: "MAX_CHARA_DATA", value: 500, ),
      ],
      ignore: [ -1, 10000 ]
    ),
    "cdata": (
      variables: [
        ( name: "CDATA_EXIST", value: 0, macro: "cExist" ),
        ( name: "CDATA_X", value: 1, macro: "cX" ),
        ( name: "CDATA_Y", value: 2, macro: "cY" ),
        ( name: "CDATA_X_NEW", value: 3, macro: "cXnew" ),
        ( name: "CDATA_Y_NEW", value: 4, macro: "cYnew" ),
        ( name: "CDATA_RESPAWN", value: 5, macro: "cRespawn" ),
        ( name: "CDATA_SYNC", value: 6, macro: "cSync" ),
        ( name: "CDATA_PIC", value: 7, macro: "cPic" ),
        ( name: "CDATA_SEX", value: 8, macro: "cSex" ),
        ( name: "CDATA_RELATION", value: 9, macro: "cRelation" ),

        ( name: "CDATA_SPEED_SUM", value: 10, macro: "cSpeedSum" ),
        ( name: "CDATA_SPEED", value: 11, macro: "cSpeed" ),
        ( name: "CDATA_AI_ITEM", value: 12, macro: "cAiItem" ),
        ( name: "CDATA_PORTRAIT", value: 13, macro: "cPortrait" ),
        ( name: "CDATA_INTEREST", value: 14, macro: "cInterest" ),
        ( name: "CDATA_INTEREST_RENEW", value: 15, macro: "cInterestRenew" ),
        ( name: "CDATA_PERSONALITY", value: 16, macro: "cPersonality" ),
        ( name: "CDATA_IMPRESSION", value: 17, macro: "cImpression" ),
        ( name: "CDATA_TONE", value: 18, macro: "cTone" ),
        ( name: "CDATA_HEIGHT", value: 19, macro: "cHeight" ),
        ( name: "CDATA_WEIGHT", value: 20, macro: "cWeight" ),
        ( name: "CDATA_AGE", value: 21, macro: "cAge" ),
        ( name: "CDATA_HUNGER", value: 22, macro: "cHunger" ),
        ( name: "CDATA_TXT", value: 23, macro: "cTxt" ),
        ( name: "CDATA_UNIQUE", value: 24, macro: "cUnique" ),
        ( name: "CDATA_QUALITY", value: 25, macro: "cQuality" ),
        ( name: "CDATA_TURN", value: 26, macro: "cTurn" ),
        ( name: "CDATA_ID", value: 27, macro: "cId" ),
        ( name: "CDATA_FOV", value: 28, macro: "cFov" ),
        ( name: "CDATA_TARGET", value: 29, macro: "cTarget" ),
        ( name: "CDATA_GOLD", value: 30, macro: "cGold" ),
        ( name: "CDATA_PLATINUM", value: 31, macro: "cPlat" ),
        ( name: "CDATA_ATTACK_STYLE", value: 32, macro: "cAttackStyle" ),
        ( name: "CDATA_MELEE_STYLE", value: 33, macro: "cMeleeStyle" ),
        ( name: "CDATA_FAME", value: 34, macro: "cFame" ),
        ( name: "CDATA_EXP", value: 35, macro: "cExp" ),
        ( name: "CDATA_EXP_TO_NEXT_LVL", value: 36, macro: "cExpToNext" ),
        ( name: "CDATA_TIME_SCALE", value: 37, macro: "cTimeScale" ),
        ( name: "CDATA_LEVEL", value: 38, macro: "cLevel" ),
        ( name: "CDATA_SPEED_FIX", value: 39, macro: "cSpeedFix" ),
        ( name: "CDATA_ALIGNMENT", value: 40, macro: "cAlignment" ),
        ( name: "CDATA_SKILLPOINT", value: 41, macro: "cSkillPoint" ),
        ( name: "CDATA_SP_EARNED", value: 42, macro: "cSPearned" ),
        ( name: "CDATA_INV_WEIGHT", value: 43, macro: "cInvWeight" ),
        ( name: "CDATA_CARRY_LIMIT", value: 44, macro: "cCarryLimit" ),
        ( name: "CDATA_BURDEN", value: 45, macro: "cBurden" ),

        ( name: "CDATA_LEVEL_ORG", value: 48, macro: "cLevelOrg" ),
        ( name: "CDATA_KARMA", value: 49, macro: "cKarma" ),
        ( name: "CDATA_HP", value: 50, macro: "cHP" ),
        ( name: "CDATA_MAX_HP", value: 51, macro: "cMHP" ),
        ( name: "CDATA_SP", value: 52, macro: "cSP" ),
        ( name: "CDATA_MAX_SP", value: 53, macro: "cMSP" ),

        ( name: "CDATA_MP", value: 55, macro: "cMP" ),
        ( name: "CDATA_MAX_MP", value: 56, macro: "cMMP" ),

        ( name: "CDATA_DRAIN_HP", value: 60, macro: "cDrainHP" ),
        ( name: "CDATA_GOD", value: 61, macro: "cGod" ),
        ( name: "CDATA_PIETY", value: 62, macro: "cPiety" ),
        ( name: "CDATA_PRAY", value: 63, macro: "cPray" ), // Unused
        ( name: "CDATA_EQUIP_WEIGHT", value: 64, macro: "cEqWeight" ),
        ( name: "CDATA_CAST_STYLE", value: 65, macro: "cCastStyle" ),
        ( name: "CDATA_PIERCING_CHANCE", value: 66, macro: "cVopalChance" ),
        ( name: "CDATA_CRIT_CHANCE", value: 67, macro: "cCritChance" ),
        ( name: "CDATA_BODY_SPEED_FIX", value: 68, macro: "cBodySpdFix" ),
        ( name: "CDATA_RELATION_ORG", value: 69, macro: "cOrgRelation" ),
        ( name: "CDATA_PV", value: 70, macro: "cPV" ),
        ( name: "CDATA_DV", value: 71, macro: "cDV" ),
        ( name: "CDATA_ATTACK", value: 72, macro: "cATK" ),
        ( name: "CDATA_DAMAGE", value: 73, macro: "cDMG" ),
        ( name: "CDATA_R_ATTACK", value: 74, macro: "cRATK" ),
        ( name: "CDATA_R_DAMAGE", value: 75, macro: "cRDMG" ),
        ( name: "CDATA_PV_FIX", value: 76, macro: "cPvFix" ),
        ( name: "CDATA_DV_FIX", value: 77, macro: "cDvFix" ),
        ( name: "CDATA_BARRIER", value: 78, macro: "cBarrier" ),
        ( name: "CDATA_EMO_ICON", value: 79, macro: "cEmoIcon" ),
        ( name: "CDATA_AREA", value: 80, macro: "cType" ),
        ( name: "CDATA_AREA_LEVEL", value: 81, macro: "cAreaLv" ),
        ( name: "CDATA_QUEST_NPC", value: 82, macro: "cQuestNpc" ),
        ( name: "CDATA_DIR", value: 83, macro: "cDir" ),
        ( name: "CDATA_HIRE_DATE", value: 84, macro: "cHireDate" ),
        ( name: "CDATA_FRIENDSHIP", value: 85, macro: "cFriendship" ),
        ( name: "CDATA_SANITY", value: 86, macro: "cSAN" ),
        ( name: "CDATA_CURSE", value: 87, macro: "cCurse" ),
        ( name: "CDATA_EXTRA_MELEE", value: 88, macro: "cExtraMelee" ),
        ( name: "CDATA_EXTRA_SHOOT", value: 89, macro: "cExtraShoot" ),
        ( name: "CDATA_RES_DAMAGE", value: 90, macro: "cResDamage" ),
        ( name: "CDATA_IMMUNE_DAMAGE", value: 91, macro: "cImmuneDamage" ),
        ( name: "CDATA_REFLECT_DAMAGE", value: 92, macro: "cReflectDamage" ),
        ( name: "CDATA_VOMIT", value: 93, macro: "cVomit" ),

        ( name: "CDATA_STARTING_EQUIP_SLOTS", value: 100 ),

        ( name: "CDATA_EQUIP_SLOT_1", value: 100 ),
        ( name: "CDATA_EQUIP_SLOT_2", value: 101 ),
        ( name: "CDATA_EQUIP_SLOT_3", value: 102 ),
        ( name: "CDATA_EQUIP_SLOT_4", value: 103 ),
        ( name: "CDATA_EQUIP_SLOT_5", value: 104 ),
        ( name: "CDATA_EQUIP_SLOT_6", value: 105 ),
        ( name: "CDATA_EQUIP_SLOT_7", value: 106 ),
        ( name: "CDATA_EQUIP_SLOT_8", value: 107 ),
        ( name: "CDATA_EQUIP_SLOT_9", value: 108 ),
        ( name: "CDATA_EQUIP_SLOT_10", value: 109 ),
        ( name: "CDATA_EQUIP_SLOT_11", value: 110 ),
        ( name: "CDATA_EQUIP_SLOT_12", value: 111 ),
        ( name: "CDATA_EQUIP_SLOT_13", value: 112 ),
        ( name: "CDATA_EQUIP_SLOT_14", value: 113 ),
        ( name: "CDATA_EQUIP_SLOT_15", value: 114 ),
        ( name: "CDATA_EQUIP_SLOT_16", value: 115 ),
        ( name: "CDATA_EQUIP_SLOT_17", value: 116 ),
        ( name: "CDATA_EQUIP_SLOT_18", value: 117 ),
        ( name: "CDATA_EQUIP_SLOT_19", value: 118 ),
        ( name: "CDATA_EQUIP_SLOT_20", value: 119 ),
        ( name: "CDATA_EQUIP_SLOT_21", value: 120 ),
        ( name: "CDATA_EQUIP_SLOT_22", value: 121 ),
        ( name: "CDATA_EQUIP_SLOT_23", value: 122 ),
        ( name: "CDATA_EQUIP_SLOT_24", value: 123 ),
        ( name: "CDATA_EQUIP_SLOT_25", value: 124 ),
        ( name: "CDATA_EQUIP_SLOT_26", value: 125 ),
        ( name: "CDATA_EQUIP_SLOT_27", value: 126 ),
        ( name: "CDATA_EQUIP_SLOT_28", value: 127 ),
        ( name: "CDATA_EQUIP_SLOT_29", value: 128 ),
        ( name: "CDATA_EQUIP_SLOT_30", value: 129 ),

        ( name: "CDATA_ROW_ACT", value: 140, macro: "cRowAct" ),
        ( name: "CDATA_ACTION_PERIOD", value: 141, macro: "cActionPeriod" ),
        ( name: "CDATA_ITEM_USING", value: 142, macro: "cItemUsing" ),
        ( name: "CDATA_ROW_ACT_WARNING", value: 143, macro: "cRowActWarn" ),
        ( name: "CDATA_PERFORM_SCORE", value: 144, macro: "cPerformScore" ),
        ( name: "CDATA_PERFORM_GOLD", value: 145, macro: "cPerformGold" ),

        ( name: "CDATA_ROLE", value: 150, macro: "cRole" ),
        ( name: "CDATA_ROLE_SHOP_LEVEL", value: 151, macro: "cRoleShopLv" ),
        ( name: "CDATA_ROW_ACT_TC", value: 152, macro: "cRowActTc" ),
        ( name: "CDATA_ROLE_FILE_ID", value: 153, macro: "cRoleFileId" ),
        ( name: "CDATA_ROLE_RESTOCK", value: 154, macro: "cRoleRestock" ),
        ( name: "CDATA_ROLE_VAL", value: 155, macro: "cRoleVal" ),
        ( name: "CDATA_AI_INT", value: 156, macro: "cAiInt" ),
        ( name: "CDATA_USERNPC_ID", value: 157, macro: "cUNID" ),
        ( name: "CDATA_RACE_ID", value: 158, macro: "cRaceId" ),

        ( name: "CDATA_X_ORG", value: 171, macro: "cXorg" ),
        ( name: "CDATA_Y_ORG", value: 172, macro: "cYorg" ),

        ( name: "CDATA_AI", value: 200, macro: "cAi" ),
        ( name: "CDATA_AI_AGGRO", value: 201, macro: "cAiAggro" ),
        ( name: "CDATA_AI_CALM", value: 202, macro: "cAiCalm" ),
        ( name: "CDATA_MOVE_AROUND", value: 203, macro: "cMoveAround" ),
        ( name: "CDATA_MOVE_DIR", value: 204, macro: "cMoveDir" ),
        ( name: "CDATA_X_DEST", value: 205, macro: "cXdest" ),
        ( name: "CDATA_Y_DEST", value: 206, macro: "cYdest" ),
        ( name: "CDATA_AI_MOVE_FREQ", value: 207, macro: "cAiMoveFreq" ),
        ( name: "CDATA_AI_DISTANCE", value: 208, macro: "cAiDistance" ),
        ( name: "CDATA_AI_SUB", value: 209, macro: "cAiSub" ),
        ( name: "CDATA_ACT_RANGE", value: 210, macro: "cActRange" ),
        ( name: "CDATA_ACT_HEAL", value: 211, macro: "cActHeal" ),
        ( name: "CDATA_ACT_INDEX", value: 212, macro: "cActIndex" ),

        ( name: "STARTING_CDATA_ACT_MAIN", value: 215 ),
        ( name: "RANGE_CDATA_ACT_MAIN", value: 5, exclude: true ),
        ( name: "STARTING_CDATA_ACT_SUB", value: 220 ),
        ( name: "RANGE_CDATA_ACT_SUB", value: 5, exclude: true ),

        ( name: "CDATA_ELEMENT", value: 230 ),

        ( name: "STARTING_CDATA_ATTR", value: 240 ),

        ( name: "CDATA_CONDITION_POISON", value: 250, macro: "cPoison" ),
        ( name: "CDATA_CONDITION_SLEEP", value: 251, macro: "cSleep" ),
        ( name: "CDATA_CONDITION_PARALYZE", value: 252, macro: "cParalyze" ),
        ( name: "CDATA_CONDITION_BLIND", value: 253, macro: "cBlind" ),
        ( name: "CDATA_CONDITION_CONFUSE", value: 254, macro: "cConfuse" ),
        ( name: "CDATA_CONDITION_FEAR", value: 255, macro: "cFear" ),
        ( name: "CDATA_CONDITION_DIM", value: 256, macro: "cDim" ),
        ( name: "CDATA_CONDITION_DRUNK", value: 257, macro: "cDrunk" ),
        ( name: "CDATA_CONDITION_BLEED", value: 258, macro: "cBleed" ),
        ( name: "CDATA_CONDITION_WET", value: 259, macro: "cWet" ),
        ( name: "CDATA_CONDITION_INSANE", value: 260, macro: "cInsane" ),
        ( name: "CDATA_CONDITION_SICK", value: 261, macro: "cSick" ),
        ( name: "CDATA_CONDITION_GRAVITY", value: 262, macro: "cGravity" ),
        ( name: "CDATA_CONDITION_SUFFOCATION", value: 263, macro: "cMochi" ),
        ( name: "CDATA_CONDITION_ANGRY", value: 264, macro: "cAngry" ),

        ( name: "STARTING_CDATA_FOOD_EXP", value: 270 ),
        ( name: "RANGE_CDATA_FOOD_EXP", value: 10, exclude: true ),

        ( name: "STARTING_CDATA_BUFF", value: 280 ),
        ( name: "ARRAY_CDATA_BUFF", value: 3, exclude: true ),
        ( name: "MAX_BLESSINGS", value: 8, exclude: true ),
        ( name: "MAX_HEXES", value: 8, exclude: true ),

        ( name: "STARTING_CDATA_CHARA_BIT", value: 450 ),
      ]
    ),
    "cdatan": (
      variables: [
        ( name: "CDATAN_NAME", value: 0, macro: "cnName" ),
        ( name: "CDATAN_AKA", value: 1, macro: "cnAka" ),
        ( name: "CDATAN_RACE", value: 2, macro: "cnRace" ),
        ( name: "CDATAN_CLASS", value: 3, macro: "cnClass" ),
        ( name: "CDATAN_MSG", value: 4, macro: "cnMsg" ),
        ( name: "CDATAN_USER_NPC_TAG", value: 5, macro: "cnUNTAG" ),
      ]
    ),
    "chara_bit": (
      variables:
      [
        ( name: "RANGE_TEMP_CHARA_BIT", value: 30, exclude: true ),
        ( name: "MAX_CHARA_BIT", value: 50 ),

        ( name: "CHARA_BIT_FLOAT", value: 5 ),
        ( name: "CHARA_BIT_INVISIBLE", value: 6 ),
        ( name: "CHARA_BIT_SEE_INVISIBLE", value: 7 ),
        ( name: "CHARA_BIT_RES_CONFUSE", value: 8 ),
        ( name: "CHARA_BIT_RES_BLIND", value: 9 ),
        ( name: "CHARA_BIT_RES_FEAR", value: 10 ),
        ( name: "CHARA_BIT_RES_SLEEP", value: 11 ),
        ( name: "CHARA_BIT_RES_PARALYZE", value: 12 ),
        ( name: "CHARA_BIT_RES_POISON", value: 13 ),
        ( name: "CHARA_BIT_EAT_ROTTEN", value: 14 ),
        ( name: "CHARA_BIT_RES_STEAL", value: 15 ),
        ( name: "CHARA_BIT_INCOGNITO", value: 16 ),
        ( name: "CHARA_BIT_DROP_GOLD", value: 17 ),
        ( name: "CHARA_BIT_SUICIDE", value: 18 ),
        ( name: "CHARA_BIT_DEATH_MASTER", value: 19 ),
        ( name: "CHARA_BIT_RAPID_MAGIC", value: 20 ),
        ( name: "CHARA_BIT_LAY_HANDS", value: 21 ),
        ( name: "CHARA_BIT_SUPERIOR_RIDING", value: 22 ),
        ( name: "CHARA_BIT_SPLIT_KEEP_EFFECT", value: 23 ),
        ( name: "CHARA_BIT_RES_CURSE", value: 24 ),
        ( name: "CHARA_BIT_INFERIOR_RIDING", value: 25 ),
        ( name: "CHARA_BIT_RES_ELEMENTAL", value: 26 ),
        ( name: "CHARA_BIT_SPLIT_NO_EFFECT", value: 27 ),
        ( name: "CHARA_BIT_METAL", value: 28 ),
        ( name: "CHARA_BIT_CURE_BLEEDING", value: 29 ),
        ( name: "CHARA_BIT_BREAK_WALLS", value: 30 ),
        ( name: "CHARA_BIT_IMMUNE_MINE", value: 31 ),
        ( name: "CHARA_BIT_TEMPER", value: 32 ),

        ( name: "CHARA_BIT_LIVESTOCK", value: 960 ), // RANGE_TEMP_CHARA_BIT * 32 ),
        ( name: "CHARA_BIT_MARRIED", value: 961 ),
        ( name: "CHARA_BIT_MAKE_GENE", value: 962 ),
        ( name: "CHARA_BIT_BODYGUARD", value: 963 ),
        ( name: "CHARA_BIT_SUMMONED", value: 964 ),
        ( name: "CHARA_BIT_SHUT_UP", value: 965 ),
        ( name: "CHARA_BIT_STETHOSCOPE", value: 966 ),
        ( name: "CHARA_BIT_PCC", value: 967 ),
        ( name: "CHARA_BIT_LEASHED", value: 968 ),
        ( name: "CHARA_BIT_HIRED", value: 969 ),
        ( name: "CHARA_BIT_QUEST_TARGET", value: 970 ),
        ( name: "CHARA_BIT_GUARD_TEMP", value: 971 ), // set on the puppy, which you must protect
        ( name: "CHARA_BIT_SUICIDE_SWITCH", value: 972 ),
        ( name: "CHARA_BIT_DEATH_COUNT", value: 973 ),
        ( name: "CHARA_BIT_LAY_HAND_CHARGE", value: 974 ),
        ( name: "CHARA_BIT_RIDE", value: 975 ),
        ( name: "CHARA_BIT_PRECIOUS", value: 976 ),
        ( name: "CHARA_BIT_HAS_NAME", value: 977 ),
        ( name: "CHARA_BIT_PREGNANT", value: 978 ),
        ( name: "CHARA_BIT_NO_TARGET", value: 979 ),
        ( name: "CHARA_BIT_CONTINGENCY", value: 980 ),
        ( name: "CHARA_BIT_REFRESH", value: 981 ),
        ( name: "CHARA_BIT_EVENT_TALK", value: 982 ),
        ( name: "CHARA_BIT_STONE_BLOOD", value: 983 ),
        ( name: "CHARA_BIT_TOKEN_FRIEND", value: 984 ),
        ( name: "CHARA_BIT_SANDBAG", value: 985 ),
        ( name: "CHARA_BIT_ANOREXIA", value: 986 ),
        ( name: "CHARA_BIT_POISON_FLAG", value: 987 ),
        ( name: "CHARA_BIT_AI_SAVE_MANA", value: 988 ),
        ( name: "CHARA_BIT_MSG_FILE", value: 989 ),
        ( name: "CHARA_BIT_NO_GOD", value: 990 ),
        ( name: "CHARA_BIT_FESTIVAL", value: 991 ),
      ]
    ),
    "condition": (
      variables: [
        ( name: "CONDITION_POISON", value: 1 ),
        ( name: "CONDITION_SLEEP", value: 2 ),
        ( name: "CONDITION_PARALYZE", value: 3 ),
        ( name: "CONDITION_BLIND", value: 4 ),
        ( name: "CONDITION_CONFUSE", value: 5 ),
        ( name: "CONDITION_FEAR", value: 6 ),
        ( name: "CONDITION_DIM", value: 7 ),
        ( name: "CONDITION_DRUNK", value: 8 ),
        ( name: "CONDITION_BLEED", value: 9 ),
        ( name: "CONDITION_WET", value: 10 ),
        ( name: "CONDITION_INSANE", value: 11 ),
        ( name: "CONDITION_SICK", value: 12 ),
      ]
    ),
    "shield_style": (
      variables: [
        ( name: "SHIELD_STYLE_NORMAL", value: 1 ),
        ( name: "SHIELD_STYLE_TONFA", value: 2 ),
      ]
    ),
    "weapon_style": (
      variables: [
        ( name: "WEAPON_STYLE_LONGSWORD", value: 1 ),
        ( name: "WEAPON_STYLE_SHORTSWORD2", value: 2 ),
        ( name: "WEAPON_STYLE_LONGSWORD2", value: 3 ),
        ( name: "WEAPON_STYLE_BLUDGEON", value: 4 ),
        ( name: "WEAPON_STYLE_POLEARM", value: 5 ),
        ( name: "WEAPON_STYLE_STAVE2", value: 6 ),
        ( name: "WEAPON_STYLE_SICKLE", value: 7 ),

        ( name: "WEAPON_STYLE_SHORTSWORD", value: 101 ),
        ( name: "WEAPON_STYLE_AXE", value: 103 ),
        ( name: "WEAPON_STYLE_STAVE", value: 105 ),

      ]
    ),
    "gdata": (
      variables: [
        ( name: "GDATA_DEATH", value: 0 ),
        ( name: "GDATA_DEEPEST", value: 1 ),
        ( name: "GDATA_KILLED", value: 2 ),
        ( name: "GDATA_CROWD", value: 3 ),
        ( name: "GDATA_TURN", value: 4 ),
        ( name: "GDATA_WORLD_X", value: 5 ),
        ( name: "GDATA_WORLD_Y", value: 6 ),
        ( name: "GDATA_DAY_PAST", value: 7 ),
        ( name: "GDATA_RAND_SEED_A", value: 8 ),
        ( name: "GDATA_RAND_SEED_B", value: 9 ),
        ( name: "GDATA_YEAR", value: 10 ),
        ( name: "GDATA_MONTH", value: 11 ),
        ( name: "GDATA_DAY", value: 12 ),
        ( name: "GDATA_HOUR", value: 13 ),
        ( name: "GDATA_MIN", value: 14 ),
        ( name: "GDATA_SEC", value: 15 ),
        ( name: "GDATA_COUNT_SHOP", value: 16 ),
        ( name: "GDATA_WEATHER", value: 17 ),
        ( name: "GDATA_NEXT_WEATHER", value: 18 ),
        ( name: "GDATA_AREA_PREV", value: 19 ),
        ( name: "GDATA_AREA", value: 20 ),
        ( name: "GDATA_SUB_AREA", value: 21 ),
        ( name: "GDATA_LEVEL", value: 22 ),
        ( name: "GDATA_SUB_LEVEL", value: 23 ),
        ( name: "GDATA_HOME_LEVEL", value: 24 ),
        ( name: "GDATA_ABSORB_CHARGE", value: 25 ),
        ( name: "GDATA_LEVEL_START_ON", value: 26 ),
        ( name: "GDATA_COUNT_SHELTER", value: 27 ),
        ( name: "GDATA_TRAVEL_SPEED", value: 28 ),
        ( name: "GDATA_RES_ETHERWIND", value: 29 ),
        ( name: "GDATA_RUN", value: 30 ),
        ( name: "GDATA_RUN_LEFT", value: 31 ),
        ( name: "GDATA_RUN_UP", value: 32 ),
        ( name: "GDATA_RUN_RIGHT", value: 33 ),
        ( name: "GDATA_RUN_DOWN", value: 34 ),
        ( name: "GDATA_RUN_DIR", value: 35 ),
        ( name: "GDATA_STORY_BOOKMARK", value: 36 ),
        ( name: "GDATA_LIGHT_SOURCE", value: 37 ),
        ( name: "GDATA_QUIT_Y", value: 38 ),
        ( name: "GDATA_LEARNED", value: 39 ),

        ( name: "STARTING_GDATA_SHORTCUT", value: 40 ),
        ( name: "RANGE_GDATA_SHORTCUT", value: 20, exclude: true ),

        ( name: "GDATA_LAST_EDGE_X", value: 60 ),
        ( name: "GDATA_LAST_EDGE_Y", value: 61 ),
        ( name: "GDATA_WORLD_TILE", value: 62 ),
        ( name: "GDATA_RETURN", value: 63 ),
        ( name: "GDATA_TELEPORT_AREA", value: 64 ),
        ( name: "GDATA_TELEPORT_LEVEL", value: 65 ),
        ( name: "GDATA_RETURN_AREA", value: 66 ),
        ( name: "GDATA_RETURN_LEVEL", value: 67 ),
        ( name: "GDATA_RETURN_X", value: 68 ),
        ( name: "GDATA_RETURN_Y", value: 69 ),
        ( name: "GDATA_QUEST", value: 70 ),
        ( name: "GDATA_QUEST_TYPE", value: 71 ),
        ( name: "GDATA_QUEST_REF", value: 72 ),
        ( name: "GDATA_QUEST_STATE", value: 73 ),
        ( name: "GDATA_QUEST_FAME", value: 74 ),
        ( name: "GDATA_CLIENT", value: 75 ),
        ( name: "GDATA_HOME_BASE", value: 76 ),
        ( name: "GDATA_HOME_FURNITURE", value: 77 ),
        ( name: "GDATA_HOME_VALUE", value: 78 ),
        ( name: "GDATA_WORLD_RENEW", value: 79 ),
        ( name: "GDATA_CARGO_WEIGHT", value: 80 ),
        ( name: "GDATA_CARGO_LIMIT_ORG", value: 81 ),
        ( name: "GDATA_CARGO_LIMIT", value: 82 ),
        ( name: "GDATA_RES_WEATHER", value: 83 ),
        ( name: "GDATA_TIME_LIMIT", value: 84 ),
        ( name: "GDATA_CORRUPTION", value: 85 ),
        ( name: "GDATA_USERNPC_COUNT", value: 86 ),
        ( name: "GDATA_COUNT_NOTICE", value: 87 ),
        ( name: "GDATA_NEXT_TRAIN", value: 88 ),
        ( name: "GDATA_LIGHT", value: 89 ),
        ( name: "GDATA_SLEEP", value: 90 ),
        ( name: "GDATA_ROW_ACT", value: 91 ),
        ( name: "GDATA_SLEEP_EXP", value: 92 ),
        ( name: "GDATA_TRAIT_POINT", value: 93 ),
        ( name: "GDATA_SCOPE", value: 94 ),
        ( name: "GDATA_WELL_WISH", value: 95 ),
        ( name: "GDATA_VERSION", value: 96 ),
        ( name: "GDATA_HEIR_DEED", value: 97 ),
        ( name: "GDATA_SLEEP_GENE", value: 98 ),
        ( name: "GDATA_NEXT_VOTE", value: 99 ),

        ( name: "STARTING_GDATA_RANK", value: 120, exclude: true ),
        ( name: "GDATA_RANK_ARENA", value: 120 ),
        ( name: "GDATA_RANK_PET_ARENA", value: 121 ),
        ( name: "GDATA_RANK_CRAWLER", value: 122 ),
        ( name: "GDATA_RANK_MUSEUM", value: 123 ),
        ( name: "GDATA_RANK_HOME", value: 124 ),
        ( name: "GDATA_RANK_SHOP", value: 125 ),
        ( name: "GDATA_RANK_VOTE", value: 126 ),
        ( name: "GDATA_RANK_FISHING", value: 127 ),
        ( name: "GDATA_RANK_GUILD", value: 128 ),

        ( name: "STARTING_GDATA_RANK_NORMA", value: 140 ),

        ( name: "GDATA_QUEST_POOL", value: 160 ),

        ( name: "GDATA_COST_HIRE", value: 170 ),
        ( name: "GDATA_MAP_EVENT", value: 171 ),
        ( name: "GDATA_ACTIVATE_PROC", value: 172 ),
        ( name: "GDATA_SENSE_OBJECT", value: 173 ),
        ( name: "GDATA_ADVENTURER_ORACLE", value: 174 ),
        ( name: "GDATA_TEMPORARY_FLAGS", value: 175 ),
        ( name: "GDATA_PIERCING_BONUS", value: 176 ),
        ( name: "GDATA_SKILLBOOK_COOLDOWN", value: 177 ),
        ( name: "GDATA_BILL", value: 179 ),
        ( name: "GDATA_TRAVEL_DISTANCE", value: 180 ),
        ( name: "GDATA_TRAVEL_TIME", value: 181 ),
        ( name: "GDATA_LAST_TOWN", value: 182 ),
        ( name: "GDATA_RIDER", value: 183 ),
        ( name: "GDATA_MAP_VERSION", value: 184 ),
        ( name: "GDATA_GOD_TALK", value: 185 ),
        ( name: "GDATA_VOID_BOSS", value: 186 ),
        ( name: "GDATA_GOD_DETECT", value: 187 ),

        ( name: "STARTING_GDATA_HELP", value: 200 ),

        ( name: "STARTING_GDATA_FLAG", value: 250, exclude: true ),
        (
          name: "GDATA_FLAG_TUTORIAL",
          value: 250,
          code_value: "STARTING_GDATA_FLAG + 0"
        ),
        (
          name: "GDATA_FLAG_MAIN",
          value: 252,
          code_value: "STARTING_GDATA_FLAG + 2"
        ),
        (
          name: "GDATA_FLAG_MAIN_FOOL",
          value: 253,
          code_value: "STARTING_GDATA_FLAG + 3"
        ),
        (
          name: "GDATA_FLAG_MAIN_SAGE",
          value: 254,
          code_value: "STARTING_GDATA_FLAG + 4"
        ),
        (
          name: "GDATA_FLAG_MAIN_KING",
          value: 255,
          code_value: "STARTING_GDATA_FLAG + 5"
        ),
        (
          name: "GDATA_FLAG_CASINO",
          value: 256,
          code_value: "STARTING_GDATA_FLAG + 6"
        ),
        (
          name: "GDATA_FLAG_ALLY",
          value: 257,
          code_value: "STARTING_GDATA_FLAG + 7"
        ),
        (
          name: "GDATA_FLAG_FIRE_GIANT",
          value: 258,
          code_value: "STARTING_GDATA_FLAG + 8"
        ),
        (
          name: "GDATA_FLAG_GIANT_ID",
          value: 259,
          code_value: "STARTING_GDATA_FLAG + 9"
        ),
        (
          name: "GDATA_FLAG_HOLY_WELL",
          value: 260,
          code_value: "STARTING_GDATA_FLAG + 10"
        ),
        (
          name: "GDATA_FLAG_KAMIKAZE",
          value: 261,
          code_value: "STARTING_GDATA_FLAG + 11"
        ),
        (
          name: "GDATA_FLAG_RENEW_DUNGEON",
          value: 262,
          code_value: "STARTING_GDATA_FLAG + 12"
        ),
        (
          name: "GDATA_FLAG_GUILD_MAGE",
          value: 263,
          code_value: "STARTING_GDATA_FLAG + 13"
        ),
        (
          name: "GDATA_FLAG_GUILD_FIGHTER",
          value: 264,
          code_value: "STARTING_GDATA_FLAG + 14"
        ),
        (
          name: "GDATA_FLAG_GUILD_THIEF",
          value: 265,
          code_value: "STARTING_GDATA_FLAG + 15"
        ),
        (
          name: "GDATA_FLAG_GUILD_MAGE_NORMA",
          value: 266,
          code_value: "STARTING_GDATA_FLAG + 16"
        ),
        (
          name: "GDATA_FLAG_GUILD_FIGHTER_NORMA",
          value: 267,
          code_value: "STARTING_GDATA_FLAG + 17"
        ),
        (
          name: "GDATA_FLAG_GUILD_FIGHTER_THIEF",
          value: 268,
          code_value: "STARTING_GDATA_FLAG + 18"
        ),
        (
          name: "GDATA_FLAG_GUILD_THIEF_NORMA",
          value: 269,
          code_value: "STARTING_GDATA_FLAG + 19"
        ),

        (
          name: "GDATA_FLAG_SUB_SLIME",
          value: 450,
          code_value: "STARTING_GDATA_FLAG + 200"
        ),
        (
          name: "GDATA_FLAG_SUB_ROGUE",
          value: 451,
          code_value: "STARTING_GDATA_FLAG + 201"
        ),
        (
          name: "GDATA_FLAG_SUB_NIGHTMARE",
          value: 452,
          code_value: "STARTING_GDATA_FLAG + 202"
        ),
        (
          name: "GDATA_FLAG_SUB_MOTHER",
          value: 453,
          code_value: "STARTING_GDATA_FLAG + 203"
        ),
        (
          name: "GDATA_FLAG_SUB_WIFE",
          value: 454,
          code_value: "STARTING_GDATA_FLAG + 204"
        ),
        (
          name: "GDATA_FLAG_SUB_DOG",
          value: 455,
          code_value: "STARTING_GDATA_FLAG + 205"
        ),
        (
          name: "GDATA_FLAG_SUB_CAT",
          value: 456,
          code_value: "STARTING_GDATA_FLAG + 206"
        ),
        (
          name: "GDATA_FLAG_SUB_WAR",
          value: 457,
          code_value: "STARTING_GDATA_FLAG + 207"
        ),
        (
          name: "GDATA_FLAG_SUB_YEEK",
          value: 458,
          code_value: "STARTING_GDATA_FLAG + 208"
        ),
        (
          name: "GDATA_FLAG_SUB_KAMIKAZE",
          value: 459,
          code_value: "STARTING_GDATA_FLAG + 209"
        ),
        (
          name: "GDATA_FLAG_SUB_MIAS_DREAM",
          value: 460,
          code_value: "STARTING_GDATA_FLAG + 210"
        ),
        (
          name: "GDATA_FLAG_SUB_VEIN",
          value: 461,
          code_value: "STARTING_GDATA_FLAG + 211"
        ),
        (
          name: "GDATA_FLAG_SUB_PYRAMID",
          value: 462,
          code_value: "STARTING_GDATA_FLAG + 212"
        ),
        (
          name: "GDATA_FLAG_SUB_NUKE",
          value: 463,
          code_value: "STARTING_GDATA_FLAG + 213"
        ),
        (
          name: "GDATA_FLAG_SUB_BIOLOGIST",
          value: 464,
          code_value: "STARTING_GDATA_FLAG + 214"
        ),
        (
          name: "GDATA_FLAG_SUB_SEWER",
          value: 465,
          code_value: "STARTING_GDATA_FLAG + 215"
        ),
        (
          name: "GDATA_FLAG_SUB_GUILD_MAGE",
          value: 466,
          code_value: "STARTING_GDATA_FLAG + 216"
        ),
        (
          name: "GDATA_FLAG_SUB_GUILD_FIGHTER",
          value: 467,
          code_value: "STARTING_GDATA_FLAG + 217"
        ),
        (
          name: "GDATA_FLAG_SUB_GUILD_THIEF",
          value: 468,
          code_value: "STARTING_GDATA_FLAG + 218"
        ),
        (
          name: "GDATA_FLAG_SUB_MAGE_1",
          value: 469,
          code_value: "STARTING_GDATA_FLAG + 219"
        ),
        (
          name: "GDATA_FLAG_SUB_FIGHTER_1",
          value: 470,
          code_value: "STARTING_GDATA_FLAG + 220"
        ),
        (
          name: "GDATA_FLAG_SUB_THIEF_1",
          value: 471,
          code_value: "STARTING_GDATA_FLAG + 221"
        ),
        (
          name: "GDATA_FLAG_SUB_MINOTAUR",
          value: 472,
          code_value: "STARTING_GDATA_FLAG + 222"
        ),
        (
          name: "GDATA_FLAG_SUB_DADDY",
          value: 473,
          code_value: "STARTING_GDATA_FLAG + 223"
        ),
        (
          name: "GDATA_FLAG_SUB_KANEDA",
          value: 474,
          code_value: "STARTING_GDATA_FLAG + 224"
        ),

        ( name: "STARTING_GDATA_CORRUPTION", value: 700, exclude: true ),

        ( name: "STARTING_GDATA_DISPLAY_SKILL", value: 750, exclude: true ),

        ( name: "GDATA_ETHER_SPEED", value: 800 ),
        ( name: "GDATA_TIME_STOP_TIME", value: 801 ),
        ( name: "GDATA_EX_BATTLE_WIN", value: 802 ),
        ( name: "GDATA_EX_BATTLE_MAX_LVL", value: 803 ),
        ( name: "GDATA_NEXT_UPLOAD", value: 804 ),
        ( name: "GDATA_PLAY_TIME", value: 805 ),
        ( name: "GDATA_LAST_ETHER", value: 806 ),
        ( name: "GDATA_GOD_RANK", value: 807 ),
        ( name: "GDATA_EQUIP_CHANGE", value: 808 ),
        ( name: "GDATA_DMG_TYPE", value: 809 ),
        ( name: "GDATA_SISTER_KILLED", value: 810 ),
        ( name: "GDATA_SISTER_SAVED", value: 811 ),
        ( name: "GDATA_SISTER_REWARD", value: 812 ),
        ( name: "GDATA_DECK", value: 813 ),
        ( name: "GDATA_GUEST", value: 814 ),
        ( name: "GDATA_CAPITAL", value: 815 ),

        ( name: "GDATA_BASIC_TAX", value: 820 ),

        ( name: "GDATA_GUILD_TRAINER", value: 825 ),
        ( name: "GDATA_ITEM_TURN", value: 826 ),
        ( name: "GDATA_NEW_FEAT", value: 827 ),
        ( name: "GDATA_WIZARD", value: 828 ),
        ( name: "GDATA_TOKEN", value: 829 ),
        ( name: "GDATA_DECK_SIZE", value: 830 ),

        ( name: "GDATA_WORLD", value: 850 ),
        ( name: "GDATA_WALLET", value: 851 ),
      ]
    ),
    "gdatan": (
      variables: [
        ( name: "GDATAN_TEAM1", value: 0 ),
        ( name: "GDATAN_TEAM2", value: 1 ),
      ]
    ),
    "rank": (
      variables: [
        ( name: "RANK_ARENA", value: 0 ),
        ( name: "RANK_PET_ARENA", value: 1 ),
        ( name: "RANK_CRAWLER", value: 2 ),
        ( name: "RANK_MUSEUM", value: 3 ),
        ( name: "RANK_HOME", value: 4 ),
        ( name: "RANK_SHOP", value: 5 ),
        ( name: "RANK_VOTE", value: 6 ),
        ( name: "RANK_FISHING", value: 7 ),
        ( name: "RANK_GUILD", value: 8 ),
        ( name: "MAX_RANK", value: 9, exclude: true ),
      ]
    ),
    "weather": (
      variables: [
        ( name: "WEATHER_CLEAR", value: 0 ),
        ( name: "WEATHER_ETHER", value: 1 ),
        ( name: "WEATHER_SNOW", value: 2 ),
        ( name: "WEATHER_RAIN", value: 3 ),
        ( name: "WEATHER_HARD_RAIN", value: 4 ),
      ]
    ),
    "item_id": (
      variables: [
        ( name: "ITEM_ID_DUMMY", value: 0 ),
        ( name: "ITEM_ID_LONG_SWORD", value: 1 ),
        ( name: "ITEM_ID_DAGGER", value: 2 ),
        ( name: "ITEM_ID_HAND_AXE", value: 3 ),
        ( name: "ITEM_ID_CLUB", value: 4 ),
        ( name: "ITEM_ID_MAGIC_HAT", value: 5 ),
        ( name: "ITEM_ID_FAIRY_HAT", value: 6 ),
        ( name: "ITEM_ID_BREASTPLATE", value: 7 ),
        ( name: "ITEM_ID_ROBE", value: 8 ),
        ( name: "ITEM_ID_DECORATED_GLOVES", value: 9 ),
        ( name: "ITEM_ID_THICK_GAUNTLETS", value: 10 ),
        ( name: "ITEM_ID_HEAVY_BOOTS", value: 11 ),
        ( name: "ITEM_ID_COMPOSITE_BOOTS", value: 12 ),
        ( name: "ITEM_ID_DECORATIVE_RING", value: 13 ),
        ( name: "ITEM_ID_SCROLL_IDENTIFY", value: 14 ),
        ( name: "ITEM_ID_SCROLL_ORACLE", value: 15 ),
        ( name: "ITEM_ID_SCROLL_TELEPORTATION", value: 16 ),
        ( name: "ITEM_ID_SCROLL_INCOGNITO", value: 17 ),
        ( name: "ITEM_ID_ROD_IDENTIFY", value: 18 ),
        ( name: "ITEM_ID_ROD_TELEPORTATION", value: 19 ),
        ( name: "ITEM_ID_SPELLBOOK_TELEPORTATION", value: 20 ),
        ( name: "ITEM_ID_SPELLBOOK_IDENTIFY", value: 21 ),
        ( name: "ITEM_ID_SPELLBOOK_UNCURSE", value: 22 ),
        ( name: "ITEM_ID_BOOK", value: 23 ),
        ( name: "ITEM_ID_RED_BOOK", value: 24 ),
        ( name: "ITEM_ID_BUGGED_BOOK", value: 25 ),
        ( name: "ITEM_ID_BOTTLE_DIRTY_WATER", value: 26 ),
        ( name: "ITEM_ID_POTION_BLINDNESS", value: 27 ),
        ( name: "ITEM_ID_POTION_CONFUSION", value: 28 ),
        ( name: "ITEM_ID_POTION_PARALYSIS", value: 29 ),
        ( name: "ITEM_ID_SLEEPING_DRUG", value: 30 ),
        ( name: "ITEM_ID_BOTTLE_CRIM_ALE", value: 31 ),
        ( name: "ITEM_ID_SPELLBOOK_ICE_BOLT", value: 32 ),
        ( name: "ITEM_ID_SPELLBOOK_FIRE_BOLT", value: 33 ),
        ( name: "ITEM_ID_SPELLBOOK_LIGHTNING_BOLT", value: 34 ),
        ( name: "ITEM_ID_EARTH_CRYSTAL", value: 35 ),
        ( name: "ITEM_ID_MANA_CRYSTAL", value: 36 ),
        ( name: "ITEM_ID_SUN_CRYSTAL", value: 37 ),
        ( name: "ITEM_ID_GOLD_BAR", value: 38 ),
        ( name: "ITEM_ID_RAW_RUBYNUS_ORE", value: 39 ),
        ( name: "ITEM_ID_MICA_ORE", value: 40 ),
        ( name: "ITEM_ID_RAW_EMERALD_ORE", value: 41 ),
        ( name: "ITEM_ID_RAW_DIAMOND_ORE", value: 42 ),
        ( name: "ITEM_ID_WOOD_CHIP", value: 43 ),
        ( name: "ITEM_ID_JUNK_STONE", value: 44 ),
        ( name: "ITEM_ID_GARBAGE", value: 45 ),
        ( name: "ITEM_ID_BROKEN_VASE", value: 46 ),
        ( name: "ITEM_ID_WASHINGS", value: 47 ),
        ( name: "ITEM_ID_BRAZIER_STAND", value: 48 ),
        ( name: "ITEM_ID_FLAG", value: 49 ),
        ( name: "ITEM_ID_BROKEN_SWORD", value: 50 ),
        ( name: "ITEM_ID_BONE_FRAGMENT", value: 51 ),
        ( name: "ITEM_ID_SKELETON", value: 52 ),
        ( name: "ITEM_ID_TOMBSTONE", value: 53 ),
        ( name: "ITEM_ID_GOLD_PIECE", value: 54 ),
        ( name: "ITEM_ID_PLATINUM_COIN", value: 55 ),
        ( name: "ITEM_ID_DIABLOS", value: 56 ),
        ( name: "ITEM_ID_ZANTETSUKEN", value: 57 ),
        ( name: "ITEM_ID_LONG_BOW", value: 58 ),
        ( name: "ITEM_ID_KNIGHT_SHIELD", value: 59 ),
        ( name: "ITEM_ID_PISTOL", value: 60 ),
        ( name: "ITEM_ID_ARROW", value: 61 ),
        ( name: "ITEM_ID_BULLET", value: 62 ),
        ( name: "ITEM_ID_SCYTHE_OF_THE_VOID", value: 63 ),
        ( name: "ITEM_ID_MOURNBLADE", value: 64 ),
        ( name: "ITEM_ID_LIGHT_CLOAK", value: 65 ),
        ( name: "ITEM_ID_GIRDLE", value: 66 ),
        ( name: "ITEM_ID_DECORATIVE_AMULET", value: 67 ),
        ( name: "ITEM_ID_POTION_CURE_MINOR_WOUND", value: 68 ),
        ( name: "ITEM_ID_POTION_CURE_MAJOR_WOUND", value: 69 ),
        ( name: "ITEM_ID_POTION_CURE_CRITICAL_WOUND", value: 70 ),
        ( name: "ITEM_ID_POTION_VITALITY", value: 71 ),
        ( name: "ITEM_ID_POTION_HEALER", value: 72 ),
        ( name: "ITEM_ID_RAGNAROK", value: 73 ),
        ( name: "ITEM_ID_POTION_HEALER_ODINA", value: 74 ),
        ( name: "ITEM_ID_POTION_WHITE_HEALER_ERIS", value: 75 ),
        ( name: "ITEM_ID_POTION_SACRED_HEALER_JURE", value: 76 ),
        ( name: "ITEM_ID_ROUND_CHAIR", value: 77 ),
        ( name: "ITEM_ID_BOOKSHELF", value: 78 ),
        ( name: "ITEM_ID_LUXURY_DRAWER", value: 79 ),
        ( name: "ITEM_ID_CHEAP_BED", value: 80 ),
        ( name: "ITEM_ID_PLUSH_DOLL", value: 81 ),
        ( name: "ITEM_ID_TOY", value: 82 ),
        ( name: "ITEM_ID_MODERN_TABLE", value: 83 ),
        ( name: "ITEM_ID_DINING_TABLE", value: 84 ),
        ( name: "ITEM_ID_ARMOR", value: 85 ),
        ( name: "ITEM_ID_GOODS", value: 86 ),
        ( name: "ITEM_ID_VARIOUS_ACCESSORIES", value: 87 ),
        ( name: "ITEM_ID_GRAND_PIANO", value: 88 ),
        ( name: "ITEM_ID_BAR_TABLE_ALPHA", value: 89 ),
        ( name: "ITEM_ID_BAR_TABLE_BETA", value: 90 ),
        ( name: "ITEM_ID_BARREL", value: 91 ),
        ( name: "ITEM_ID_STYLISH_CHAIR", value: 92 ),
        ( name: "ITEM_ID_PICKAXE", value: 93 ),
        ( name: "ITEM_ID_LANTERN", value: 94 ),
        ( name: "ITEM_ID_ORNAMENTAL_ARMOR", value: 95 ),
        ( name: "ITEM_ID_ANVIL", value: 96 ),
        ( name: "ITEM_ID_SEALED_VASE", value: 97 ),
        ( name: "ITEM_ID_OPEN_VASE", value: 98 ),
        ( name: "ITEM_ID_WRITING_DESK", value: 99 ),
        ( name: "ITEM_ID_POTION_RACK", value: 100 ),
        ( name: "ITEM_ID_SQUARE_CHAIR", value: 101 ),
        ( name: "ITEM_ID_CHEAP_CHAIR", value: 102 ),
        ( name: "ITEM_ID_CUPBOARD", value: 103 ),
        ( name: "ITEM_ID_SHED", value: 104 ),
        ( name: "ITEM_ID_TIDY_BOOKSHELF", value: 105 ),
        ( name: "ITEM_ID_STORAGE_RACK", value: 106 ),
        ( name: "ITEM_ID_VARIETY_TOOLS", value: 107 ),
        ( name: "ITEM_ID_VARIETY_GOODS", value: 108 ),
        ( name: "ITEM_ID_WELL", value: 109 ),
        ( name: "ITEM_ID_VARIETY_CLOTHES", value: 110 ),
        ( name: "ITEM_ID_SMELTER", value: 111 ),
        ( name: "ITEM_ID_OVEN", value: 112 ),
        ( name: "ITEM_ID_SIGN", value: 113 ),
        ( name: "ITEM_ID_SIGNPOST", value: 114 ),
        ( name: "ITEM_ID_NOTICE_BOARD", value: 115 ),
        ( name: "ITEM_ID_SPELLBOOK_MINOR_TELEPORTATION", value: 116 ),
        ( name: "ITEM_ID_EMPTY_BASKET", value: 117 ),
        ( name: "ITEM_ID_SPELLBOOK_SUMMON_MONSTERS", value: 118 ),
        ( name: "ITEM_ID_ROD_CURE_MINOR_WOUND", value: 119 ),
        ( name: "ITEM_ID_ROD_MAGIC_MISSILE", value: 120 ),
        ( name: "ITEM_ID_ROD_SUMMON_MONSTERS", value: 121 ),
        ( name: "ITEM_ID_ROD_ICE_BOLT", value: 122 ),
        ( name: "ITEM_ID_ROD_FIRE_BOLT", value: 123 ),
        ( name: "ITEM_ID_BREAD_DISPLAY", value: 124 ),
        ( name: "ITEM_ID_ROD_LIFE", value: 125 ),
        ( name: "ITEM_ID_BEAKER", value: 126 ),
        ( name: "ITEM_ID_ALCHEMY_TOOLS", value: 127 ),
        ( name: "ITEM_ID_MAGIC_CIRCLE", value: 128 ),
        ( name: "ITEM_ID_SMALL_DECORATIVE_PLANT", value: 129 ),
        ( name: "ITEM_ID_BANKS_ROSE", value: 130 ),
        ( name: "ITEM_ID_LARGE_DECORATIVE_PLANT", value: 131 ),
        ( name: "ITEM_ID_SAGE", value: 132 ),
        ( name: "ITEM_ID_GAZANIA", value: 133 ),
        ( name: "ITEM_ID_NERINE", value: 134 ),
        ( name: "ITEM_ID_ANEMONE", value: 135 ),
        ( name: "ITEM_ID_FOXTAIL_GRASS", value: 136 ),
        ( name: "ITEM_ID_CARNATION", value: 137 ),
        ( name: "ITEM_ID_PLANT_ADORNED_PILLAR", value: 138 ),
        ( name: "ITEM_ID_FLOWER_ADORNED_PILLAR", value: 139 ),
        ( name: "ITEM_ID_PAINTING_TOOLS", value: 140 ),
        ( name: "ITEM_ID_MAP", value: 141 ),
        ( name: "ITEM_ID_FOOD_MAKER", value: 142 ),
        ( name: "ITEM_ID_BOWS", value: 143 ),
        ( name: "ITEM_ID_WEAPONS", value: 144 ),
        ( name: "ITEM_ID_DECORATED_CLOTHING", value: 145 ),
        ( name: "ITEM_ID_DECORATED_ARMOR", value: 146 ),
        ( name: "ITEM_ID_ARMOR_STATUE", value: 147 ),
        ( name: "ITEM_ID_DISORDERLY_BOOKS", value: 148 ),
        ( name: "ITEM_ID_LOT_BOOKS", value: 149 ),
        ( name: "ITEM_ID_CRAFT_RACK", value: 150 ),
        ( name: "ITEM_ID_CRAFT_BOOK_SHELF", value: 151 ),
        ( name: "ITEM_ID_LOT_ALCOHOLS", value: 152 ),
        ( name: "ITEM_ID_KITCHEN", value: 153 ),
        ( name: "ITEM_ID_SINK", value: 154 ),
        ( name: "ITEM_ID_KITCHEN_OVEN", value: 155 ),
        ( name: "ITEM_ID_NARROW_DINING_TABLE", value: 156 ),
        ( name: "ITEM_ID_ELEGANT_TABLE", value: 157 ),
        ( name: "ITEM_ID_GORGEOUS_CANDLESTICK", value: 158 ),
        ( name: "ITEM_ID_SIMPLE_SHELF", value: 159 ),
        ( name: "ITEM_ID_SEWING_KIT", value: 160 ),
        ( name: "ITEM_ID_CARPENTERS_TOOL", value: 161 ),
        ( name: "ITEM_ID_MESSY_CLOTH", value: 162 ),
        ( name: "ITEM_ID_SILK_CLOTH", value: 163 ),
        ( name: "ITEM_ID_COLLAPSED_GRAVE", value: 164 ),
        ( name: "ITEM_ID_CRUMBLED_GRAVE", value: 165 ),
        ( name: "ITEM_ID_GRAVE_ORNAMENTED_WITH_FLOWERS", value: 166 ),
        ( name: "ITEM_ID_BRAND_NEW_GRAVE", value: 167 ),
        ( name: "ITEM_ID_SOLEMN_TOMB", value: 168 ),
        ( name: "ITEM_ID_ANCIENT_TOMB", value: 169 ),
        ( name: "ITEM_ID_OLD_GRAVE", value: 170 ),
        ( name: "ITEM_ID_ALTAR", value: 171 ),
        ( name: "ITEM_ID_CEREMONY_ALTAR", value: 172 ),
        ( name: "ITEM_ID_FOUNTAIN", value: 173 ),
        ( name: "ITEM_ID_BUNK_BED", value: 174 ),
        ( name: "ITEM_ID_ROD_LIGHTNING_BOLT", value: 175 ),
        ( name: "ITEM_ID_ROD_SLOW", value: 176 ),
        ( name: "ITEM_ID_QUWAPANA", value: 177 ),
        ( name: "ITEM_ID_ALOE", value: 178 ),
        ( name: "ITEM_ID_EDIBLE_WILD_PLANT", value: 179 ),
        ( name: "ITEM_ID_APPLE", value: 180 ),
        ( name: "ITEM_ID_GRAPE", value: 181 ),
        ( name: "ITEM_ID_KIWI", value: 182 ),
        ( name: "ITEM_ID_CHERRY", value: 183 ),
        ( name: "ITEM_ID_GUAVA", value: 184 ),
        ( name: "ITEM_ID_CARROT", value: 185 ),
        ( name: "ITEM_ID_RADISH", value: 186 ),
        ( name: "ITEM_ID_SWEET_POTATO", value: 187 ),
        ( name: "ITEM_ID_LETTUCE", value: 188 ),
        ( name: "ITEM_ID_DISH", value: 189 ),
        ( name: "ITEM_ID_IMO", value: 190 ),
        ( name: "ITEM_ID_API_NUT", value: 191 ),
        ( name: "ITEM_ID_STRAWBERRY", value: 192 ),
        ( name: "ITEM_ID_HEALTHY_LEAF", value: 193 ),
        ( name: "ITEM_ID_RAINBOW_FRUIT", value: 194 ),
        ( name: "ITEM_ID_QUCCHE", value: 195 ),
        ( name: "ITEM_ID_TANGERINE", value: 196 ),
        ( name: "ITEM_ID_LEMON", value: 197 ),
        ( name: "ITEM_ID_GREEN_PEA", value: 198 ),
        ( name: "ITEM_ID_SQUASH", value: 199 ),
        ( name: "ITEM_ID_MELON", value: 200 ),
        ( name: "ITEM_ID_LECCHO", value: 201 ),
        ( name: "ITEM_ID_ROD_MAGIC_MAPPING", value: 202 ),
        ( name: "ITEM_ID_ROD_CURE", value: 203 ),
        ( name: "ITEM_ID_CORPSE", value: 204 ),
        ( name: "ITEM_ID_BOTTLE_WHISKY", value: 205 ),
        ( name: "ITEM_ID_ETHER_DAGGER", value: 206 ),
        ( name: "ITEM_ID_BOW_OF_VINDALE", value: 207 ),
        ( name: "ITEM_ID_WORTHLESS_FAKE_GOLD_BAR", value: 208 ),
        ( name: "ITEM_ID_SCROLL_UNCURSE", value: 209 ),
        ( name: "ITEM_ID_STONE", value: 210 ),
        ( name: "ITEM_ID_SICKLE", value: 211 ),
        ( name: "ITEM_ID_STAFF", value: 212 ),
        ( name: "ITEM_ID_SPEAR", value: 213 ),
        ( name: "ITEM_ID_ORE_PIECE", value: 214 ),
        ( name: "ITEM_ID_LOT_EMPTY_BOTTLES", value: 215 ),
        ( name: "ITEM_ID_BASKET", value: 216 ),
        ( name: "ITEM_ID_EMPTY_BOWL", value: 217 ),
        ( name: "ITEM_ID_BOWL", value: 218 ),
        ( name: "ITEM_ID_TIGHT_ROPE", value: 219 ),
        ( name: "ITEM_ID_DEAD_FISH", value: 220 ),
        ( name: "ITEM_ID_STRAW", value: 221 ),
        ( name: "ITEM_ID_ANIMAL_BONE", value: 222 ),
        ( name: "ITEM_ID_POT", value: 223 ),
        ( name: "ITEM_ID_KATANA", value: 224 ),
        ( name: "ITEM_ID_SCIMITAR", value: 225 ),
        ( name: "ITEM_ID_BATTLE_AXE", value: 226 ),
        ( name: "ITEM_ID_HAMMER", value: 227 ),
        ( name: "ITEM_ID_TRIDENT", value: 228 ),
        ( name: "ITEM_ID_LONG_STAFF", value: 229 ),
        ( name: "ITEM_ID_SHORT_BOW", value: 230 ),
        ( name: "ITEM_ID_MACHINE_GUN", value: 231 ),
        ( name: "ITEM_ID_CLAYMORE", value: 232 ),
        ( name: "ITEM_ID_RATION", value: 233 ),
        ( name: "ITEM_ID_BARDISH", value: 234 ),
        ( name: "ITEM_ID_HALBERD", value: 235 ),
        ( name: "ITEM_ID_SCROLL_RETURN", value: 236 ),
        ( name: "ITEM_ID_FIGURINE_WARRIOR", value: 237 ),
        ( name: "ITEM_ID_FIGURINE_SWORD", value: 238 ),
        ( name: "ITEM_ID_BEJEWELED_CHEST", value: 239 ),
        ( name: "ITEM_ID_CHEST", value: 240 ),
        ( name: "ITEM_ID_SAFE", value: 241 ),
        ( name: "ITEM_ID_SCROLL_MAGICAL_MAP", value: 242 ),
        ( name: "ITEM_ID_SCROLL_GAIN_ATTRIBUTE", value: 243 ),
        ( name: "ITEM_ID_SCROLL_WONDER", value: 244 ),
        ( name: "ITEM_ID_SCROLL_MINOR_TELEPORTATION", value: 245 ),
        ( name: "ITEM_ID_SPELLBOOK_MAGIC_MAPPING", value: 246 ),
        ( name: "ITEM_ID_SPELLBOOK_ORACLE", value: 247 ),
        ( name: "ITEM_ID_SPELLBOOK_RETURN", value: 248 ),
        ( name: "ITEM_ID_SPELLBOOK_CURE_MINOR_WOUND", value: 249 ),
        ( name: "ITEM_ID_SPELLBOOK_CURE_CRITICAL_WOUND", value: 250 ),
        ( name: "ITEM_ID_SPELLBOOK_CURE_ERIS", value: 251 ),
        ( name: "ITEM_ID_SPELLBOOK_CURE_JURE", value: 252 ),
        ( name: "ITEM_ID_BOTTLE_BEER", value: 253 ),
        ( name: "ITEM_ID_HORN", value: 254 ),
        ( name: "ITEM_ID_CAMPFIRE", value: 255 ),
        ( name: "ITEM_ID_PORTABLE_COOKING_TOOL", value: 256 ),
        ( name: "ITEM_ID_SPELLBOOK_MAGIC_ARROW", value: 257 ),
        ( name: "ITEM_ID_STICK_BREAD", value: 258 ),
        ( name: "ITEM_ID_RAW_NOODLE", value: 259 ),
        ( name: "ITEM_ID_SACK_FLOUR", value: 260 ),
        ( name: "ITEM_ID_BOMB_FISH", value: 261 ),
        ( name: "ITEM_ID_POISON", value: 262 ),
        ( name: "ITEM_ID_SPELLBOOK_NETHER_EYE", value: 263 ),
        ( name: "ITEM_ID_SPELLBOOK_CHAOS_EYE", value: 264 ),
        ( name: "ITEM_ID_SPELLBOOK_NERVE_EYE", value: 265 ),
        ( name: "ITEM_ID_WAKIZASHI", value: 266 ),
        ( name: "ITEM_ID_SPELLBOOK_DARKNESS_BEAM", value: 267 ),
        ( name: "ITEM_ID_SPELLBOOK_ILLUSION_BEAM", value: 268 ),
        ( name: "ITEM_ID_SPELLBOOK_ICE_BALL", value: 269 ),
        ( name: "ITEM_ID_SPELLBOOK_FIRE_BALL", value: 270 ),
        ( name: "ITEM_ID_SPELLBOOK_SOUND_BALL", value: 271 ),
        ( name: "ITEM_ID_SPELLBOOK_CHAOS_BALL", value: 272 ),
        ( name: "ITEM_ID_FIRE_WOOD", value: 273 ),
        ( name: "ITEM_ID_SCARECROW", value: 274 ),
        ( name: "ITEM_ID_BROOM", value: 275 ),
        ( name: "ITEM_ID_LONG_PILLAR", value: 276 ),
        ( name: "ITEM_ID_BROKEN_PILLAR", value: 277 ),
        ( name: "ITEM_ID_STREET_LAMP", value: 278 ),
        ( name: "ITEM_ID_WATER_TUB", value: 279 ),
        ( name: "ITEM_ID_COMFORTABLE_TABLE", value: 280 ),
        ( name: "ITEM_ID_INNER_TUBE", value: 281 ),
        ( name: "ITEM_ID_MYSTERIOUS_MAP", value: 282 ),
        ( name: "ITEM_ID_SUITCASE", value: 283 ),
        ( name: "ITEM_ID_WALLET", value: 284 ),
        ( name: "ITEM_ID_POTION_RESTORE_BODY", value: 285 ),
        ( name: "ITEM_ID_POTION_RESTORE_SPIRIT", value: 286 ),
        ( name: "ITEM_ID_POTION_POTENTIAL", value: 287 ),
        ( name: "ITEM_ID_SCROLL_CURSE", value: 288 ),
        ( name: "ITEM_ID_SPELLBOOK_WISHING", value: 289 ),
        ( name: "ITEM_ID_ROD_WISHING", value: 290 ),
        ( name: "ITEM_ID_WELL_KEPT_ARMOR", value: 291 ),
        ( name: "ITEM_ID_RACK_GOODS", value: 292 ),
        ( name: "ITEM_ID_RACK_ACCESSORIES", value: 293 ),
        ( name: "ITEM_ID_TOWEL", value: 294 ),
        ( name: "ITEM_ID_RAGGED_TABLE", value: 295 ),
        ( name: "ITEM_ID_CABINET", value: 296 ),
        ( name: "ITEM_ID_LUXURY_BED", value: 297 ),
        ( name: "ITEM_ID_VASE", value: 298 ),
        ( name: "ITEM_ID_HIGH_GRADE_DRESSER", value: 299 ),
        ( name: "ITEM_ID_NEAT_BAR_TABLE", value: 300 ),
        ( name: "ITEM_ID_LARGE_BOUQUET", value: 301 ),
        ( name: "ITEM_ID_CLOTHES_CHEST", value: 302 ),
        ( name: "ITEM_ID_GIANT_BED", value: 303 ),
        ( name: "ITEM_ID_PLAIN_BED", value: 304 ),
        ( name: "ITEM_ID_COFFIN", value: 305 ),
        ( name: "ITEM_ID_FOOD_PROCESSOR", value: 306 ),
        ( name: "ITEM_ID_SOFT_BED", value: 307 ),
        ( name: "ITEM_ID_CHEAP_RACK", value: 308 ),
        ( name: "ITEM_ID_DRESSER", value: 309 ),
        ( name: "ITEM_ID_CLEAN_BED", value: 310 ),
        ( name: "ITEM_ID_BATHTUB", value: 311 ),
        ( name: "ITEM_ID_PACHISURO_MACHINE", value: 312 ),
        ( name: "ITEM_ID_CASINO_TABLE", value: 313 ),
        ( name: "ITEM_ID_SLOT_MACHINE", value: 314 ),
        ( name: "ITEM_ID_DARTS_BOARD", value: 315 ),
        ( name: "ITEM_ID_BIG_FOLIAGE_PLANT", value: 316 ),
        ( name: "ITEM_ID_OLD_SHELF", value: 317 ),
        ( name: "ITEM_ID_OLD_BOOKSHELF", value: 318 ),
        ( name: "ITEM_ID_CHEAP_BED2", value: 319 ),
        ( name: "ITEM_ID_CHEAP_TABLE", value: 320 ),
        ( name: "ITEM_ID_NEAT_RACK", value: 321 ),
        ( name: "ITEM_ID_SIMPLE_DRESSER", value: 322 ),
        ( name: "ITEM_ID_BIG_CUPBOARD", value: 323 ),
        ( name: "ITEM_ID_SACRED_ALTAR", value: 324 ),
        ( name: "ITEM_ID_COMFORTABLE_BED", value: 325 ),
        ( name: "ITEM_ID_SIMPLE_RACK", value: 326 ),
        ( name: "ITEM_ID_WIDE_CHAIR", value: 327 ),
        ( name: "ITEM_ID_UPRIGHT_PIANO", value: 328 ),
        ( name: "ITEM_ID_STATUE_CROSS", value: 329 ),
        ( name: "ITEM_ID_STUMP", value: 330 ),
        ( name: "ITEM_ID_DRESS", value: 331 ),
        ( name: "ITEM_ID_TABLE", value: 332 ),
        ( name: "ITEM_ID_TRAVELERS_FOOD", value: 333 ),
        ( name: "ITEM_ID_THRONE", value: 334 ),
        ( name: "ITEM_ID_GOLDEN_PEDESTAL", value: 335 ),
        ( name: "ITEM_ID_GOLDEN_STATUE", value: 336 ),
        ( name: "ITEM_ID_SKIN", value: 337 ),
        ( name: "ITEM_ID_BLOOD", value: 338 ),
        ( name: "ITEM_ID_EYE", value: 339 ),
        ( name: "ITEM_ID_HEART", value: 340 ),
        ( name: "ITEM_ID_BONE", value: 341 ),
        ( name: "ITEM_ID_FISHING_POLE", value: 342 ),
        ( name: "ITEM_ID_RUNE", value: 343 ),
        ( name: "ITEM_ID_DEED", value: 344 ),
        ( name: "ITEM_ID_MOONFISH", value: 345 ),
        ( name: "ITEM_ID_SARDINE", value: 346 ),
        ( name: "ITEM_ID_FLATFISH", value: 347 ),
        ( name: "ITEM_ID_MANBOO", value: 348 ),
        ( name: "ITEM_ID_SEABREAM", value: 349 ),
        ( name: "ITEM_ID_SALMON", value: 350 ),
        ( name: "ITEM_ID_GLOBEFISH", value: 351 ),
        ( name: "ITEM_ID_TUNA", value: 352 ),
        ( name: "ITEM_ID_CUTLASSFISH", value: 353 ),
        ( name: "ITEM_ID_SANDBORER", value: 354 ),
        ( name: "ITEM_ID_GLOVES_OF_VESDA", value: 355 ),
        ( name: "ITEM_ID_BLOOD_MOON", value: 356 ),
        ( name: "ITEM_ID_RING_OF_STEEL_DRAGON", value: 357 ),
        ( name: "ITEM_ID_STAFF_OF_INSANITY", value: 358 ),
        ( name: "ITEM_ID_RANKIS", value: 359 ),
        ( name: "ITEM_ID_PALMIA_PRIDE", value: 360 ),
        ( name: "ITEM_ID_SHOPKEEPERS_TRUNK", value: 361 ),
        ( name: "ITEM_ID_SCROLL_GREATER_IDENTIFY", value: 362 ),
        ( name: "ITEM_ID_SCROLL_VANISH_CURSE", value: 363 ),
        ( name: "ITEM_ID_POTION_DEFENDER", value: 364 ),
        ( name: "ITEM_ID_SPELLBOOK_HOLY_SHIELD", value: 365 ),
        ( name: "ITEM_ID_ROD_SILENCE", value: 366 ),
        ( name: "ITEM_ID_SPELLBOOK_SILENCE", value: 367 ),
        ( name: "ITEM_ID_POTION_SILENCE", value: 368 ),
        ( name: "ITEM_ID_SPELLBOOK_REGENERATION", value: 369 ),
        ( name: "ITEM_ID_POTION_TROLL_BLOOD", value: 370 ),
        ( name: "ITEM_ID_SPELLBOOK_RESISTANCE", value: 371 ),
        ( name: "ITEM_ID_POTION_RESISTANCE", value: 372 ),
        ( name: "ITEM_ID_SPELLBOOK_SPEED", value: 373 ),
        ( name: "ITEM_ID_SPELLBOOK_SLOW", value: 374 ),
        ( name: "ITEM_ID_POTION_SPEED", value: 375 ),
        ( name: "ITEM_ID_POTION_SLOW", value: 376 ),
        ( name: "ITEM_ID_ROD_SPEED", value: 377 ),
        ( name: "ITEM_ID_SPELLBOOK_HERO", value: 378 ),
        ( name: "ITEM_ID_POTION_HERO", value: 379 ),
        ( name: "ITEM_ID_SPELLBOOK_WEAKNESS", value: 380 ),
        ( name: "ITEM_ID_SPELLBOOK_ELEMENTAL_SCAR", value: 381 ),
        ( name: "ITEM_ID_POTION_WEAKNESS", value: 382 ),
        ( name: "ITEM_ID_SPELLBOOK_HOLY_VEIL", value: 383 ),
        ( name: "ITEM_ID_SCROLL_HOLY_VEIL", value: 384 ),
        ( name: "ITEM_ID_ROD_HOLY_LIGHT", value: 385 ),
        ( name: "ITEM_ID_SPELLBOOK_HOLY_LIGHT", value: 386 ),
        ( name: "ITEM_ID_SPELLBOOK_HOLY_RAIN", value: 387 ),
        ( name: "ITEM_ID_SCROLL_HOLY_LIGHT", value: 388 ),
        ( name: "ITEM_ID_SCROLL_HOLY_RAIN", value: 389 ),
        ( name: "ITEM_ID_SCROLL_MANA", value: 390 ),
        ( name: "ITEM_ID_ROD_MANA", value: 391 ),
        ( name: "ITEM_ID_BOTTLE_SULFURIC", value: 392 ),
        ( name: "ITEM_ID_GEM_CUTTER", value: 393 ),
        ( name: "ITEM_ID_MATERIAL_BOX", value: 394 ),
        ( name: "ITEM_ID_SCROLL_GAIN_MATERIAL", value: 395 ),
        ( name: "ITEM_ID_SPELLBOOK_NIGHTMARE", value: 396 ),
        ( name: "ITEM_ID_SPELLBOOK_KNOWLEDGE", value: 397 ),
        ( name: "ITEM_ID_SCROLL_KNOWLEDGE", value: 398 ),
        ( name: "ITEM_ID_CARGO_RAG_DOLL", value: 399 ),
        ( name: "ITEM_ID_CARGO_BARREL", value: 400 ),
        ( name: "ITEM_ID_CARGO_PIANO", value: 401 ),
        ( name: "ITEM_ID_CARGO_ROPE", value: 402 ),
        ( name: "ITEM_ID_CARGO_COFFIN", value: 403 ),
        ( name: "ITEM_ID_CARGO_MANBOO", value: 404 ),
        ( name: "ITEM_ID_CARGO_GRAVE", value: 405 ),
        ( name: "ITEM_ID_CARGO_TUNA_FISH", value: 406 ),
        ( name: "ITEM_ID_CARGO_WHISKY", value: 407 ),
        ( name: "ITEM_ID_CARGO_NOBLE_TOY", value: 408 ),
        ( name: "ITEM_ID_CARGO_INNER_TUBE", value: 409 ),
        ( name: "ITEM_ID_SPELLBOOK_DETECT_OBJECTS", value: 410 ),
        ( name: "ITEM_ID_SCROLL_DETECT_OBJECTS", value: 411 ),
        ( name: "ITEM_ID_ROD_UNCURSE", value: 412 ),
        ( name: "ITEM_ID_RED_TREASURE_MACHINE", value: 413 ),
        ( name: "ITEM_ID_BLUE_TREASURE_MACHINE", value: 414 ),
        ( name: "ITEM_ID_TREASURE_BALL", value: 415 ),
        ( name: "ITEM_ID_RARE_TREASURE_BALL", value: 416 ),
        ( name: "ITEM_ID_VEGETABLE_SEED", value: 417 ),
        ( name: "ITEM_ID_FRUIT_SEED", value: 418 ),
        ( name: "ITEM_ID_HERB_SEED", value: 419 ),
        ( name: "ITEM_ID_UNKNOWN_SEED", value: 420 ),
        ( name: "ITEM_ID_ARTIFACT_SEED", value: 421 ),
        ( name: "ITEM_ID_MORGIA", value: 422 ),
        ( name: "ITEM_ID_MAREILON", value: 423 ),
        ( name: "ITEM_ID_SPENSEWEED", value: 424 ),
        ( name: "ITEM_ID_CURARIA", value: 425 ),
        ( name: "ITEM_ID_ALRAUNIA", value: 426 ),
        ( name: "ITEM_ID_STOMAFILLIA", value: 427 ),
        ( name: "ITEM_ID_SLEEPING_BAG", value: 428 ),
        ( name: "ITEM_ID_POTION_WEAKEN_RESISTANCE", value: 429 ),
        ( name: "ITEM_ID_SCROLL_GROWTH", value: 430 ),
        ( name: "ITEM_ID_SCROLL_FAITH", value: 431 ),
        ( name: "ITEM_ID_POTION_MUTATION", value: 432 ),
        ( name: "ITEM_ID_POTION_CURE_MUTATION", value: 433 ),
        ( name: "ITEM_ID_SPELLBOOK_MUTATION", value: 434 ),
        ( name: "ITEM_ID_BANDED_MAIL", value: 435 ),
        ( name: "ITEM_ID_PLATE_MAIL", value: 436 ),
        ( name: "ITEM_ID_RING_MAIL", value: 437 ),
        ( name: "ITEM_ID_COMPOSITE_MAIL", value: 438 ),
        ( name: "ITEM_ID_CHAIN_MAIL", value: 439 ),
        ( name: "ITEM_ID_POPE_ROBE", value: 440 ),
        ( name: "ITEM_ID_LIGHT_MAIL", value: 441 ),
        ( name: "ITEM_ID_COAT", value: 442 ),
        ( name: "ITEM_ID_BREAST_PLATE", value: 443 ),
        ( name: "ITEM_ID_BULLETPROOF_JACKET", value: 444 ),
        ( name: "ITEM_ID_GLOVES", value: 445 ),
        ( name: "ITEM_ID_PLATE_GAUNTLETS", value: 446 ),
        ( name: "ITEM_ID_LIGHT_GLOVES", value: 447 ),
        ( name: "ITEM_ID_COMPOSITE_GAUNTLETS", value: 448 ),
        ( name: "ITEM_ID_SMALL_SHIELD", value: 449 ),
        ( name: "ITEM_ID_ROUND_SHIELD", value: 450 ),
        ( name: "ITEM_ID_SHIELD", value: 451 ),
        ( name: "ITEM_ID_LARGE_SHIELD", value: 452 ),
        ( name: "ITEM_ID_KITE_SHIELD", value: 453 ),
        ( name: "ITEM_ID_TOWER_SHIELD", value: 454 ),
        ( name: "ITEM_ID_SHOES", value: 455 ),
        ( name: "ITEM_ID_BOOTS", value: 456 ),
        ( name: "ITEM_ID_TIGHT_BOOTS", value: 457 ),
        ( name: "ITEM_ID_ARMORED_BOOTS", value: 458 ),
        ( name: "ITEM_ID_COMPOSITE_GIRDLE", value: 459 ),
        ( name: "ITEM_ID_PLATE_GIRDLE", value: 460 ),
        ( name: "ITEM_ID_ARMORED_CLOAK", value: 461 ),
        ( name: "ITEM_ID_CLOAK", value: 462 ),
        ( name: "ITEM_ID_FEATHER_HAT", value: 463 ),
        ( name: "ITEM_ID_HEAVY_HELM", value: 464 ),
        ( name: "ITEM_ID_KNIGHT_HELM", value: 465 ),
        ( name: "ITEM_ID_HELM", value: 466 ),
        ( name: "ITEM_ID_COMPOSITE_HELM", value: 467 ),
        ( name: "ITEM_ID_PERIDOT", value: 468 ),
        ( name: "ITEM_ID_TALISMAN", value: 469 ),
        ( name: "ITEM_ID_NECK_GUARD", value: 470 ),
        ( name: "ITEM_ID_CHARM", value: 471 ),
        ( name: "ITEM_ID_BEJEWELED_AMULET", value: 472 ),
        ( name: "ITEM_ID_ENGAGEMENT_AMULET", value: 473 ),
        ( name: "ITEM_ID_COMPOSITE_RING", value: 474 ),
        ( name: "ITEM_ID_ARMORED_RING", value: 475 ),
        ( name: "ITEM_ID_RING", value: 476 ),
        ( name: "ITEM_ID_ENGAGEMENT_RING", value: 477 ),
        ( name: "ITEM_ID_STETHOSCOPE", value: 478 ),
        ( name: "ITEM_ID_SCROLL_ALLY", value: 479 ),
        ( name: "ITEM_ID_ROD_DOMINATION", value: 480 ),
        ( name: "ITEM_ID_SPELLBOOK_DOMINATION", value: 481 ),
        ( name: "ITEM_ID_CROSSBOW", value: 482 ),
        ( name: "ITEM_ID_BOLT", value: 483 ),
        ( name: "ITEM_ID_SPELLBOOK_WEB", value: 484 ),
        ( name: "ITEM_ID_ROD_WEB", value: 485 ),
        ( name: "ITEM_ID_MACHINE", value: 486 ),
        ( name: "ITEM_ID_COMPUTER", value: 487 ),
        ( name: "ITEM_ID_TRAINING_MACHINE", value: 488 ),
        ( name: "ITEM_ID_CAMERA", value: 489 ),
        ( name: "ITEM_ID_MICROWAVE_OVEN", value: 490 ),
        ( name: "ITEM_ID_SERVER", value: 491 ),
        ( name: "ITEM_ID_STORAGE", value: 492 ),
        ( name: "ITEM_ID_TRASH_CAN", value: 493 ),
        ( name: "ITEM_ID_CHIP", value: 494 ),
        ( name: "ITEM_ID_BLANK_DISC", value: 495 ),
        ( name: "ITEM_ID_SHOT_GUN", value: 496 ),
        ( name: "ITEM_ID_POP_CORN", value: 497 ),
        ( name: "ITEM_ID_FRIED_POTATO", value: 498 ),
        ( name: "ITEM_ID_CYBER_SNACK", value: 499 ),
        ( name: "ITEM_ID_SCROLL_INFERIOR_MATERIAL", value: 500 ),
        ( name: "ITEM_ID_SCROLL_CHANGE_MATERIAL", value: 501 ),
        ( name: "ITEM_ID_SCROLL_SUPERIOR_MATERIAL", value: 502 ),
        ( name: "ITEM_ID_FIGURINE", value: 503 ),
        ( name: "ITEM_ID_CARD", value: 504 ),
        ( name: "ITEM_ID_LITTLE_SISTERS_DIARY", value: 505 ),
        ( name: "ITEM_ID_SCROLL_ENCHANT_WEAPON", value: 506 ),
        ( name: "ITEM_ID_SCROLL_GREATER_ENCHANT_WEAPON", value: 507 ),
        ( name: "ITEM_ID_SCROLL_ENCHANT_ARMOR", value: 508 ),
        ( name: "ITEM_ID_SCROLL_GREATER_ENCHANT_ARMOR", value: 509 ),
        ( name: "ITEM_ID_HEIR_TRUNK", value: 510 ),
        ( name: "ITEM_ID_DEED_HEIRSHIP", value: 511 ),
        ( name: "ITEM_ID_LASER_GUN", value: 512 ),
        ( name: "ITEM_ID_ENERGY_CELL", value: 513 ),
        ( name: "ITEM_ID_RAIL_GUN", value: 514 ),
        ( name: "ITEM_ID_SCROLL_RECHARGE", value: 515 ),
        ( name: "ITEM_ID_BOTTLE_WATER", value: 516 ),
        ( name: "ITEM_ID_ROD_CHANGE_CREATURE", value: 517 ),
        ( name: "ITEM_ID_ROD_ALCHEMY", value: 518 ),
        ( name: "ITEM_ID_BOTTLE_DYE", value: 519 ),
        ( name: "ITEM_ID_WING", value: 520 ),
        ( name: "ITEM_ID_DEED_MUSEUM", value: 521 ),
        ( name: "ITEM_ID_DEED_SHOP", value: 522 ),
        ( name: "ITEM_ID_TREE_BEECH", value: 523 ),
        ( name: "ITEM_ID_TREE_CEDAR", value: 524 ),
        ( name: "ITEM_ID_TREE_FRUITLESS", value: 525 ),
        ( name: "ITEM_ID_TREE_FRUIT", value: 526 ),
        ( name: "ITEM_ID_TREE_DEAD_TREE", value: 527 ),
        ( name: "ITEM_ID_TREE_ZELKOVA", value: 528 ),
        ( name: "ITEM_ID_TREE_PALM", value: 529 ),
        ( name: "ITEM_ID_TREE_ASH", value: 530 ),
        ( name: "ITEM_ID_FURNANCE", value: 531 ),
        ( name: "ITEM_ID_FIREPLACE", value: 532 ),
        ( name: "ITEM_ID_STOVE", value: 533 ),
        ( name: "ITEM_ID_GIANT_FOLIAGE_PLANT", value: 534 ),
        ( name: "ITEM_ID_BIG_TABLE", value: 535 ),
        ( name: "ITEM_ID_PAINTING_MADAM", value: 536 ),
        ( name: "ITEM_ID_PAINTING_LANDSCAPE", value: 537 ),
        ( name: "ITEM_ID_PAINTING_SUNFLOWER", value: 538 ),
        ( name: "ITEM_ID_STATUE_CAT", value: 539 ),
        ( name: "ITEM_ID_BLACK_CRYSTAL", value: 540 ),
        ( name: "ITEM_ID_SNOW_MAN", value: 541 ),
        ( name: "ITEM_ID_DEED_FARM", value: 542 ),
        ( name: "ITEM_ID_DEED_STORAGE_HOUSE", value: 543 ),
        ( name: "ITEM_ID_DISC", value: 544 ),
        ( name: "ITEM_ID_ROD_WALL_CREATION", value: 545 ),
        ( name: "ITEM_ID_SPELLBOOK_WALL_CREATION", value: 546 ),
        ( name: "ITEM_ID_SALARY_CHEST", value: 547 ),
        ( name: "ITEM_ID_SPELLBOOK_HEALING_RAIN", value: 548 ),
        ( name: "ITEM_ID_SCROLL_HEALING_RAIN", value: 549 ),
        ( name: "ITEM_ID_SPELLBOOK_HEALING_HANDS", value: 550 ),
        ( name: "ITEM_ID_ROD_HEALING_HANDS", value: 551 ),
        ( name: "ITEM_ID_FEATHER", value: 552 ),
        ( name: "ITEM_ID_GEM_SEED", value: 553 ),
        ( name: "ITEM_ID_MAGICAL_SEED", value: 554 ),
        ( name: "ITEM_ID_SHELTER", value: 555 ),
        ( name: "ITEM_ID_SEVEN_LEAGUE_BOOTS", value: 556 ),
        ( name: "ITEM_ID_VINDALE_CLOAK", value: 557 ),
        ( name: "ITEM_ID_AURORA_RING", value: 558 ),
        ( name: "ITEM_ID_POTION_CURE_CORRUPTION", value: 559 ),
        ( name: "ITEM_ID_MASTERS_DELIVERY_CHEST", value: 560 ),
        ( name: "ITEM_ID_SHOP_STRONGBOX", value: 561 ),
        ( name: "ITEM_ID_REGISTER", value: 562 ),
        ( name: "ITEM_ID_SKILLBOOK", value: 563 ),
        ( name: "ITEM_ID_SPELLBOOK_ACID_GROUND", value: 564 ),
        ( name: "ITEM_ID_ROD_ACID_GROUND", value: 565 ),
        ( name: "ITEM_ID_ACIDPROOF_LIQUID", value: 566 ),
        ( name: "ITEM_ID_FIREPROOF_BLANKET", value: 567 ),
        ( name: "ITEM_ID_COLDPROOF_BLANKET", value: 568 ),
        ( name: "ITEM_ID_SPELLBOOK_FIRE_WALL", value: 569 ),
        ( name: "ITEM_ID_ROD_FIRE_WALL", value: 570 ),
        ( name: "ITEM_ID_JERKY", value: 571 ),
        ( name: "ITEM_ID_DEED_RANCH", value: 572 ),
        ( name: "ITEM_ID_EGG", value: 573 ),
        ( name: "ITEM_ID_BOTTLE_MILK", value: 574 ),
        ( name: "ITEM_ID_SHIT", value: 575 ),
        ( name: "ITEM_ID_PLAYBACK_DISC", value: 576 ),
        ( name: "ITEM_ID_MOLOTOV", value: 577 ),
        ( name: "ITEM_ID_KITTY_BANK", value: 578 ),
        ( name: "ITEM_ID_FREEZER", value: 579 ),
        ( name: "ITEM_ID_MODERN_RACK", value: 580 ),
        ( name: "ITEM_ID_ROD_MAKE_DOOR", value: 581 ),
        ( name: "ITEM_ID_SPELLBOOK_MAKE_DOOR", value: 582 ),
        ( name: "ITEM_ID_TORCH", value: 583 ),
        ( name: "ITEM_ID_CANDLE", value: 584 ),
        ( name: "ITEM_ID_FANCY_LAMP", value: 585 ),
        ( name: "ITEM_ID_MODERN_LAMP", value: 586 ),
        ( name: "ITEM_ID_HANDFUL_SNOW", value: 587 ),
        ( name: "ITEM_ID_TREE_NAKED", value: 588 ),
        ( name: "ITEM_ID_TREE_FIR", value: 589 ),
        ( name: "ITEM_ID_SNOW_SCARECROW", value: 590 ),
        ( name: "ITEM_ID_MINI_SNOW_MAN", value: 591 ),
        ( name: "ITEM_ID_SNOW_BARREL", value: 592 ),
        ( name: "ITEM_ID_MODERN_LAMP2", value: 593 ),
        ( name: "ITEM_ID_STATUE_HOLY_CROSS", value: 594 ),
        ( name: "ITEM_ID_PILLAR", value: 595 ),
        ( name: "ITEM_ID_STAINED_GLASS_WINDOW", value: 596 ),
        ( name: "ITEM_ID_CARGO_CHRISTMAS_TREE", value: 597 ),
        ( name: "ITEM_ID_CARGO_SNOW_MAN", value: 598 ),
        ( name: "ITEM_ID_CHRISTMAS_TREE", value: 599 ),
        ( name: "ITEM_ID_GIANTS_SHACKLE", value: 600 ),
        ( name: "ITEM_ID_EMPTY_BOTTLE", value: 601 ),
        ( name: "ITEM_ID_HOLY_WELL", value: 602 ),
        ( name: "ITEM_ID_PRESIDENTS_CHAIR", value: 603 ),
        ( name: "ITEM_ID_GREEN_PLANT", value: 604 ),
        ( name: "ITEM_ID_MONEY_TREE", value: 605 ),
        ( name: "ITEM_ID_BARBECUE_SET", value: 606 ),
        ( name: "ITEM_ID_GIANT_CACTUS", value: 607 ),
        ( name: "ITEM_ID_SQUARE_WINDOW", value: 608 ),
        ( name: "ITEM_ID_WINDOW", value: 609 ),
        ( name: "ITEM_ID_TRIANGLE_PLANT", value: 610 ),
        ( name: "ITEM_ID_HOUSE_BOARD", value: 611 ),
        ( name: "ITEM_ID_NICE_WINDOW", value: 612 ),
        ( name: "ITEM_ID_KINGS_BED", value: 613 ),
        ( name: "ITEM_ID_FLOWER_ARCH", value: 614 ),
        ( name: "ITEM_ID_BILL", value: 615 ),
        ( name: "ITEM_ID_TAX_MASTERS_TAX_BOX", value: 616 ),
        ( name: "ITEM_ID_BAIT", value: 617 ),
        ( name: "ITEM_ID_FISH", value: 618 ),
        ( name: "ITEM_ID_FISH_JUNK", value: 619 ),
        ( name: "ITEM_ID_LOVE_POTION", value: 620 ),
        ( name: "ITEM_ID_TREASURE_MAP", value: 621 ),
        ( name: "ITEM_ID_SMALL_MEDAL", value: 622 ),
        ( name: "ITEM_ID_CAT_SISTERS_DIARY", value: 623 ),
        ( name: "ITEM_ID_GIRLS_DIARY", value: 624 ),
        ( name: "ITEM_ID_SHRINE_GATE", value: 625 ),
        ( name: "ITEM_ID_BOTTLE_HERMES_BLOOD", value: 626 ),
        ( name: "ITEM_ID_SAGES_HELM", value: 627 ),
        ( name: "ITEM_ID_SPELLBOOK_INCOGNITO", value: 628 ),
        ( name: "ITEM_ID_DISGUISE_SET", value: 629 ),
        ( name: "ITEM_ID_MATERIAL_KIT", value: 630 ),
        ( name: "ITEM_ID_MOON_GATE", value: 631 ),
        ( name: "ITEM_ID_FLYING_SCROLL", value: 632 ),
        ( name: "ITEM_ID_PANTY", value: 633 ),
        ( name: "ITEM_ID_LEASH", value: 634 ),
        ( name: "ITEM_ID_MINE", value: 635 ),
        ( name: "ITEM_ID_LOCKPICK", value: 636 ),
        ( name: "ITEM_ID_SKELETON_KEY", value: 637 ),
        ( name: "ITEM_ID_SCROLL_ESCAPE", value: 638 ),
        ( name: "ITEM_ID_HAPPY_APPLE", value: 639 ),
        ( name: "ITEM_ID_UNICORN_HORN", value: 640 ),
        ( name: "ITEM_ID_COOLER_BOX", value: 641 ),
        ( name: "ITEM_ID_RICE_BARREL", value: 642 ),
        ( name: "ITEM_ID_EASTERN_BED", value: 643 ),
        ( name: "ITEM_ID_DECORATED_WINDOW", value: 644 ),
        ( name: "ITEM_ID_KING_DRAWER", value: 645 ),
        ( name: "ITEM_ID_MENU_BOARD", value: 646 ),
        ( name: "ITEM_ID_BLACK_BOARD", value: 647 ),
        ( name: "ITEM_ID_SOFA", value: 648 ),
        ( name: "ITEM_ID_FLOWERBED", value: 649 ),
        ( name: "ITEM_ID_TOILET", value: 650 ),
        ( name: "ITEM_ID_CRAFT_CUPBOARD", value: 651 ),
        ( name: "ITEM_ID_SINK2", value: 652 ),
        ( name: "ITEM_ID_JUNK", value: 653 ),
        ( name: "ITEM_ID_DOUBLE_BED", value: 654 ),
        ( name: "ITEM_ID_HERO_CHEESE", value: 655 ),
        ( name: "ITEM_ID_EASTERN_LAMP", value: 656 ),
        ( name: "ITEM_ID_EASTERN_WINDOW", value: 657 ),
        ( name: "ITEM_ID_CHOCHIN", value: 658 ),
        ( name: "ITEM_ID_PARTITION", value: 659 ),
        ( name: "ITEM_ID_SPELLBOOK_DARKNESS_ARROW", value: 660 ),
        ( name: "ITEM_ID_DAL_I_THALION", value: 661 ),
        ( name: "ITEM_ID_MAGIC_FRUIT", value: 662 ),
        ( name: "ITEM_ID_MONSTER_HEART", value: 663 ),
        ( name: "ITEM_ID_SPEED_RING", value: 664 ),
        ( name: "ITEM_ID_STATUE_OPATOS", value: 665 ),
        ( name: "ITEM_ID_STATUE_LULWY", value: 666 ),
        ( name: "ITEM_ID_SISTERS_LOVE_FUELED_LUNCH", value: 667 ),
        ( name: "ITEM_ID_BOOK_RACHEL", value: 668 ),
        ( name: "ITEM_ID_ART", value: 669 ),
        ( name: "ITEM_ID_CANVAS", value: 670 ),
        ( name: "ITEM_ID_NUCLEAR_BOMB", value: 671 ),
        ( name: "ITEM_ID_SECRET_TREASURE", value: 672 ),
        ( name: "ITEM_ID_WIND_BOW", value: 673 ),
        ( name: "ITEM_ID_WINCHESTER_PREMIUM", value: 674 ),
        ( name: "ITEM_ID_KUMIROMI_SCYTHE", value: 675 ),
        ( name: "ITEM_ID_ELEMENTAL_STAFF", value: 676 ),
        ( name: "ITEM_ID_HOLY_LANCE", value: 677 ),
        ( name: "ITEM_ID_LUCKY_DAGGER", value: 678 ),
        ( name: "ITEM_ID_GAIA_HAMMER", value: 679 ),
        ( name: "ITEM_ID_GEMSTONE_LULWY", value: 680 ),
        ( name: "ITEM_ID_GEMSTONE_JURE", value: 681 ),
        ( name: "ITEM_ID_GEMSTONE_KUMIROMI", value: 682 ),
        ( name: "ITEM_ID_ENERGY_CRYSTAL_MATRIX", value: 683 ),
        ( name: "ITEM_ID_GENE_MACHINE", value: 684 ),
        ( name: "ITEM_ID_MONSTER_BALL", value: 685 ),
        ( name: "ITEM_ID_STATUE_JURE", value: 686 ),
        ( name: "ITEM_ID_ANCIENT_BOOK", value: 687 ),
        ( name: "ITEM_ID_IRON_MAIDEN", value: 688 ),
        ( name: "ITEM_ID_GUILLOTINE", value: 689 ),
        ( name: "ITEM_ID_PAN_FLUTE", value: 690 ),
        ( name: "ITEM_ID_LUTE", value: 691 ),
        ( name: "ITEM_ID_HARMONICA", value: 692 ),
        ( name: "ITEM_ID_HARP", value: 693 ),
        ( name: "ITEM_ID_EASTERN_PARTITION", value: 694 ),
        ( name: "ITEM_ID_AXE_OF_DESTRUCTION", value: 695 ),
        ( name: "ITEM_ID_SPELLBOOK_MAGIC_BALL", value: 696 ),
        ( name: "ITEM_ID_SPELLBOOK_MAGIC_LASER", value: 697 ),
        ( name: "ITEM_ID_POTION_SALT_SOLUTION", value: 698 ),
        ( name: "ITEM_ID_LITTLE_BALL", value: 699 ),
        ( name: "ITEM_ID_TOWN_BOOK", value: 700 ),
        ( name: "ITEM_ID_DECK", value: 701 ),
        ( name: "ITEM_ID_RABBITS_TAIL", value: 702 ),
        ( name: "ITEM_ID_WHISTLE", value: 703 ),
        ( name: "ITEM_ID_VOMIT", value: 704 ),
        ( name: "ITEM_ID_BEGGARS_PENDANT", value: 705 ),
        ( name: "ITEM_ID_POTION_DESCENT", value: 706 ),
        ( name: "ITEM_ID_STRADIVARIUS", value: 707 ),
        ( name: "ITEM_ID_BOOK_RESURRECTION", value: 708 ),
        ( name: "ITEM_ID_SCROLL_CONTINGENCY", value: 709 ),
        ( name: "ITEM_ID_SPELLBOOK_CONTINGENCY", value: 710 ),
        ( name: "ITEM_ID_POTION_EVOLUTION", value: 711 ),
        ( name: "ITEM_ID_DEED_DUNGEON", value: 712 ),
        ( name: "ITEM_ID_SHURIKEN", value: 713 ),
        ( name: "ITEM_ID_GRENADE", value: 714 ),
        ( name: "ITEM_ID_SECRET_EXP_KUMIROMI", value: 715 ),
        ( name: "ITEM_ID_VANILLA_ROCK", value: 716 ),
        ( name: "ITEM_ID_SECRET_EXP_LOMIAS", value: 717 ),
        ( name: "ITEM_ID_SHENAS_PANTY", value: 718 ),
        ( name: "ITEM_ID_CLAYMORE2", value: 719 ),
        ( name: "ITEM_ID_HAPPY_BED", value: 720 ),
        ( name: "ITEM_ID_STATUE_EHEKATL", value: 721 ),
        ( name: "ITEM_ID_ARBALEST", value: 722 ),
        ( name: "ITEM_ID_TWIN_EDGE", value: 723 ),
        ( name: "ITEM_ID_MUSIC_TICKET", value: 724 ),
        ( name: "ITEM_ID_KILL_KILL_PIANO", value: 725 ),
        ( name: "ITEM_ID_ALUD", value: 726 ),
        ( name: "ITEM_ID_SHIELD_OF_THORNS", value: 727 ),
        ( name: "ITEM_ID_CRIMSON_PLATE", value: 728 ),
        ( name: "ITEM_ID_GIFT", value: 729 ),
        ( name: "ITEM_ID_TOKEN_FRIENDSHIP", value: 730 ),
        ( name: "ITEM_ID_SPELLBOOK_4D_POCKET", value: 731 ),
        ( name: "ITEM_ID_SPELLBOOK_HARVEST", value: 732 ),
        ( name: "ITEM_ID_SAND_BAG", value: 733 ),
        ( name: "ITEM_ID_SMALL_GAMBLE_CHEST", value: 734 ),
        ( name: "ITEM_ID_SCYTHE", value: 735 ),
        ( name: "ITEM_ID_FIREPROOF_LIQUID", value: 736 ),
        ( name: "ITEM_ID_SCROLL_NAME", value: 737 ),
        ( name: "ITEM_ID_FORTUNE_COOKIE", value: 738 ),
        ( name: "ITEM_ID_FRISIAS_TAIL", value: 739 ),
        ( name: "ITEM_ID_UNKNOWN_SHELL", value: 740 ),
        ( name: "ITEM_ID_HIRYU_TO", value: 741 ),
        ( name: "ITEM_ID_LICENCE_THE_VOID_EXPLORER", value: 742 ),
        ( name: "ITEM_ID_CARNEADES_PLANK", value: 743 ),
        ( name: "ITEM_ID_SCHRODINGERS_CAT", value: 744 ),
        ( name: "ITEM_ID_OBJET_HEART", value: 745 ),
        ( name: "ITEM_ID_TAMERS_WHIP", value: 746 ),
        ( name: "ITEM_ID_BOOK_BOKONON", value: 747 ),
        ( name: "ITEM_ID_SUMMONING_CRYSTAL", value: 748 ),
        ( name: "ITEM_ID_STATUE_CREATOR", value: 749 ),
        ( name: "ITEM_ID_UPSTAIRS", value: 750 ),
        ( name: "ITEM_ID_DOWNSTAIRS", value: 751 ),
        ( name: "ITEM_ID_NEW_YEARS_GIFT", value: 752 ),
        ( name: "ITEM_ID_KOTATSU", value: 753 ),
        ( name: "ITEM_ID_DARUMA", value: 754 ),
        ( name: "ITEM_ID_KAGAMI_MOCHI", value: 755 ),
        ( name: "ITEM_ID_MOCHI", value: 756 ),
        ( name: "ITEM_ID_FIVE_HORNED_HELM", value: 757 ),
        ( name: "ITEM_ID_MAUSER_C96_CUSTOM", value: 758 ),
        ( name: "ITEM_ID_LIGHTSABRE", value: 759 ),
        ( name: "ITEM_ID_GAROKS_HAMMER", value: 760 ),
        ( name: "ITEM_ID_GOULDS_PIANO", value: 761 ),
        ( name: "ITEM_ID_FESTIVAL_WREATH", value: 762 ),
        ( name: "ITEM_ID_PEDESTAL", value: 763 ),
        ( name: "ITEM_ID_COUNTER", value: 764 ),
        ( name: "ITEM_ID_RED_STALL", value: 765 ),
        ( name: "ITEM_ID_BLUE_STALL", value: 766 ),
        ( name: "ITEM_ID_JURES_BODY_PILLOW", value: 767 ),
        ( name: "ITEM_ID_NEW_YEARS_DECORATION", value: 768 ),
        ( name: "ITEM_ID_MINIATURE_TREE", value: 769 ),
        ( name: "ITEM_ID_BOTTLE_SODA", value: 770 ),
        ( name: "ITEM_ID_BLUE_CAPSULE_DRAG", value: 771 ),
        ( name: "ITEM_ID_TOMATO", value: 772 ),
        ( name: "ITEM_ID_LARGE_BOOKSHELF", value: 773 ),
        ( name: "ITEM_ID_LUXURY_CABINET", value: 774 ),
        ( name: "ITEM_ID_SPECIAL_STEAMED_MEAT_BUN", value: 775 ),
        ( name: "ITEM_ID_STATUE_KUMIROMI", value: 776 ),
        ( name: "ITEM_ID_STATUE_MANI", value: 777 ),
        ( name: "ITEM_ID_LUXURY_SOFA", value: 778 ),
        ( name: "ITEM_ID_DEER_HEAD", value: 779 ),
        ( name: "ITEM_ID_FUR_CARPET", value: 780 ),
        ( name: "ITEM_ID_KITCHEN_KNIFE", value: 781 ),
        ( name: "ITEM_ID_LARGE_DISH", value: 782 ),
        ( name: "ITEM_ID_RECIPE", value: 783 ),
        ( name: "ITEM_ID_CARD_PACK", value: 784 ),
        ( name: "ITEM_ID_BOTTLE_SALT", value: 785 ),
        ( name: "ITEM_ID_SACK_SUGAR", value: 786 ),
        ( name: "ITEM_ID_PUFF_PUFF_BREAD", value: 787 ),
        ( name: "ITEM_ID_SKULL_BOW", value: 788 ),
        ( name: "ITEM_ID_POT_FOR_FUSION", value: 789 ),
        ( name: "ITEM_ID_POT_OF_ALCHEMIST", value: 790 ),
        ( name: "ITEM_ID_DRAGON_SLAYER", value: 791 ),
        ( name: "ITEM_ID_PUTITORO", value: 792 ),

        ( name: "MAX_ITEM_ID", value: 795, code_value: "ITEM_ID_PUTITORO + 3", exclude: true ),

        ( name: "MAX_ITEM_DBID", value: 800, ),
      ],
      ignore: [ -1, 9999 ]
    ),
    "chara_id": (
      variables: [
        ( name: "CREATURE_ID_BUG", value: 0 ),
        ( name: "CREATURE_ID_SHOPKEEPER", value: 1 ),
        ( name: "CREATURE_ID_ZEOME_THE_FALSE_PROPHET", value: 2 ),
        ( name: "CREATURE_ID_PUTIT", value: 3 ),
        ( name: "CREATURE_ID_RED_PUTIT", value: 4 ),
        ( name: "CREATURE_ID_WILD_RABBIT", value: 5 ),
        ( name: "CREATURE_ID_SNAIL", value: 6 ),
        ( name: "CREATURE_ID_FALLEN_SOLDIER", value: 7 ),
        ( name: "CREATURE_ID_MERCENARY", value: 8 ),
        ( name: "CREATURE_ID_BEGGAR", value: 9 ),
        ( name: "CREATURE_ID_WILD_SHEEP", value: 10 ),
        ( name: "CREATURE_ID_FLYING_FROG", value: 11 ),
        ( name: "CREATURE_ID_GANGSTER", value: 12 ),
        ( name: "CREATURE_ID_KOBOLD", value: 13 ),
        ( name: "CREATURE_ID_CENTIPEDE", value: 14 ),
        ( name: "CREATURE_ID_MUSHROOM", value: 15 ),
        ( name: "CREATURE_ID_CITIZEN", value: 16 ),
        ( name: "CREATURE_ID_ORC", value: 17 ),
        ( name: "CREATURE_ID_WARRIOR_OF_ELEA", value: 18 ),
        ( name: "CREATURE_ID_MANDRAKE", value: 19 ),
        ( name: "CREATURE_ID_ORC_WARRIOR", value: 20 ),
        ( name: "CREATURE_ID_ZOMBIE", value: 21 ),
        ( name: "CREATURE_ID_BEETLE", value: 22 ),
        ( name: "CREATURE_ID_ORPHE_THE_CHAOS_CHILD", value: 23 ),
        ( name: "CREATURE_ID_WIZARD_OF_ELEA", value: 24 ),
        ( name: "CREATURE_ID_GODA_THE_CAPTAIN_OF_ORC", value: 25 ),
        ( name: "CREATURE_ID_MAD_SCIENTIST", value: 26 ),
        ( name: "CREATURE_ID_ISCA_THE_FALLEN_ANGEL", value: 27 ),
        ( name: "CREATURE_ID_WHOM_DWELL_IN_THE_VANITY", value: 28 ),
        ( name: "CREATURE_ID_LOYTER_THE_CRIMSON_OF_ZANAN", value: 29 ),
        ( name: "CREATURE_ID_MICHES_THE_APPRENTICE", value: 30 ),
        ( name: "CREATURE_ID_SHENA_THE_DRAW", value: 31 ),
        ( name: "CREATURE_ID_DUNGEON_CLEANER", value: 32 ),
        ( name: "CREATURE_ID_LARNNEIRE_THE_LISTENER_OF_WIND", value: 33 ),
        ( name: "CREATURE_ID_LOMIAS_THE_MESSENGER_FROM_VINDALE", value: 34 ),
        ( name: "CREATURE_ID_TOWN_CHILD", value: 35 ),
        ( name: "CREATURE_ID_OLD_PERSON", value: 36 ),
        ( name: "CREATURE_ID_AT_SIGN", value: 37 ),
        ( name: "CREATURE_ID_ELDER", value: 38 ),
        ( name: "CREATURE_ID_CITIZEN2", value: 39 ),
        ( name: "CREATURE_ID_TRAINER", value: 40 ),
        ( name: "CREATURE_ID_WIZARD", value: 41 ),
        ( name: "CREATURE_ID_BAT", value: 42 ),
        ( name: "CREATURE_ID_VAMPIRE_BAT", value: 43 ),
        ( name: "CREATURE_ID_DRAGON_BAT", value: 44 ),
        ( name: "CREATURE_ID_FIRE_ENT", value: 45 ),
        ( name: "CREATURE_ID_ICE_ENT", value: 46 ),
        ( name: "CREATURE_ID_LICH", value: 47 ),
        ( name: "CREATURE_ID_MASTER_LICH", value: 48 ),
        ( name: "CREATURE_ID_DEMI_LICH", value: 49 ),
        ( name: "CREATURE_ID_HOUND", value: 50 ),
        ( name: "CREATURE_ID_FIRE_HOUND", value: 51 ),
        ( name: "CREATURE_ID_ICE_HOUND", value: 52 ),
        ( name: "CREATURE_ID_LIGHTNING_HOUND", value: 53 ),
        ( name: "CREATURE_ID_DARK_HOUND", value: 54 ),
        ( name: "CREATURE_ID_ILLUSION_HOUND", value: 55 ),
        ( name: "CREATURE_ID_NERVE_HOUND", value: 56 ),
        ( name: "CREATURE_ID_POISON_HOUND", value: 57 ),
        ( name: "CREATURE_ID_SOUND_HOUND", value: 58 ),
        ( name: "CREATURE_ID_NETHER_HOUND", value: 59 ),
        ( name: "CREATURE_ID_CHAOS_HOUND", value: 60 ),
        ( name: "CREATURE_ID_GIANT_SQUIRREL", value: 61 ),
        ( name: "CREATURE_ID_KILLER_SQUIRREL", value: 62 ),
        ( name: "CREATURE_ID_GRUDGE", value: 63 ),
        ( name: "CREATURE_ID_HUNGRY_DEMON", value: 64 ),
        ( name: "CREATURE_ID_ELECTRIC_CLOUD", value: 65 ),
        ( name: "CREATURE_ID_CHAOS_CLOUD", value: 66 ),
        ( name: "CREATURE_ID_FLOATING_EYE", value: 67 ),
        ( name: "CREATURE_ID_WYVERN", value: 68 ),
        ( name: "CREATURE_ID_INFORMER", value: 69 ),
        ( name: "CREATURE_ID_BARTENDER", value: 70 ),
        ( name: "CREATURE_ID_SAILOR", value: 71 ),
        ( name: "CREATURE_ID_CAPTAIN", value: 72 ),
        ( name: "CREATURE_ID_ARENA_MASTER", value: 73 ),
        ( name: "CREATURE_ID_HEALER", value: 74 ),
        ( name: "CREATURE_ID_WARRIOR", value: 75 ),
        ( name: "CREATURE_ID_GUARD", value: 76 ),
        ( name: "CREATURE_ID_GUARD2", value: 77 ),
        ( name: "CREATURE_ID_PUPPET", value: 78 ),
        ( name: "CREATURE_ID_STERSHA_THE_QUEEN_OF_PALMIA", value: 79 ),
        ( name: "CREATURE_ID_XABI_THE_KING_OF_PALMIA", value: 80 ),
        ( name: "CREATURE_ID_WASP", value: 81 ),
        ( name: "CREATURE_ID_RED_WASP", value: 82 ),
        ( name: "CREATURE_ID_CYCLOPS", value: 83 ),
        ( name: "CREATURE_ID_TITAN", value: 84 ),
        ( name: "CREATURE_ID_IMP", value: 85 ),
        ( name: "CREATURE_ID_NETHER_IMP", value: 86 ),
        ( name: "CREATURE_ID_CHAOS_IMP", value: 87 ),
        ( name: "CREATURE_ID_HAND_OF_THE_DEAD", value: 88 ),
        ( name: "CREATURE_ID_HAND_OF_THE_CHAOS", value: 89 ),
        ( name: "CREATURE_ID_HAND_OF_THE_MURDERER", value: 90 ),
        ( name: "CREATURE_ID_GHOST", value: 91 ),
        ( name: "CREATURE_ID_NYMPH", value: 92 ),
        ( name: "CREATURE_ID_MAN_EATER_FLOWER", value: 93 ),
        ( name: "CREATURE_ID_CHAOS_FLOWER", value: 94 ),
        ( name: "CREATURE_ID_COBRA", value: 95 ),
        ( name: "CREATURE_ID_KING_COBRA", value: 96 ),
        ( name: "CREATURE_ID_FIRE_DRAKE", value: 97 ),
        ( name: "CREATURE_ID_ICE_DRAKE", value: 98 ),
        ( name: "CREATURE_ID_LESSER_MUMMY", value: 99 ),
        ( name: "CREATURE_ID_MUMMY", value: 100 ),
        ( name: "CREATURE_ID_GREATER_MUMMY", value: 101 ),
        ( name: "CREATURE_ID_GOBLIN", value: 102 ),
        ( name: "CREATURE_ID_GOBLIN_WARRIOR", value: 103 ),
        ( name: "CREATURE_ID_GOBLIN_SHAMAN", value: 104 ),
        ( name: "CREATURE_ID_GOBLIN_WIZARD", value: 105 ),
        ( name: "CREATURE_ID_RED_BAPTIST", value: 106 ),
        ( name: "CREATURE_ID_BLUE_BAPTIST", value: 107 ),
        ( name: "CREATURE_ID_BROWN_BEAR", value: 108 ),
        ( name: "CREATURE_ID_GRIZZLY", value: 109 ),
        ( name: "CREATURE_ID_LIVING_ARMOR", value: 110 ),
        ( name: "CREATURE_ID_STEEL_MASS", value: 111 ),
        ( name: "CREATURE_ID_GOLDEN_ARMOR", value: 112 ),
        ( name: "CREATURE_ID_DEATH_ARMOR", value: 113 ),
        ( name: "CREATURE_ID_MEDUSA", value: 114 ),
        ( name: "CREATURE_ID_EURYALE", value: 115 ),
        ( name: "CREATURE_ID_STHENO", value: 116 ),
        ( name: "CREATURE_ID_CUPID_OF_LOVE", value: 117 ),
        ( name: "CREATURE_ID_LESSER_PHANTOM", value: 118 ),
        ( name: "CREATURE_ID_HARPY", value: 119 ),
        ( name: "CREATURE_ID_GREEN_DRAGON", value: 120 ),
        ( name: "CREATURE_ID_RED_DRAGON", value: 121 ),
        ( name: "CREATURE_ID_WHITE_DRAGON", value: 122 ),
        ( name: "CREATURE_ID_ELEC_DRAGON", value: 123 ),
        ( name: "CREATURE_ID_NETHER_DRAGON", value: 124 ),
        ( name: "CREATURE_ID_CHAOS_DRAGON", value: 125 ),
        ( name: "CREATURE_ID_CERBERUS", value: 126 ),
        ( name: "CREATURE_ID_SPIDER", value: 127 ),
        ( name: "CREATURE_ID_BLACK_WIDOW", value: 128 ),
        ( name: "CREATURE_ID_PARALYZER", value: 129 ),
        ( name: "CREATURE_ID_TARANTULA", value: 130 ),
        ( name: "CREATURE_ID_BLOOD_SPIDER", value: 131 ),
        ( name: "CREATURE_ID_WOODEN_GOLEM", value: 132 ),
        ( name: "CREATURE_ID_STONE_GOLEM", value: 133 ),
        ( name: "CREATURE_ID_STEEL_GOLEM", value: 134 ),
        ( name: "CREATURE_ID_GOLDEN_GOLEM", value: 135 ),
        ( name: "CREATURE_ID_MITHRIL_GOLEM", value: 136 ),
        ( name: "CREATURE_ID_SKY_GOLEM", value: 137 ),
        ( name: "CREATURE_ID_ADAMANTIUM_GOLEM", value: 138 ),
        ( name: "CREATURE_ID_SLAN_THE_SHADOW_OF_PALMIA", value: 139 ),
        ( name: "CREATURE_ID_VESDA_THE_FIRE_DRAGON", value: 140 ),
        ( name: "CREATURE_ID_ISSIZZLE_THE_DARK_ABOMINATION", value: 141 ),
        ( name: "CREATURE_ID_ERYSTIA_THE_SCHOLAR_OF_HISTORY", value: 142 ),
        ( name: "CREATURE_ID_WYNAN_THE_LORD_OF_THE_ANCIENT_CASTLE", value: 143 ),
        ( name: "CREATURE_ID_QURUIZA_THE_RED_EYED_DECEIVER", value: 144 ),
        ( name: "CREATURE_ID_CORGON_THE_STEEL_DRAGON", value: 145 ),
        ( name: "CREATURE_ID_KARAM_THE_LONELY_WOLF_OF_KARUNE", value: 146 ),
        ( name: "CREATURE_ID_FIRE_CRAB", value: 147 ),
        ( name: "CREATURE_ID_FIRE_CENTIPEDE", value: 148 ),
        ( name: "CREATURE_ID_CULTIST_OF_FIRE", value: 149 ),
        ( name: "CREATURE_ID_SKELETON_WARRIOR", value: 150 ),
        ( name: "CREATURE_ID_SKELETON_BERSERKER", value: 151 ),
        ( name: "CREATURE_ID_MISSIONARY_OF_DARKNESS", value: 152 ),
        ( name: "CREATURE_ID_PAWN", value: 153 ),
        ( name: "CREATURE_ID_ROOK", value: 154 ),
        ( name: "CREATURE_ID_BISHOP", value: 155 ),
        ( name: "CREATURE_ID_KNIGHT", value: 156 ),
        ( name: "CREATURE_ID_QUEEN", value: 157 ),
        ( name: "CREATURE_ID_KING", value: 158 ),
        ( name: "CREATURE_ID_MERCENARY_WARRIOR", value: 159 ),
        ( name: "CREATURE_ID_MERCENARY_ARCHER", value: 160 ),
        ( name: "CREATURE_ID_MERCENARY_WIZARD", value: 161 ),
        ( name: "CREATURE_ID_YERLES_MACHINE_INFANTRY", value: 162 ),
        ( name: "CREATURE_ID_ROCK_THROWER", value: 163 ),
        ( name: "CREATURE_ID_CAT", value: 164 ),
        ( name: "CREATURE_ID_DOG", value: 165 ),
        ( name: "CREATURE_ID_LITTLE_GIRL", value: 166 ),
        ( name: "CREATURE_ID_RAT", value: 167 ),
        ( name: "CREATURE_ID_HERMIT_CRAB", value: 168 ),
        ( name: "CREATURE_ID_SLIME", value: 169 ),
        ( name: "CREATURE_ID_PUBLIC_PERFORMER", value: 170 ),
        ( name: "CREATURE_ID_CITIZEN_OF_CYBER_DOME", value: 171 ),
        ( name: "CREATURE_ID_CITIZEN_OF_CYBER_DOME2", value: 172 ),
        ( name: "CREATURE_ID_SALES_PERSON", value: 173 ),
        ( name: "CREATURE_ID_PUNK", value: 174 ),
        ( name: "CREATURE_ID_FRISIA_THE_CAT_QUEEN", value: 175 ),
        ( name: "CREATURE_ID_YOUNGER_SISTER", value: 176 ),
        ( name: "CREATURE_ID_UTIMA_THE_DESTROYER_OF_XEREN", value: 177 ),
        ( name: "CREATURE_ID_AZZRSSIL_THE_IMPURE", value: 178 ),
        ( name: "CREATURE_ID_MASTER_OF_PET_ARENA", value: 179 ),
        ( name: "CREATURE_ID_TWINTAIL", value: 180 ),
        ( name: "CREATURE_ID_SILVER_WOLF", value: 181 ),
        ( name: "CREATURE_ID_NURSE", value: 182 ),
        ( name: "CREATURE_ID_RICH_PERSON", value: 183 ),
        ( name: "CREATURE_ID_NOBLE_CHILD", value: 184 ),
        ( name: "CREATURE_ID_TOURIST", value: 185 ),
        ( name: "CREATURE_ID_BLADE", value: 186 ),
        ( name: "CREATURE_ID_BLADE_ALPHA", value: 187 ),
        ( name: "CREATURE_ID_BLADE_OMEGA", value: 188 ),
        ( name: "CREATURE_ID_DEFORMED_EYE", value: 189 ),
        ( name: "CREATURE_ID_IMPURE_EYE", value: 190 ),
        ( name: "CREATURE_ID_WISP", value: 191 ),
        ( name: "CREATURE_ID_HEDGEHOG", value: 192 ),
        ( name: "CREATURE_ID_SHINING_HEDGEHOG", value: 193 ),
        ( name: "CREATURE_ID_ACID_SLIME", value: 194 ),
        ( name: "CREATURE_ID_CHICKEN", value: 195 ),
        ( name: "CREATURE_ID_PUMPKIN", value: 196 ),
        ( name: "CREATURE_ID_GREATER_PUMPKIN", value: 197 ),
        ( name: "CREATURE_ID_HALLOWEEN_NIGHTMARE", value: 198 ),
        ( name: "CREATURE_ID_STALKER", value: 199 ),
        ( name: "CREATURE_ID_SHADOW_STALKER", value: 200 ),
        ( name: "CREATURE_ID_PUPPY", value: 201 ),
        ( name: "CREATURE_ID_EBON_THE_FIRE_GIANT", value: 202 ),
        ( name: "CREATURE_ID_MOYER_THE_CROOKED", value: 203 ),
        ( name: "CREATURE_ID_PALMIAN_ELITE_SOLDIER", value: 204 ),
        ( name: "CREATURE_ID_MAID", value: 205 ),
        ( name: "CREATURE_ID_SISTER", value: 206 ),
        ( name: "CREATURE_ID_SSIL_THE_UNDEAD_WITCH", value: 207 ),
        ( name: "CREATURE_ID_GAROK_THE_LEGENDARY_SMITH", value: 208 ),
        ( name: "CREATURE_ID_MIRAL_THE_LEGENDARY_SMITH", value: 209 ),
        ( name: "CREATURE_ID_YOUNGER_CAT_SISTER", value: 210 ),
        ( name: "CREATURE_ID_YOUNG_LADY", value: 211 ),
        ( name: "CREATURE_ID_PUTIT_TANK", value: 212 ),
        ( name: "CREATURE_ID_GWEN_THE_INNOCENT", value: 213 ),
        ( name: "CREATURE_ID_THIEF", value: 214 ),
        ( name: "CREATURE_ID_ROBBER", value: 215 ),
        ( name: "CREATURE_ID_GREAT_RACE_OF_YITH", value: 216 ),
        ( name: "CREATURE_ID_MASTER_THIEF", value: 217 ),
        ( name: "CREATURE_ID_SHUB_NIGGURATH", value: 218 ),
        ( name: "CREATURE_ID_GAGU", value: 219 ),
        ( name: "CREATURE_ID_SPIRAL_KING", value: 220 ),
        ( name: "CREATURE_ID_LONELY_PAEL", value: 221 ),
        ( name: "CREATURE_ID_PAELS_MOM_LILY", value: 222 ),
        ( name: "CREATURE_ID_RAPHAEL_THE_WOMANIZER", value: 223 ),
        ( name: "CREATURE_ID_AINC_THE_NOVICE_KNIGHT", value: 224 ),
        ( name: "CREATURE_ID_POPPY_THE_LITTLE_DOG", value: 225 ),
        ( name: "CREATURE_ID_RILIAN_THE_DOG_LOVER", value: 226 ),
        ( name: "CREATURE_ID_TAM_THE_CAT_HATER", value: 227 ),
        ( name: "CREATURE_ID_CARBUNCLE", value: 228 ),
        ( name: "CREATURE_ID_LION", value: 229 ),
        ( name: "CREATURE_ID_CACY_THE_CAT_TAMER", value: 230 ),
        ( name: "CREATURE_ID_GILBERT_THE_COLONEL", value: 231 ),
        ( name: "CREATURE_ID_YERLES_SELF_PROPELLED_GUN", value: 232 ),
        ( name: "CREATURE_ID_JUERE_INFANTRY", value: 233 ),
        ( name: "CREATURE_ID_YERLES_ELITE_MACHINE_INFANTRY", value: 234 ),
        ( name: "CREATURE_ID_JUERE_SWORDMAN", value: 235 ),
        ( name: "CREATURE_ID_YEEK", value: 236 ),
        ( name: "CREATURE_ID_KAMIKAZE_YEEK", value: 237 ),
        ( name: "CREATURE_ID_YEEK_WARRIOR", value: 238 ),
        ( name: "CREATURE_ID_HOT_SPRING_MANIAC", value: 239 ),
        ( name: "CREATURE_ID_MASTER_YEEK", value: 240 ),
        ( name: "CREATURE_ID_YEEK_ARCHER", value: 241 ),
        ( name: "CREATURE_ID_RODLOB_THE_YEEK_CHIEF", value: 242 ),
        ( name: "CREATURE_ID_ARNORD_THE_INJURED_SOLDIER", value: 243 ),
        ( name: "CREATURE_ID_KAMIKAZE_SAMURAI", value: 244 ),
        ( name: "CREATURE_ID_BOMB_ROCK", value: 245 ),
        ( name: "CREATURE_ID_SILVER_CAT", value: 246 ),
        ( name: "CREATURE_ID_MIA_THE_CAT_FREAK", value: 247 ),
        ( name: "CREATURE_ID_TYRANNOSAURUS", value: 248 ),
        ( name: "CREATURE_ID_YOUNGER_SISTER2", value: 249 ),
        ( name: "CREATURE_ID_FAIRY", value: 250 ),
        ( name: "CREATURE_ID_TROLL", value: 251 ),
        ( name: "CREATURE_ID_RENTON_THE_SUFFERING_WIZARD", value: 252 ),
        ( name: "CREATURE_ID_MARKS_THE_GREAT_THIEF", value: 253 ),
        ( name: "CREATURE_ID_ANCIENT_COFFIN", value: 254 ),
        ( name: "CREATURE_ID_SCORPION", value: 255 ),
        ( name: "CREATURE_ID_KING_SCORPION", value: 256 ),
        ( name: "CREATURE_ID_TUWEN_THE_MASTER_OF_THE_PYRAMID", value: 257 ),
        ( name: "CREATURE_ID_IRON_MAIDEN", value: 258 ),
        ( name: "CREATURE_ID_NOEL_THE_BOMBER", value: 259 ),
        ( name: "CREATURE_ID_BLACK_CAT", value: 260 ),
        ( name: "CREATURE_ID_CUTE_FAIRY", value: 261 ),
        ( name: "CREATURE_ID_ANDROID", value: 262 ),
        ( name: "CREATURE_ID_BLACK_ANGEL", value: 263 ),
        ( name: "CREATURE_ID_EXILE", value: 264 ),
        ( name: "CREATURE_ID_GOLDEN_KNIGHT", value: 265 ),
        ( name: "CREATURE_ID_DEFENDER", value: 266 ),
        ( name: "CREATURE_ID_LAME_HORSE", value: 267 ),
        ( name: "CREATURE_ID_YOWYN_HORSE", value: 268 ),
        ( name: "CREATURE_ID_FARMER", value: 269 ),
        ( name: "CREATURE_ID_NUN", value: 270 ),
        ( name: "CREATURE_ID_ROGUE", value: 271 ),
        ( name: "CREATURE_ID_ARTIST", value: 272 ),
        ( name: "CREATURE_ID_MINER", value: 273 ),
        ( name: "CREATURE_ID_NOBLE", value: 274 ),
        ( name: "CREATURE_ID_NOYEL_HORSE", value: 275 ),
        ( name: "CREATURE_ID_WILD_HORSE", value: 276 ),
        ( name: "CREATURE_ID_THOROUGHBRED", value: 277 ),
        ( name: "CREATURE_ID_MUTANT", value: 278 ),
        ( name: "CREATURE_ID_ICOLLE_THE_BIOLOGIST", value: 279 ),
        ( name: "CREATURE_ID_BALZAK_THE_JANITOR", value: 280 ),
        ( name: "CREATURE_ID_LIZARD_MAN", value: 281 ),
        ( name: "CREATURE_ID_MINOTAUR", value: 282 ),
        ( name: "CREATURE_ID_SPORE_MUSHROOM", value: 283 ),
        ( name: "CREATURE_ID_CHAOS_MUSHROOM", value: 284 ),
        ( name: "CREATURE_ID_BLUE_BUBBLE", value: 285 ),
        ( name: "CREATURE_ID_BUBBLE", value: 286 ),
        ( name: "CREATURE_ID_MASS_MONSTER", value: 287 ),
        ( name: "CREATURE_ID_REVLUS_THE_MAGE_GUILDMASTER", value: 288 ),
        ( name: "CREATURE_ID_MAGE_GUILD_MEMBER", value: 289 ),
        ( name: "CREATURE_ID_LEXUS_THE_MAGE_WATCHMAN", value: 290 ),
        ( name: "CREATURE_ID_FRAY_THE_FIGHTER_GUILDMASTER", value: 291 ),
        ( name: "CREATURE_ID_SIN_THE_THIEF_GUILDMASTER", value: 292 ),
        ( name: "CREATURE_ID_THIEF_GUILD_MEMBER", value: 293 ),
        ( name: "CREATURE_ID_ABYSS_THE_THIEF_WATCHMAN", value: 294 ),
        ( name: "CREATURE_ID_FIGHTER_GUILD_MEMBER", value: 295 ),
        ( name: "CREATURE_ID_MINOTAUR_MAGICIAN", value: 296 ),
        ( name: "CREATURE_ID_DORIA_THE_FIGHTER_WATCHMAN", value: 297 ),
        ( name: "CREATURE_ID_MINOTAUR_BOXER", value: 298 ),
        ( name: "CREATURE_ID_MINOTAUR_KING", value: 299 ),
        ( name: "CREATURE_ID_UNGAGA_THE_MINOTAUR_KING", value: 300 ),
        ( name: "CREATURE_ID_CONERY_PALMIAN_MAJOR_GENERAL", value: 301 ),
        ( name: "CREATURE_ID_ROGUE_BOSS", value: 302 ),
        ( name: "CREATURE_ID_ROGUE_WARRIOR", value: 303 ),
        ( name: "CREATURE_ID_ROGUE_ARCHER", value: 304 ),
        ( name: "CREATURE_ID_ROGUE_WIZARD", value: 305 ),
        ( name: "CREATURE_ID_LULWY", value: 306 ),
        ( name: "CREATURE_ID_EXECUTIONER", value: 307 ),
        ( name: "CREATURE_ID_MESSENGER_OF_DEATH", value: 308 ),
        ( name: "CREATURE_ID_ASURA", value: 309 ),
        ( name: "CREATURE_ID_MITRA", value: 310 ),
        ( name: "CREATURE_ID_VARUNA", value: 311 ),
        ( name: "CREATURE_ID_HUNGRY_SEA_LION", value: 312 ),
        ( name: "CREATURE_ID_SUPER_HUNGRY_SEA_LION", value: 313 ),
        ( name: "CREATURE_ID_DEATH_GAZE", value: 314 ),
        ( name: "CREATURE_ID_CHAOS_EYE", value: 315 ),
        ( name: "CREATURE_ID_MAD_GAZE", value: 316 ),
        ( name: "CREATURE_ID_SILVER_EYED_WITCH", value: 317 ),
        ( name: "CREATURE_ID_BIG_DADDY", value: 318 ),
        ( name: "CREATURE_ID_LITTLE_SISTER", value: 319 ),
        ( name: "CREATURE_ID_CLEANER", value: 320 ),
        ( name: "CREATURE_ID_HARD_GAY", value: 321 ),
        ( name: "CREATURE_ID_STRANGE_SCIENTIST", value: 322 ),
        ( name: "CREATURE_ID_SHADE", value: 323 ),
        ( name: "CREATURE_ID_QUICKLING", value: 324 ),
        ( name: "CREATURE_ID_QUICKLING_ARCHER", value: 325 ),
        ( name: "CREATURE_ID_BARD", value: 326 ),
        ( name: "CREATURE_ID_CUBE", value: 327 ),
        ( name: "CREATURE_ID_PLATINA_BELL", value: 328 ),
        ( name: "CREATURE_ID_GOLD_BELL", value: 329 ),
        ( name: "CREATURE_ID_ALIEN", value: 330 ),
        ( name: "CREATURE_ID_EHEKATL", value: 331 ),
        ( name: "CREATURE_ID_STRAY_CAT", value: 332 ),
        ( name: "CREATURE_ID_GUILD_TRAINER", value: 333 ),
        ( name: "CREATURE_ID_MYSTERIOUS_PRODUCER", value: 334 ),
        ( name: "CREATURE_ID_PROSTITUTE", value: 335 ),
        ( name: "CREATURE_ID_GOD_INSIDE_EHEKATL", value: 336 ),
        ( name: "CREATURE_ID_PRISONER", value: 337 ),
        ( name: "CREATURE_ID_OPATOS", value: 338 ),
        ( name: "CREATURE_ID_KUMIROMI", value: 339 ),
        ( name: "CREATURE_ID_ZILLA", value: 340 ),
        ( name: "CREATURE_ID_MINE_DOG", value: 341 ),
        ( name: "CREATURE_ID_MANI", value: 342 ),
        ( name: "CREATURE_ID_USER", value: 343 ),
        ( name: "CREATURE_ID_MAMMOTH", value: 344 ),
        ( name: "CREATURE_ID_KANEDA_BIKE", value: 345 ),
        ( name: "CREATURE_ID_CUB", value: 346 ),
        ( name: "CREATURE_ID_JURE_FANATIC", value: 347 ),
        ( name: "CREATURE_ID_PART_TIME_WORKER", value: 348 ),
        ( name: "CREATURE_ID_HOLY_BEAST", value: 349 ),
        ( name: "CREATURE_ID_FESTIVAL_TOURIST", value: 350 ),
        ( name: "CREATURE_ID_THE_LEOPARD_WARRIOR", value: 351 ),
        ( name: "CREATURE_ID_SILVIA_THE_PRINCESS", value: 352 ),
        ( name: "CREATURE_ID_CARAVAN_MASTER", value: 353 ),

        ( name: "MAX_CREATURE_ID", value: 358, code_value: "CREATURE_ID_CARAVAN_MASTER + 3" ),
      ]
    ),

    "item": (
      variables: [
        ( name: "MAX_MAP_INV", value: 400, ),
        ( name: "SIZE_INV1", value: 200, ),
        ( name: "SIZE_INV2", value: 20, ),
        ( name: "RANGE_INV1", value: 1320, code_value: "SIZE_INV2 * MAX_CHARA_NC + SIZE_INV1" ),
        ( name: "RANGE_INV2", value: 5080, code_value: "SIZE_INV2 * (MAX_CHARA_TOTAL - MAX_CHARA_NULL) + SIZE_INV1" ),
        ( name: "MAX_INV_DATA", value: 5480, code_value: "RANGE_INV2 + MAX_MAP_INV" ),
      ],
      ignore: [ -1, 0, 1 ]
    ),
    "limits": (
      variables: [
        ( name: "RANGE_PLAYER_PIC", value: 67, code_value: "xy2pic(1, 2)", ),

        ( name: "MAX_CDATAN", value: 10, ),
        ( name: "MAX_ITEMN", value: 6, ),
        ( name: "MAX_MDATAN", value: 2, ),
        ( name: "MAX_GDATAN", value: 50, ),

        ( name: "MAX_DB", value: "1199", ),
      ]
    ),
    "skill_id": (
      variables: [
        ( name: "SKILL_NONE", value: 0 ),

        // Absolute skill limits
        ( name: "MAX_SPACT_COUNT", value: 500 ),
        ( name: "MAX_SPELL_COUNT", value: 200, code_value: "STARTING_SKILL_SPACT - STARTING_SKILL_SPELL", exclude: true ),

        ( name: "MAX_SKILL_RANGE", value: 600, ),
        ( name: "MAX_SKILL_DATA", value: 1200, code_value: "MAX_SKILL_RANGE * 2", ),
      ],
      includes: [
        "skill_attribute",
        "skill_resist",
        "skill_damage_resist",
        "skill_normal",
        "skill_active",
        "skill_weapon",
        "skill_spell",
        "skill_spact",
        "skill_effect"
      ],
    ),
    "skill_attribute": (
      variables: [
        ( name: "SKILL_ATTR_LIFE", value: 2, ),
        ( name: "SKILL_ATTR_MANA", value: 3, ),

        ( name: "SKILL_ATTR_STR", value: 10, ),
        ( name: "SKILL_ATTR_CON", value: 11, ),
        ( name: "SKILL_ATTR_DEX", value: 12, ),
        ( name: "SKILL_ATTR_PER", value: 13, ),
        ( name: "SKILL_ATTR_LER", value: 14, ),
        ( name: "SKILL_ATTR_WIL", value: 15, ),
        ( name: "SKILL_ATTR_MAG", value: 16, ),
        ( name: "SKILL_ATTR_CHA", value: 17, ),
        ( name: "SKILL_ATTR_SPD", value: 18, ),
        ( name: "SKILL_ATTR_LUC", value: 19, ),

        ( name: "STARTING_SKILL_ATTR", value: 10, code_value: "SKILL_ATTR_STR", exclude: true ),
        ( name: "MAX_SKILL_ATTR_BASIC", value: 8, exclude: true ),
        ( name: "MAX_SKILL_ATTR", value: 20, code_value: "STARTING_SKILL_ATTR + MAX_SKILL_ATTR_BASIC + 2", exclude: true ),
      ]
    ),
    "skill_resist": (
      variables: [
        ( name: "STARTING_SKILL_RESIST", value: 50, exclude: true ),

        ( name: "SKILL_RES_FIRE", value: 50, ),
        ( name: "SKILL_RES_COLD", value: 51, ),
        ( name: "SKILL_RES_LIGHTNING", value: 52, ),
        ( name: "SKILL_RES_DARKNESS", value: 53, ),
        ( name: "SKILL_RES_MIND", value: 54, ),
        ( name: "SKILL_RES_POISON", value: 55, ),
        ( name: "SKILL_RES_NETHER", value: 56, ),
        ( name: "SKILL_RES_SOUND", value: 57, ),
        ( name: "SKILL_RES_NERVE", value: 58, ),
        ( name: "SKILL_RES_CHAOS", value: 59, ),
        ( name: "SKILL_RES_MAGIC", value: 60, ),

        ( name: "MAX_SKILL_RESIST", value: 71, code_value: "SKILL_RES_MAGIC + 1" ),
      ]
    ),
    "skill_damage_resist": (
      variables: [
        ( name: "SKILL_RESDMG_CUT", value: 61, ),
        ( name: "SKILL_RESDMG_ETHER", value: 62, ),
        ( name: "SKILL_RESDMG_ACID", value: 63, ),

        ( name: "MAX_SKILL_RESDMG", value: 64, code_value: "SKILL_RESDMG_ACID + 1" ),
      ]
    ),
    "skill_all_resist": (
      includes: [
        "skill_resist",
        "skill_damage_resist",
      ],
      variables: [
        ( name: "SKILL_NONE", value: 0 ),
      ],
      ignore: [ 11, 200, 250, 300 ]
    ),
    "skill_weapon": (
      variables: [
        ( name: "STARTING_SKILL_WEAPON", value: 100, exclude: true ),

        ( name: "SKILL_WEAPON_LONGSWORD", value: 100, ),
        ( name: "SKILL_WEAPON_SHORTSWORD", value: 101, ),
        ( name: "SKILL_WEAPON_AXE", value: 102, ),
        ( name: "SKILL_WEAPON_BLUNT", value: 103, ),
        ( name: "SKILL_WEAPON_POLEARM", value: 104, ),
        ( name: "SKILL_WEAPON_STAVE", value: 105, ),
        ( name: "SKILL_WEAPON_MARTIAL_ARTS", value: 106, ),
        ( name: "SKILL_WEAPON_SCYTHE", value: 107, ),
        ( name: "SKILL_WEAPON_BOW", value: 108, ),
        ( name: "SKILL_WEAPON_CROSSBOW", value: 109, ),
        ( name: "SKILL_WEAPON_FIREARM", value: 110, ),
        ( name: "SKILL_WEAPON_THROWING", value: 111, ),

        ( name: "MAX_SKILL_WEAPON", value: 112, code_value: "SKILL_WEAPON_THROWING + 1" ),
      ]
    ),
    "skill_normal": (
      variables: [
        ( name: "STARTING_SKILL_NORMAL", value: 150, exclude: true ),

        ( name: "SKILL_NORMAL_LITERACY", value: 150, ),
        ( name: "SKILL_NORMAL_GENE_ENGINEER", value: 151, ),
        ( name: "SKILL_NORMAL_TACTICS", value: 152, ),
        ( name: "SKILL_NORMAL_WEIGHT_LIFTING", value: 153, ),
        ( name: "SKILL_NORMAL_HEALING", value: 154, ),
        ( name: "SKILL_NORMAL_MEDITATION", value: 155, ),
        ( name: "SKILL_NORMAL_NEGOTIATION", value: 156, ),
        ( name: "SKILL_NORMAL_STEALTH", value: 157, ),
        ( name: "SKILL_NORMAL_LOCK_PICKING", value: 158, ),
        ( name: "SKILL_NORMAL_DETECTION", value: 159, ),
        ( name: "SKILL_NORMAL_INVESTING", value: 160, ),
        ( name: "SKILL_NORMAL_ANATOMY", value: 161, ),
        ( name: "SKILL_NORMAL_SENSE_QUALITY", value: 162, ),
        ( name: "SKILL_NORMAL_MINING", value: 163, ),
        ( name: "SKILL_NORMAL_MAGIC_CAPACITY", value: 164, ),
        ( name: "SKILL_NORMAL_MEMORIZATION", value: 165, ),
        ( name: "SKILL_NORMAL_DUAL_WIELD", value: 166, ),
        ( name: "SKILL_NORMAL_TWO_HAND", value: 167, ),
        ( name: "SKILL_NORMAL_SHIELD", value: 168, ),
        ( name: "SKILL_NORMAL_HEAVY_ARMOR", value: 169, ),
        ( name: "SKILL_NORMAL_MEDIUM_ARMOR", value: 170, ),
        ( name: "SKILL_NORMAL_LIGHT_ARMOR", value: 171, ),
        ( name: "SKILL_NORMAL_CASTING", value: 172, ),
        ( name: "SKILL_NORMAL_EVASION", value: 173, ),
        ( name: "SKILL_NORMAL_MAGIC_DEVICE", value: 174, ),
        ( name: "SKILL_NORMAL_DISARM_TRAP", value: 175, ),
        ( name: "SKILL_NORMAL_CARPENTRY", value: 176, ),
        ( name: "SKILL_NORMAL_TAILORING", value: 177, ),
        ( name: "SKILL_NORMAL_ALCHEMY", value: 178, ),
        ( name: "SKILL_NORMAL_JEWELER", value: 179, ),
        ( name: "SKILL_NORMAL_GARDENING", value: 180, ),
        ( name: "SKILL_NORMAL_FAITH", value: 181, ),
        ( name: "SKILL_NORMAL_TRAVELING", value: 182, ),
        ( name: "SKILL_NORMAL_PERFORMER", value: 183, ),
        ( name: "SKILL_NORMAL_COOKING", value: 184, ),
        ( name: "SKILL_NORMAL_FISHING", value: 185, ),
        ( name: "SKILL_NORMAL_EYE_OF_MIND", value: 186, ),
        ( name: "SKILL_NORMAL_GREATER_EVASION", value: 187, ),
        ( name: "SKILL_NORMAL_CONTROL_MAGIC", value: 188, ),
        ( name: "SKILL_NORMAL_MARKSMAN", value: 189, ),
        ( name: "SKILL_NORMAL_SWIMMING", value: 190, ),

        ( name: "MAX_SKILL_NORMAL", value: 191, code_value: "SKILL_NORMAL_SWIMMING + 1" ),
      ]
    ),
    "skill_active": (
      variables: [
        ( name: "STARTING_SKILL_ACTIVE", value: 300, exclude: true ),

        ( name: "SKILL_ACTIVE_PICKPOCKET", value: 300, ),
        ( name: "SKILL_ACTIVE_RIDING", value: 301, ),

        ( name: "MAX_SKILL_ACTIVE", value: 302, code_value: "SKILL_ACTIVE_RIDING + 1" ),
      ]
    ),
    "skill_spell": (
      variables: [
        ( name: "STARTING_SKILL_SPELL", value: 400, exclude: true ),

        ( name: "SKILL_SPELL_HEAL_LIGHT", value: 400, ),
        ( name: "SKILL_SPELL_HEAL_CRITICAL", value: 401, ),
        ( name: "SKILL_SPELL_CURE_OF_ERIS", value: 402, ),
        ( name: "SKILL_SPELL_CURE_OF_JURE", value: 403, ),
        ( name: "SKILL_SPELL_HEALING_RAIN", value: 404, ),
        ( name: "SKILL_SPELL_HEALING_TOUCH", value: 405, ),
        ( name: "SKILL_SPELL_HOLY_LIGHT", value: 406, ),
        ( name: "SKILL_SPELL_VANQUISH_HEX", value: 407, ),
        ( name: "SKILL_SPELL_TELEPORT", value: 408, ),
        ( name: "SKILL_SPELL_TELEPORT_OTHER", value: 409, ),
        ( name: "SKILL_SPELL_SHORT_TELEPORT", value: 410, ),
        ( name: "SKILL_SPELL_IDENTIFY", value: 411, ),
        ( name: "SKILL_SPELL_UNCURSE", value: 412, ),
        ( name: "SKILL_SPELL_ORACLE", value: 413, ),
        ( name: "SKILL_SPELL_MAGIC_DART", value: 414, ),
        ( name: "SKILL_SPELL_NETHER_ARROW", value: 415, ),
        ( name: "SKILL_SPELL_NERVE_ARROW", value: 416, ),
        ( name: "SKILL_SPELL_CHAOS_EYE", value: 417, ),
        ( name: "SKILL_SPELL_DARK_EYE", value: 418, ),
        ( name: "SKILL_SPELL_ICE_BOLT", value: 419, ),
        ( name: "SKILL_SPELL_FIRE_BOLT", value: 420, ),
        ( name: "SKILL_SPELL_LIGHTNING_BOLT", value: 421, ),
        ( name: "SKILL_SPELL_DARKNESS_BOLT", value: 422, ),
        ( name: "SKILL_SPELL_MIND_BOLT", value: 423, ),
        ( name: "SKILL_SPELL_SUMMON_MONSTERS", value: 424, ),
        ( name: "SKILL_SPELL_SUMMON_WILD", value: 425, ),
        ( name: "SKILL_SPELL_RETURN", value: 428, ),
        ( name: "SKILL_SPELL_MAGIC_MAP", value: 429, ),
        ( name: "SKILL_SPELL_SENSE_OBJECT", value: 430, ),
        ( name: "SKILL_SPELL_ICE_BALL", value: 431, ),
        ( name: "SKILL_SPELL_FIRE_BALL", value: 432, ),
        ( name: "SKILL_SPELL_CHAOS_BALL", value: 433, ),
        ( name: "SKILL_SPELL_RAGING_ROAR", value: 434, ),
        ( name: "SKILL_SPELL_DOMINATE", value: 435, ),
        ( name: "SKILL_SPELL_WEB", value: 436, ),
        ( name: "SKILL_SPELL_MIST_OF_DARKNESS", value: 437, ),
        ( name: "SKILL_SPELL_WALL_CREATION", value: 438, ),
        ( name: "SKILL_SPELL_RESTORE_BODY", value: 439, ),
        ( name: "SKILL_SPELL_RESTORE_SPIRIT", value: 440, ),
        ( name: "SKILL_SPELL_WISH", value: 441, ),
        ( name: "SKILL_SPELL_HOLY_SHIELD", value: 442, ),
        ( name: "SKILL_SPELL_MIST_OF_SILENCE", value: 443, ),
        ( name: "SKILL_SPELL_REGENERATION", value: 444, ),
        ( name: "SKILL_SPELL_ATTRIBUTE_SHIELD", value: 445, ),
        ( name: "SKILL_SPELL_SPEED", value: 446, ),
        ( name: "SKILL_SPELL_SLOW", value: 447, ),
        ( name: "SKILL_SPELL_HERO", value: 448, ),
        ( name: "SKILL_SPELL_MIST_OF_FRAILNESS", value: 449, ),
        ( name: "SKILL_SPELL_ELEMENT_SCAR", value: 450, ),
        ( name: "SKILL_SPELL_HOLY_VEIL", value: 451, ),
        ( name: "SKILL_SPELL_NIGHTMARE", value: 452, ),
        ( name: "SKILL_SPELL_DIVINE_WISDOM", value: 453, ),
        ( name: "SKILL_SPELL_MUTATION", value: 454, ),
        ( name: "SKILL_SPELL_ACID_GROUND", value: 455, ),
        ( name: "SKILL_SPELL_FIRE_WALL", value: 456, ),
        ( name: "SKILL_SPELL_DOOR_CREATION", value: 457, ),
        ( name: "SKILL_SPELL_INCOGNITO", value: 458, ),
        ( name: "SKILL_SPELL_CRYSTAL_SPEAR", value: 459, ),
        ( name: "SKILL_SPELL_MAGIC_STORM", value: 460, ),
        ( name: "SKILL_SPELL_RESURRECTION", value: 461, ),
        ( name: "SKILL_SPELL_CONTINGENCY", value: 462, ),
        ( name: "SKILL_SPELL_4DIM_POCKET", value: 463, ),
        ( name: "SKILL_SPELL_WIZARDS_HARVEST", value: 464, ),
        ( name: "SKILL_SPELL_METEOR", value: 465, ),
        ( name: "SKILL_SPELL_GRAVITY", value: 466, ),

        ( name: "MAX_SPELL", value: 467, code_value: "SKILL_SPELL_GRAVITY + 1" ),
      ]
    ),
    "skill_spact": (
      variables: [
        ( name: "STARTING_SKILL_SPACT", value: 600 ),

        ( name: "SKILL_SPACT_DRAIN_BLOOD", value: 601, ),
        ( name: "SKILL_SPACT_FIRE_BREATH", value: 602, ),
        ( name: "SKILL_SPACT_COLD_BREATH", value: 603, ),
        ( name: "SKILL_SPACT_LIGHTNING_BREATH", value: 604, ),
        ( name: "SKILL_SPACT_DARKNESS_BREATH", value: 605, ),
        ( name: "SKILL_SPACT_CHAOS_BREATH", value: 606, ),
        ( name: "SKILL_SPACT_SOUND_BREATH", value: 607, ),
        ( name: "SKILL_SPACT_NETHER_BREATH", value: 608, ),
        ( name: "SKILL_SPACT_NERVE_BREATH", value: 609, ),
        ( name: "SKILL_SPACT_POISON_BREATH", value: 610, ),
        ( name: "SKILL_SPACT_MIND_BREATH", value: 611, ),
        ( name: "SKILL_SPACT_POWER_BREATH", value: 612, ),
        ( name: "SKILL_SPACT_TOUCH_OF_WEAKNESS", value: 613, ),
        ( name: "SKILL_SPACT_TOUCH_OF_HUNGER", value: 614, ),
        ( name: "SKILL_SPACT_TOUCH_OF_POISON", value: 615, ),
        ( name: "SKILL_SPACT_TOUCH_OF_NERVE", value: 616, ),
        ( name: "SKILL_SPACT_TOUCH_OF_FEAR", value: 617, ),
        ( name: "SKILL_SPACT_TOUCH_OF_SLEEP", value: 618, ),
        ( name: "SKILL_SPACT_SHADOW_STEP", value: 619, ),
        ( name: "SKILL_SPACT_DRAW_SHADOW", value: 620, ),
        ( name: "SKILL_SPACT_HARVEST_MANA", value: 621, ),
        ( name: "SKILL_SPACT_PUNISHMENT", value: 622, ),
        ( name: "SKILL_SPACT_PRAYER_OF_JURE", value: 623, ),
        ( name: "SKILL_SPACT_ABSORB_MAGIC", value: 624, ),
        ( name: "SKILL_SPACT_LULWYS_TRICK", value: 625, ),
        ( name: "SKILL_SPACT_PSYCHOANALYSIS", value: 626, ),
        ( name: "SKILL_SPACT_DIMENSIONAL_MOVE", value: 627, ),
        ( name: "SKILL_SPACT_CHANGE", value: 628, ),
        ( name: "SKILL_SPACT_DRAW_CHARGE", value: 629, ),
        ( name: "SKILL_SPACT_FILL_CHARGE", value: 630, ),
        ( name: "SKILL_SPACT_SWARM", value: 631, ),
        ( name: "SKILL_SPACT_EYE_OF_MUTATION", value: 632, ),
        ( name: "SKILL_SPACT_EYE_OF_ETHER", value: 633, ),
        ( name: "SKILL_SPACT_ETHER_GROUND", value: 634, ),
        ( name: "SKILL_SPACT_SUSPICIOUS_HAND", value: 635, ),
        ( name: "SKILL_SPACT_EYE_OF_INSANITY", value: 636, ),
        ( name: "SKILL_SPACT_RAIN_OF_SANITY", value: 637, ),
        ( name: "SKILL_SPACT_EYE_OF_DIMNESS", value: 638, ),
        ( name: "SKILL_SPACT_SUMMON_CATS", value: 639, ),
        ( name: "SKILL_SPACT_SUMMON_YEEK", value: 640, ),
        ( name: "SKILL_SPACT_SUMMON_PAWN", value: 641, ),
        ( name: "SKILL_SPACT_SUMMON_FIRE", value: 642, ),
        ( name: "SKILL_SPACT_SUMMON_SISTER", value: 643, ),
        ( name: "SKILL_SPACT_SUICIDE_ATTACK", value: 644, ),
        ( name: "SKILL_SPACT_CURSE", value: 645, ),
        ( name: "SKILL_SPACT_DEATH_WORD", value: 646, ),
        ( name: "SKILL_SPACT_BOOST", value: 647, ),
        ( name: "SKILL_SPACT_INSULT", value: 648, ),
        ( name: "SKILL_SPACT_SHINING_WAVE", value: 649, ),
        ( name: "SKILL_SPACT_DISTANT_ATTACK7", value: 650, ),
        ( name: "SKILL_SPACT_SCAVENGE", value: 651, ),
        ( name: "SKILL_SPACT_EYE_OF_MANA", value: 652, ),
        ( name: "SKILL_SPACT_VANISH", value: 653, ),
        ( name: "SKILL_SPACT_PREGNANT", value: 654, ),
        ( name: "SKILL_SPACT_GRENADE", value: 655, ),
        ( name: "SKILL_SPACT_CHEER", value: 656, ),
        ( name: "SKILL_SPACT_MEWMEWMEW", value: 657, ),
        ( name: "SKILL_SPACT_DECAPITATION", value: 658, ),
        ( name: "SKILL_SPACT_DROP_MINE", value: 659, ),
        ( name: "SKILL_SPACT_MANIS_DISASSEMBLY", value: 660, ),

        ( name: "MAX_SKILL", value: 661, code_value: "SKILL_SPACT_MANIS_DISASSEMBLY + 1" ),
      ]
    ),
    "skill_effect": (
      variables: [
        (
          name: "SKILL_EFFECT_MIN",
          value: 1100,
          code_value: "STARTING_SKILL_SPACT + MAX_SPACT_COUNT"
        ),

        (
          name: "SKILL_EFFECT_POTION_MILK",
          value: 1101,
          code_value: "SKILL_EFFECT_MIN + 1"
        ),
        (
          name: "SKILL_EFFECT_POTION_ALE",
          value: 1102,
          code_value: "SKILL_EFFECT_MIN + 2"
        ),
        (
          name: "SKILL_EFFECT_POTION_WATER",
          value: 1103,
          code_value: "SKILL_EFFECT_MIN + 3"
        ),
        (
          name: "SKILL_EFFECT_GAIN_SPELL",
          value: 1104,
          code_value: "SKILL_EFFECT_MIN + 4"
        ),
        (
          name: "SKILL_EFFECT_GAIN_SKILL",
          value: 1105,
          code_value: "SKILL_EFFECT_MIN + 5"
        ),
        (
          name: "SKILL_EFFECT_DECREASE_STAT",
          value: 1106,
          code_value: "SKILL_EFFECT_MIN + 6"
        ),
        (
          name: "SKILL_EFFECT_GAIN_FAITH",
          value: 1107,
          code_value: "SKILL_EFFECT_MIN + 7"
        ),
        (
          name: "SKILL_EFFECT_POISON",
          value: 1108,
          code_value: "SKILL_EFFECT_MIN + 8"
        ),
        (
          name: "SKILL_EFFECT_CONFUSE",
          value: 1109,
          code_value: "SKILL_EFFECT_MIN + 9"
        ),
        (
          name: "SKILL_EFFECT_PARALYZE",
          value: 1110,
          code_value: "SKILL_EFFECT_MIN + 10"
        ),
        (
          name: "SKILL_EFFECT_BLIND",
          value: 1111,
          code_value: "SKILL_EFFECT_MIN + 11"
        ),
        (
          name: "SKILL_EFFECT_SLEEP",
          value: 1112,
          code_value: "SKILL_EFFECT_MIN + 12"
        ),
        (
          name: "SKILL_EFFECT_POTION_POTENTIAL",
          value: 1113,
          code_value: "SKILL_EFFECT_MIN + 13"
        ),
        (
          name: "SKILL_EFFECT_CURSE",
          value: 1114,
          code_value: "SKILL_EFFECT_MIN + 14"
        ),
        (
          name: "SKILL_EFFECT_CREATE_BUILDING",
          value: 1115,
          code_value: "SKILL_EFFECT_MIN + 15"
        ),
        (
          name: "SKILL_EFFECT_POTION_SULFURIC",
          value: 1116,
          code_value: "SKILL_EFFECT_MIN + 16"
        ),
        (
          name: "SKILL_EFFECT_CREATE_MATERIAL",
          value: 1117,
          code_value: "SKILL_EFFECT_MIN + 17"
        ),
        (
          name: "SKILL_EFFECT_DECREASE_RESIST",
          value: 1118,
          code_value: "SKILL_EFFECT_MIN + 18"
        ),
        (
          name: "SKILL_EFFECT_GAIN_GROWTH",
          value: 1119,
          code_value: "SKILL_EFFECT_MIN + 19"
        ),
        (
          name: "SKILL_EFFECT_ELIXER",
          value: 1120,
          code_value: "SKILL_EFFECT_MIN + 20"
        ),
        (
          name: "SKILL_EFFECT_LOSE_MUTATION",
          value: 1121,
          code_value: "SKILL_EFFECT_MIN + 21"
        ),
        (
          name: "SKILL_EFFECT_GAIN_ALLY",
          value: 1122,
          code_value: "SKILL_EFFECT_MIN + 22"
        ),
        (
          name: "SKILL_EFFECT_GAIN_SISTER",
          value: 1123,
          code_value: "SKILL_EFFECT_MIN + 23"
        ),
        (
          name: "SKILL_EFFECT_ENCHANT_WEAPON",
          value: 1124,
          code_value: "SKILL_EFFECT_MIN + 24"
        ),
        (
          name: "SKILL_EFFECT_ENCHANT_ARMOR",
          value: 1125,
          code_value: "SKILL_EFFECT_MIN + 25"
        ),
        (
          name: "SKILL_EFFECT_GAIN_SPEED_2",
          value: 1126,
          code_value: "SKILL_EFFECT_MIN + 26"
        ),
        (
          name: "SKILL_EFFECT_CHANGE_MATERIAL",
          value: 1127,
          code_value: "SKILL_EFFECT_MIN + 27"
        ),
        (
          name: "SKILL_EFFECT_HEIR_DEED",
          value: 1128,
          code_value: "SKILL_EFFECT_MIN + 28"
        ),
        (
          name: "SKILL_EFFECT_RECHARGE",
          value: 1129,
          code_value: "SKILL_EFFECT_MIN + 29"
        ),
        (
          name: "SKILL_EFFECT_POTION_DIRTY_WATER",
          value: 1130,
          code_value: "SKILL_EFFECT_MIN + 30"
        ),
        (
          name: "SKILL_EFFECT_POTION_CURE_CORRUPTION",
          value: 1131,
          code_value: "SKILL_EFFECT_MIN + 31"
        ),
        (
          name: "SKILL_EFFECT_CHANGE_ITEM",
          value: 1132,
          code_value: "SKILL_EFFECT_MIN + 32"
        ),
        (
          name: "SKILL_EFFECT_POTION_MOLOTOV",
          value: 1133,
          code_value: "SKILL_EFFECT_MIN + 33"
        ),

        (
          name: "SKILL_EFFECT_POTION_LOVE",
          value: 1135,
          code_value: "SKILL_EFFECT_MIN + 35"
        ),
        (
          name: "SKILL_EFFECT_TREASURE_MAP",
          value: 1136,
          code_value: "SKILL_EFFECT_MIN + 36"
        ),
        (
          name: "SKILL_EFFECT_GAIN_GIRL",
          value: 1137,
          code_value: "SKILL_EFFECT_MIN + 37"
        ),
        (
          name: "SKILL_EFFECT_GAIN_CAT_SISTER",
          value: 1138,
          code_value: "SKILL_EFFECT_MIN + 38"
        ),

        (
          name: "SKILL_EFFECT_GAIN_SPEED", // Plus Custom-G
          value: 1139,
          code_value: "SKILL_EFFECT_MIN + 39"
        ),

        (
          name: "SKILL_EFFECT_DECREASE_WEIGHT",
          value: 1140,
          code_value: "SKILL_EFFECT_MIN + 40"
        ),
        (
          name: "SKILL_EFFECT_ESCAPE",
          value: 1141,
          code_value: "SKILL_EFFECT_MIN + 41"
        ),
        (
          name: "SKILL_EFFECT_POTION_SALT",
          value: 1142,
          code_value: "SKILL_EFFECT_MIN + 42"
        ),
        (
          name: "SKILL_EFFECT_POTION_DESCENT",
          value: 1143,
          code_value: "SKILL_EFFECT_MIN + 43"
        ),
        (
          name: "SKILL_EFFECT_POTION_EVOLUTION",
          value: 1144,
          code_value: "SKILL_EFFECT_MIN + 44"
        ),
        (
          name: "SKILL_EFFECT_RENAME_ITEM",
          value: 1145,
          code_value: "SKILL_EFFECT_MIN + 45"
        ),
        (
          name: "SKILL_EFFECT_POTION_SODA",
          value: 1146,
          code_value: "SKILL_EFFECT_MIN + 46"
        ),
        (
          name: "SKILL_EFFECT_POTION_CAPSULE",
          value: 1147,
          code_value: "SKILL_EFFECT_MIN + 47"
        ),
        (
          name: "SKILL_EFFECT_GAIN_OLDER_SISTER",
          value: 1148,
          code_value: "SKILL_EFFECT_MIN + 48"
        ),
        (
          name: "SKILL_EFFECT_GAIN_DOG_SISTER",
          value: 1149,
          code_value: "SKILL_EFFECT_MIN + 49"
        ),
        (
          name: "SKILL_EFFECT_VERNIS_ORIGINAL",
          value: 1150,
          code_value: "SKILL_EFFECT_MIN + 50"
        ),
      ]
    ),
    "skill_or_buff_id": (
      includes: [
        "skill_id",
        "buff_id"
      ],
      ignore: [ -1 ]
    ),
    "all_ai_actions": (
        includes: [
        "ai_action",
        "skill_id"
        ]
    ),
    "ai_action": (
      variables: [
        // Basic actions
        ( name: "ACTION_MELEE", value: -1, ),
        ( name: "ACTION_RANGE", value: -2, ),
        ( name: "ACTION_WAIT_MELEE", value: -3, ),
        ( name: "ACTION_RANDOM_MOVE", value: -4, ),

        // Throwing ai_actions
        ( name: "ACTION_THROW", value: -10000, ),
        ( name: "ACTION_THROW_POTION_MINOR", value: -9999, ),
        ( name: "ACTION_THROW_POTION_MAJOR", value: -9998, ),
        ( name: "ACTION_THROW_POTION_GREATER", value: -9997, ),
        ( name: "ACTION_THROW_POTION_SALT", value: -9996, ),
        ( name: "MAX_ACTION_THROW", value: -9995 ),
      ],
    ),
    "ai_action_or_skill": (
      includes: [
        "skill_or_buff_id",
        "ai_action"
      ]
    ),
    "action_1": (
      variables: [
        ( name: "ACTION_NONE", value: 0, ),
        ( name: "ACTION_EAT", value: 1, ),
        ( name: "ACTION_READ", value: 2, ),
        ( name: "ACTION_TRAVEL", value: 3, ),
        ( name: "ACTION_REST", value: 4, ),
        ( name: "ACTION_DIG", value: 5, ),
        ( name: "ACTION_PERFORM", value: 6, ),
        ( name: "ACTION_FISH", value: 7, ),
        ( name: "ACTION_PLANT", value: 8, ),
        ( name: "ACTION_SEARCH", value: 9, ),
        ( name: "ACTION_GENERAL", value: 10, ),
        ( name: "ACTION_SEX", value: 11, ),
        ( name: "ACTION_BLEND", value: 12, ),
        ( name: "ACTION_CHARGE", value: 13, ),
      ]
    ),
    "action_2": (
      variables: [
        ( name: "ACTION_SLEEP", value: 100, ),
        ( name: "ACTION_CONSTRUCT", value: 101, ),
        ( name: "ACTION_OPEN_HATCH", value: 102, ),
        ( name: "ACTION_HARVEST", value: 103, ),
        ( name: "ACTION_TRAIN", value: 104, ),
        ( name: "ACTION_STEAL", value: 105, ),
      ]
    ),
    "action": (
      includes: [
        "action_1",
        "action_2",
      ]
    ),
    "skill_dataref": (
      variables: [
        ( name: "SKILL_DATAREF_USE", value: 0, macro: "skillUse" ),
        ( name: "SKILL_DATAREF_TYPE", value: 1, macro: "skillType" ),
        ( name: "SKILL_DATAREF_COST", value: 2, macro: "skillCost" ),
        ( name: "SKILL_DATAREF_TG", value: 3, macro: "skillTg" ),
        ( name: "SKILL_DATAREF_DIFF", value: 4, macro: "skillDiff" ),
      ]
    ),
    "skill_type_fov": (
      variables: [
        ( name: "STARTING_SKILL_TYPE_BUFF", value: 1000, exclude: true ),

        ( name: "SKILL_TYPE_FOV_BALL", value: 2, ),
        ( name: "SKILL_TYPE_FOV_BREATH", value: 5, ),
        ( name: "SKILL_TYPE_FOV_BOLT", value: 6, ),
      ]
    ),
    "skill_type": (
      variables: [
        ( name: "SKILL_TYPE_SP", value: 0, ),
        ( name: "SKILL_TYPE_BOLT", value: 1, ),
        ( name: "SKILL_TYPE_ARROW", value: 2, ),
        ( name: "SKILL_TYPE_BALL", value: 3, ),
        ( name: "SKILL_TYPE_HEAL", value: 4, ),
        ( name: "SKILL_TYPE_TELEPORT", value: 5, ),
        ( name: "SKILL_TYPE_HAND", value: 6, ),
        ( name: "SKILL_TYPE_SUMMON", value: 7, ),
        ( name: "SKILL_TYPE_BREATH", value: 8, ),
        ( name: "SKILL_TYPE_FOV", value: 9, ),
        ( name: "SKILL_TYPE_ATTACK", value: 10, ),
      ]
    ),
    "target_type": (
      variables: [
        ( name: "TARGET_TYPE_NONE", value: 0, ),
        ( name: "TARGET_TYPE_ENEMY", value: 2000, ),
        ( name: "TARGET_TYPE_SELF", value: 3000, ),
        ( name: "TARGET_TYPE_AREA", value: 4000, ),
        ( name: "TARGET_TYPE_DIR", value: 5000, ),
        ( name: "TARGET_TYPE_OTHER", value: 6000, ),
        ( name: "TARGET_TYPE_LOCATION", value: 7000, ),
        ( name: "TARGET_TYPE_DIRECTION", value: 8000, ),
        ( name: "TARGET_TYPE_BOTH", value: 9000, ),
        ( name: "TARGET_TYPE_SELF_ONLY", value: 10000, ),
      ],
      ignore: [ 1, 2, 3, 4, 5, 6 ]
    ),
    "damage_source": (
      includes: [
        "chara"
      ],
      variables: [
        ( name: "DAMAGE_FROM_CHARA", value: 0, ),
        ( name: "DAMAGE_FROM_TRAP", value: -1, ),
        ( name: "DAMAGE_FROM_OVERCAST", value: -2, ),
        ( name: "DAMAGE_FROM_HUNGER", value: -3, ),
        ( name: "DAMAGE_FROM_POISON", value: -4, ),
        ( name: "DAMAGE_FROM_CURSE", value: -5, ),
        ( name: "DAMAGE_FROM_BURDEN", value: -6, ),
        ( name: "DAMAGE_FROM_TUMBLE", value: -7, ),
        ( name: "DAMAGE_FROM_PERFORM", value: -8, ),
        ( name: "DAMAGE_FROM_FIRE", value: -9, ),
        ( name: "DAMAGE_FROM_ATX", value: -10, ),
        ( name: "DAMAGE_FROM_UNSEEN", value: -11, ),
        ( name: "DAMAGE_FROM_BAD_FOOD", value: -12, ),
        ( name: "DAMAGE_FROM_BLEED", value: -13, ),
        ( name: "DAMAGE_FROM_CORRUPT", value: -14, ),
        ( name: "DAMAGE_FROM_ACID", value: -15, ),
        ( name: "DAMAGE_FROM_SUICIDE", value: -16, ),
        ( name: "DAMAGE_FROM_NUKE", value: -17, ),
        ( name: "DAMAGE_FROM_MAIDEN", value: -18, ),
        ( name: "DAMAGE_FROM_GUILLOTINE", value: -19, ),
        ( name: "DAMAGE_FROM_HANGING", value: -20, ),
        ( name: "DAMAGE_FROM_SUFFOCATION", value: -21, ),
        // ( name: "DAMAGE_FROM_CHESTNUT", value: -22, ),
        // ( name: "DAMAGE_FROM_CHOCO", value: -23, ),
        // ( name: "DAMAGE_FROM_EXECUTION", value: -24, ),
        // ( name: "DAMAGE_FROM_BRAIN", value: -25, ),
        // ( name: "DAMAGE_FROM_SCALP", value: -26, ),
        // ( name: "DAMAGE_FROM_DESERT", value: -27, ),
        // ( name: "DAMAGE_FROM_WEREWOLF", value: -28, ),
        // ( name: "DAMAGE_FROM_TOFU", value: -29, ),
        // ( name: "DAMAGE_FROM_PERSUASION_LOW", value: -30, ),
        // ( name: "DAMAGE_FROM_PERSUASION_HIGH", value: -31, ),
      ]
    ),
    "damage_type": (
      variables: [
        ( name: "DAMAGE_TYPE_NORMAL", value: 0, ),
        ( name: "DAMAGE_TYPE_SUB", value: 1, ),
        ( name: "DAMAGE_TYPE_ROW", value: 2, ),
      ]
    ),
    "music_id": (
      variables: [
        ( name: "STARTING_MUSICLIST", value: 50, exclude: true ),

        ( name: "MUSICLIST_NONE2", value: -1, ),
        ( name: "MUSICLIST_NONE", value: 0, ),
        ( name: "MUSICLIST_MCTOWN1", value: 51, ),
        ( name: "MUSICLIST_MCTOWN2", value: 52, ),
        ( name: "MUSICLIST_MCTOWN3", value: 53, ),
        ( name: "MUSICLIST_MCTOWN4", value: 54, ),
        ( name: "MUSICLIST_MCDUNGEON1", value: 55, ),
        ( name: "MUSICLIST_MCDUNGEON2", value: 56, ),
        ( name: "MUSICLIST_MCDUNGEON3", value: 57, ),
        ( name: "MUSICLIST_MCDUNGEON4", value: 58, ),
        ( name: "MUSICLIST_MCDUNGEON5", value: 59, ),
        ( name: "MUSICLIST_MCDUNGEON6", value: 60, ),
        ( name: "MUSICLIST_MCPUTI", value: 61, ),
        ( name: "MUSICLIST_MCBOSS", value: 62, ),
        ( name: "MUSICLIST_MCBOSS2", value: 63, ),
        ( name: "MUSICLIST_MCVICTORY", value: 64, ),
        ( name: "MUSICLIST_MCOPENING", value: 65, ),
        ( name: "MUSICLIST_MCLASTBOSS", value: 66, ),
        ( name: "MUSICLIST_MCHOME", value: 67, ),
        ( name: "MUSICLIST_MCLONELY", value: 68, ),
        ( name: "MUSICLIST_MCCHAOS", value: 69, ),
        ( name: "MUSICLIST_MCMARCH1", value: 70, ),
        ( name: "MUSICLIST_MCMARCH2", value: 71, ),
        ( name: "MUSICLIST_MCMARCH3", value: 72, ),
        ( name: "MUSICLIST_MCARENA", value: 73, ),
        ( name: "MUSICLIST_MCFANFARE", value: 74, ),
        ( name: "MUSICLIST_MCVILLAGE1", value: 75, ),
        ( name: "MUSICLIST_MCBATTLE1", value: 76, ),
        ( name: "MUSICLIST_MCCASINO", value: 77, ),
        ( name: "MUSICLIST_MCCODA", value: 78, ),
        ( name: "MUSICLIST_MCRUIN", value: 79, ),
        ( name: "MUSICLIST_MCWEDDING", value: 80, ),
        ( name: "MUSICLIST_MCPETARENA", value: 81, ),
        ( name: "MUSICLIST_MCUNREST", value: 82, ),
        ( name: "MUSICLIST_MCTOWN5", value: 83, ),
        ( name: "MUSICLIST_MCUNREST2", value: 84, ),
        ( name: "MUSICLIST_MCTOWN6", value: 85, ),
        ( name: "MUSICLIST_MCFIELD1", value: 86, ),
        ( name: "MUSICLIST_MCFIELD2", value: 87, ),
        ( name: "MUSICLIST_MCFIELD3", value: 88, ),
        ( name: "MUSICLIST_MCMEMORY", value: 89, ),
        ( name: "MUSICLIST_MCINTRO", value: 90, ),

        ( name: "MUSICLIST_SCENE_MUSIC", value: 91, ),

        ( name: "MUSICLIST_MAX", value: 92, code_value: "MUSICLIST_SCENE_MUSIC + 1" ),
      ]
    ),
    "sound_id": (
      variables: [
        ( name: "SOUNDLIST_NONE", value: 0, ),
        ( name: "SOUNDLIST_POP1", value: 1, ),
        ( name: "SOUNDLIST_ATK1", value: 2, ),
        ( name: "SOUNDLIST_ATK2", value: 3, ),
        ( name: "SOUNDLIST_MISS", value: 4, ),
        ( name: "SOUNDLIST_CURSOR1", value: 5, ),
        ( name: "SOUNDLIST_FIRE1", value: 6, ),
        ( name: "SOUNDLIST_KILL1", value: 8, ),
        ( name: "SOUNDLIST_KILL2", value: 9, ),
        ( name: "SOUNDLIST_MORE1", value: 10, ),
        ( name: "SOUNDLIST_GETGOLD1", value: 11, ),
        ( name: "SOUNDLIST_PAYGOLD1", value: 12, ),
        ( name: "SOUNDLIST_EQUIP1", value: 13, ),
        ( name: "SOUNDLIST_GET1", value: 14, ),
        ( name: "SOUNDLIST_GET2", value: 15, ),
        ( name: "SOUNDLIST_DROP1", value: 16, ),
        ( name: "SOUNDLIST_DRINK1", value: 17, ),
        ( name: "SOUNDLIST_EAT1", value: 18, ),
        ( name: "SOUNDLIST_SPEND1", value: 19, ),
        ( name: "SOUNDLIST_OK1", value: 20, ),
        ( name: "SOUNDLIST_ALERT1", value: 21, ),
        ( name: "SOUNDLIST_LOCKED1", value: 22, ),
        ( name: "SOUNDLIST_CHEST1", value: 23, ),
        ( name: "SOUNDLIST_DING2", value: 24, ),
        ( name: "SOUNDLIST_COOK1", value: 25, ),
        ( name: "SOUNDLIST_POP2", value: 26, ),
        ( name: "SOUNDLIST_FAIL1", value: 27, ),
        ( name: "SOUNDLIST_SCENE_SOUND", value: 28, ),
        ( name: "SOUNDLIST_BOW1", value: 29, ),
        ( name: "SOUNDLIST_GUN1", value: 30, ),
        ( name: "SOUNDLIST_THROW1", value: 31, ),
        ( name: "SOUNDLIST_HEART1", value: 32, ),
        ( name: "SOUNDLIST_HEAL1", value: 33, ),
        ( name: "SOUNDLIST_BALL1", value: 34, ),
        ( name: "SOUNDLIST_BREATH1", value: 35, ),
        ( name: "SOUNDLIST_ARROW1", value: 36, ),
        ( name: "SOUNDLIST_BOLT1", value: 37, ),
        ( name: "SOUNDLIST_CURSE1", value: 38, ),
        ( name: "SOUNDLIST_POP3", value: 39, ),
        ( name: "SOUNDLIST_CLICK1", value: 40, ),
        ( name: "SOUNDLIST_GET3", value: 41, ),
        ( name: "SOUNDLIST_LASER1", value: 42, ),
        ( name: "SOUNDLIST_FOOT", value: 43, ),
        ( name: "SOUNDLIST_WRITE1", value: 44, ),
        ( name: "SOUNDLIST_CRUSH1", value: 45, ),
        ( name: "SOUNDLIST_WATER2", value: 46, ),
        ( name: "SOUNDLIST_CRUSH2", value: 47, ),
        ( name: "SOUNDLIST_DOOR1", value: 48, ),
        ( name: "SOUNDLIST_EXITMAP1", value: 49, ),
        ( name: "SOUNDLIST_DEAD1", value: 50, ),
        ( name: "SOUNDLIST_COMPLETE1", value: 51, ),
        ( name: "SOUNDLIST_DIG1", value: 52, ),
        ( name: "SOUNDLIST_CHIME", value: 53, ),
        ( name: "SOUNDLIST_DIG2", value: 54, ),
        ( name: "SOUNDLIST_BUSH1", value: 55, ),
        ( name: "SOUNDLIST_GASHA", value: 56, ),
        ( name: "SOUNDLIST_WATER", value: 57, ),
        ( name: "SOUNDLIST_BUILD1", value: 58, ),
        ( name: "SOUNDLIST_BOOK1", value: 59, ),
        ( name: "SOUNDLIST_DING1", value: 60, ),
        ( name: "SOUNDLIST_DING3", value: 61, ),
        ( name: "SOUNDLIST_POP4", value: 62, ),
        ( name: "SOUNDLIST_PUNISH1", value: 63, ),
        ( name: "SOUNDLIST_PRAY1", value: 64, ),
        ( name: "SOUNDLIST_OFFER1", value: 65, ),
        ( name: "SOUNDLIST_FIZZLE", value: 66, ),
        ( name: "SOUNDLIST_DOOR2", value: 67, ),
        ( name: "SOUNDLIST_WEB", value: 68, ),
        ( name: "SOUNDLIST_CHEER", value: 69, ),
        ( name: "SOUNDLIST_TRAP1", value: 70, ),
        ( name: "SOUNDLIST_CARD1", value: 71, ),
        ( name: "SOUNDLIST_TELEPORT1", value: 72, ),
        ( name: "SOUNDLIST_BASH1", value: 73, ),
        ( name: "SOUNDLIST_NIGHT", value: 74, ),
        ( name: "SOUNDLIST_BG_RAIN", value: 75, ),
        ( name: "SOUNDLIST_BG_THUNDER", value: 76, ),
        ( name: "SOUNDLIST_BG_WIND", value: 77, ),
        ( name: "SOUNDLIST_BG_SEA", value: 78, ),
        ( name: "SOUNDLIST_BG_TOWN", value: 79, ),
        ( name: "SOUNDLIST_BG_FIRE", value: 80, ),
        ( name: "SOUNDLIST_FOOT1A", value: 81, ),
        ( name: "SOUNDLIST_FOOT1B", value: 82, ),
        ( name: "SOUNDLIST_FOOT2A", value: 83, ),
        ( name: "SOUNDLIST_FOOT2B", value: 84, ),
        ( name: "SOUNDLIST_FOOT2C", value: 85, ),
        ( name: "SOUNDLIST_SNOW", value: 86, ),
        ( name: "SOUNDLIST_FISH_CAST", value: 87, ),
        ( name: "SOUNDLIST_FISH_GET", value: 88, ),
        ( name: "SOUNDLIST_FISH_FIGHT", value: 89, ),
        ( name: "SOUNDLIST_AMMO", value: 90, ),
        ( name: "SOUNDLIST_THROW2", value: 91, ),
        ( name: "SOUNDLIST_SCROLL", value: 92, ),
        ( name: "SOUNDLIST_LOG", value: 93, ),
        ( name: "SOUNDLIST_CHARA", value: 94, ),
        ( name: "SOUNDLIST_WEAR", value: 95, ),
        ( name: "SOUNDLIST_FEAT", value: 96, ),
        ( name: "SOUNDLIST_PORT", value: 97, ),
        ( name: "SOUNDLIST_UNPOP1", value: 98, ),
        ( name: "SOUNDLIST_CHAT", value: 99, ),
        ( name: "SOUNDLIST_INV", value: 100, ),
        ( name: "SOUNDLIST_SKILL", value: 101, ),
        ( name: "SOUNDLIST_SPELL", value: 102, ),
        ( name: "SOUNDLIST_DICE", value: 103, ),
        ( name: "SOUNDLIST_VOMIT", value: 104, ),
        ( name: "SOUNDLIST_ATKSWORD", value: 105, ),
        ( name: "SOUNDLIST_ATK_ICE", value: 106, ),
        ( name: "SOUNDLIST_ATK_ELEC", value: 107, ),
        ( name: "SOUNDLIST_ATK_FIRE", value: 108, ),
        ( name: "SOUNDLIST_ATK_HELL", value: 109, ),
        ( name: "SOUNDLIST_ATK_POISON", value: 110, ),
        ( name: "SOUNDLIST_ATK_NERVE", value: 111, ),
        ( name: "SOUNDLIST_ATK_SOUND", value: 112, ),
        ( name: "SOUNDLIST_ATK_MIND", value: 113, ),
        ( name: "SOUNDLIST_ATK_CHAOS", value: 114, ),
        ( name: "SOUNDLIST_ATK_DARK", value: 115, ),
        ( name: "SOUNDLIST_CURSE2", value: 116, ),
        ( name: "SOUNDLIST_CURSE3", value: 117, ),
        ( name: "SOUNDLIST_ENC", value: 118, ),
        ( name: "SOUNDLIST_ENC2", value: 119, ),
        ( name: "SOUNDLIST_PRAY2", value: 120, ),
        ( name: "SOUNDLIST_OFFER2", value: 121, ),

        ( name: "SOUNDLIST_MAX", value: 122, code_value: "SOUNDLIST_OFFER2 + 1", exclude: true ),
      ],
      ignore: [ 7 ]
    ),
    "item_effect": (
      variables: [
        ( name: "EFFECT_NONE", value: 0, ),
        ( name: "EFFECT_CARPENTRY", value: 1, ),
        ( name: "EFFECT_ALCHEMY", value: 2, ),
        ( name: "EFFECT_JEWELER", value: 3, ),
        ( name: "EFFECT_TAILOR", value: 4, ),
        ( name: "EFFECT_STETHOSCOPE", value: 5, ),
        ( name: "EFFECT_MUSIC_DISC", value: 6, ),
        ( name: "EFFECT_SHELTER", value: 7, ),
        ( name: "EFFECT_HOUSE_BOARD", value: 8, ),
        ( name: "EFFECT_TRAIN", value: 9, ),
        ( name: "EFFECT_PLAYBACK_DISC", value: 10, ),
        ( name: "EFFECT_KITTY_BANK", value: 11, ),
        ( name: "EFFECT_FREEZER", value: 12, ),
        ( name: "EFFECT_TORCH", value: 13, ),
        ( name: "EFFECT_SNOW", value: 14, ),
        ( name: "EFFECT_COOKING", value: 15, ),
        ( name: "EFFECT_FISHING", value: 16, ),
        ( name: "EFFECT_PERFORM", value: 17, ),
        ( name: "EFFECT_BITE", value: 18, ),
        ( name: "EFFECT_MIRROR", value: 19, ),
        ( name: "EFFECT_INCOGNITO", value: 20, ),
        ( name: "EFFECT_MATERIAL_KIT", value: 21, ),
        ( name: "EFFECT_RUNE", value: 22, ),
        ( name: "EFFECT_LEASH", value: 23, ),
        ( name: "EFFECT_MINE", value: 24, ),
        ( name: "EFFECT_UNICORN_HORN", value: 25, ),
        ( name: "EFFECT_OPATOS_STATUE", value: 26, ),
        ( name: "EFFECT_LULWY_STATUE", value: 27, ),
        ( name: "EFFECT_NUKE", value: 28, ),
        ( name: "EFFECT_SECRET_TREASURE", value: 29, ),
        ( name: "EFFECT_OBJET_OF_HEART", value: 30, ),
        ( name: "EFFECT_KUMIROMI_GEMSTONE", value: 31, ),
        ( name: "EFFECT_GENE_MERGE", value: 32, ),
        ( name: "EFFECT_MONSTER_BALL", value: 33, ),
        ( name: "EFFECT_JURE_STATUE", value: 34, ),
        ( name: "EFFECT_IRON_MAIDEN", value: 35, ),
        ( name: "EFFECT_GUILLOTINE", value: 36, ),
        ( name: "EFFECT_DECK", value: 37, ),
        ( name: "EFFECT_CARD", value: 38, ),
        ( name: "EFFECT_WHISTLE", value: 39, ),
        ( name: "EFFECT_EVOLUTION", value: 40, ),
        ( name: "EFFECT_SECRET_EXP_KUMIROMI", value: 41, ),
        ( name: "EFFECT_SECRET_EXP_LOMIAS", value: 42, ),
        ( name: "EFFECT_EHEKATL_STATUE", value: 43, ),
        ( name: "EFFECT_CHAIR", value: 44, ),
        ( name: "EFFECT_SANDBAG", value: 45, ),
        ( name: "EFFECT_ROPE", value: 46, ),
        ( name: "EFFECT_SUMMONING_CRYSTAL", value: 47, ),
        ( name: "EFFECT_CREATOR_STATUE", value: 48, ),
        ( name: "EFFECT_GAROK_HAMMER", value: 49, ),
      ]
    ),
    "trait_normal": (
      variables: [
        ( name: "TRAIT_NORMAL_OTHER_MUTANT", value: 0, ),
        ( name: "TRAIT_NORMAL_STAT_LUC", value: 1, ),
        ( name: "TRAIT_NORMAL_STAT_LIFE", value: 2, ),
        ( name: "TRAIT_NORMAL_SPACT_DRAIN_BLOOD", value: 3, ),
        ( name: "TRAIT_NORMAL_STAT_SPD", value: 4, ),
        ( name: "TRAIT_NORMAL_SPACT_UNCONTROL", value: 5, ),
        ( name: "TRAIT_NORMAL_SPACT_BLADE_STRINGS", value: 6, ),
        ( name: "TRAIT_NORMAL_STAT_PV", value: 7, ),
        ( name: "TRAIT_NORMAL_STAT_DV", value: 8, ),
        ( name: "TRAIT_NORMAL_SPACT_GRAVITY_ACCEL", value: 9, ),
        ( name: "TRAIT_NORMAL_SKILL_EVASION", value: 10, ),
        ( name: "TRAIT_NORMAL_STAT_MANA", value: 11, ),
        ( name: "TRAIT_NORMAL_SKILL_CASTING", value: 12, ),
        ( name: "TRAIT_NORMAL_SPACT_DIMENSIONAL_MOVE", value: 13, ),
        ( name: "TRAIT_NORMAL_SPACT_FIRE_BREATH", value: 14, ),
        ( name: "TRAIT_NORMAL_RES_DARKNESS", value: 15, ),
        ( name: "TRAIT_NORMAL_SKILL_NEGOTIATION", value: 16, ),
        ( name: "TRAIT_NORMAL_SKILL_FAITH", value: 17, ),
        ( name: "TRAIT_NORMAL_RES_POISON", value: 18, ),
        ( name: "TRAIT_NORMAL_SKILL_DUAL_WIELD", value: 19, ),
        ( name: "TRAIT_NORMAL_SPACT_VINDALIAN_JIUJITSU", value: 20, ),
        ( name: "TRAIT_NORMAL_SPACT_FASCINATION_DANCE", value: 21, ),
        ( name: "TRAIT_NORMAL_SPACT_TOUCH_OF_SLEEP", value: 22, ),
        ( name: "TRAIT_NORMAL_SPACT_TOUCH_OF_POISON", value: 23, ),
        ( name: "TRAIT_NORMAL_STAT_STAMINA", value: 24, ),
        ( name: "TRAIT_MUTATION_STAT_PV", value: 25, ),
        ( name: "TRAIT_MUTATION_STAT_DEX", value: 26, ),
        ( name: "TRAIT_MUTATION_SKILL_HEALING", value: 27, ),
        ( name: "TRAIT_MUTATION_STAT_SPD", value: 28, ),
        ( name: "TRAIT_MUTATION_STAT_STR", value: 29, ),
        ( name: "TRAIT_MUTATION_STAT_CHR", value: 30, ),
        ( name: "TRAIT_MUTATION_SKILL_MEMORIZATION", value: 31, ),
        ( name: "TRAIT_MUTATION_RES_MAGIC", value: 32, ),
        ( name: "TRAIT_MUTATION_RES_SOUND", value: 33, ),
        ( name: "TRAIT_MUTATION_RES_FIRE", value: 34, ),
        ( name: "TRAIT_MUTATION_RES_COLD", value: 35, ),
        ( name: "TRAIT_MUTATION_RES_LIGHTNING", value: 36, ),
        ( name: "TRAIT_MUTATION_STAT_PER", value: 37, ),
        ( name: "TRAIT_NORMAL_OTHER_ACCOUNTANT", value: 38, ),
        ( name: "TRAIT_NORMAL_OTHER_QUARTERMASTER", value: 39, ),
        ( name: "TRAIT_NORMAL_SPACT_CHEER", value: 40, ),
        ( name: "TRAIT_NORMAL_OTHER_CANNIBALISM", value: 41, ),
        ( name: "TRAIT_NORMAL_OTHER_RES_CURSE", value: 42, ),
        ( name: "TRAIT_NORMAL_OTHER_SHIELD_BASH", value: 43, ),
        ( name: "TRAIT_NORMAL_OTHER_GENTLE_FACE", value: 44, ),

        ( name: "MAX_NORMAL_TRAIT", value: 45, code_value: "TRAIT_NORMAL_OTHER_GENTLE_FACE + 1", override: true )
      ]
    ),
    "trait_race": (
      variables: [
        ( name: "TRAIT_RACE_RES_FIRE", value: 150, ),
        ( name: "TRAIT_RACE_RES_COLD", value: 151, ),
        ( name: "TRAIT_RACE_RES_POISON", value: 152, ),
        ( name: "TRAIT_RACE_RES_MAGIC", value: 153, ),
        ( name: "TRAIT_RACE_BONUS_SKILLPOINT", value: 154, ),
        ( name: "TRAIT_RACE_RES_DARKNESS", value: 155, ),
        ( name: "TRAIT_RACE_MAGIC_REACTION", value: 156, ),
        ( name: "TRAIT_RACE_RES_DIM", value: 157, ),
        ( name: "TRAIT_RACE_SLOW_DIGESTION", value: 158, ),
        ( name: "TRAIT_RACE_BONUS_MATERIAL", value: 159, ),
        ( name: "TRAIT_RACE_BONUS_RESISTANCE", value: 160, ),
        ( name: "TRAIT_RACE_WEAK", value: 161, ),
        ( name: "TRAIT_OTHER_WICKED", value: 162, ),
        ( name: "TRAIT_GOD_EHEKATL", value: 163, ),
        ( name: "TRAIT_GOD_OPATOS", value: 164, ),
        ( name: "TRAIT_GOD_ITZPALT", value: 165, ),
        ( name: "TRAIT_GOD_JURE", value: 166, ),
        ( name: "TRAIT_OTHER_MOE", value: 167, ),
        ( name: "TRAIT_RACE_RES_ETHER", value: 168, ),
        ( name: "TRAIT_OTHER_SAINT", value: 169, ),
      ]
    ),
    "trait_ether": (
      variables: [
        ( name: "STARTING_TRAIT_ETHER", value: 200, ),

        ( name: "TRAIT_ETHER_WEIGHT", value: 201, ),
        ( name: "TRAIT_ETHER_SORE_FACE", value: 202, ),
        ( name: "TRAIT_ETHER_EQUIP_LEG", value: 203, ),
        ( name: "TRAIT_ETHER_FOUR_EYES", value: 204, ),
        ( name: "TRAIT_ETHER_EQUIP_BACK", value: 205, ),
        ( name: "TRAIT_ETHER_EQUIP_NECK", value: 206, ),
        ( name: "TRAIT_ETHER_VIOLENCE", value: 207, ),
        ( name: "TRAIT_ETHER_HUGE_HEAD", value: 208, ),
        ( name: "TRAIT_ETHER_RAIN_CLOUD", value: 209, ),
        ( name: "TRAIT_ETHER_ADDICTED_POTION", value: 210, ),
        ( name: "TRAIT_ETHER_DEBILITATION", value: 211, ),
        ( name: "TRAIT_ETHER_DEMENTIA", value: 212, ),
        ( name: "TRAIT_ETHER_CARAPACE", value: 213, ),
        ( name: "TRAIT_ETHER_RANDOM_TELEPORT", value: 214, ),
        ( name: "TRAIT_ETHER_ABSORB_ROD", value: 215, ),
        ( name: "TRAIT_ETHER_POISON_HANDS", value: 216, ),

        ( name: "MAX_TRAIT_ETHER", value: 217, code_value: "TRAIT_ETHER_POISON_HANDS + 1", exclude: true ),
      ]
    ),
    "trait": (
      includes: [
        "trait_normal",
        "trait_race",
        "trait_ether"
      ],
      variables: [
        ( name: "MAX_TRAIT", value: 217, code_value: "MAX_TRAIT_ETHER" )
      ]
    ),
    "sprite_sheet": (
      variables: [
        ( name: "SPRITE_SHEET_COLS_MAP", value: 33, ),
        ( name: "SPRITE_SHEET_ROWS_MAP", value: 25, ),
        ( name: "SPRITE_SHEET_COLS_ITEM", value: 33, ),
        ( name: "SPRITE_SHEET_ROWS_ITEM", value: 36, ),
        ( name: "SPRITE_SHEET_COLS_CHARA", value: 33, ),
        ( name: "SPRITE_SHEET_ROWS_CHARA", value: 34, ),

        ( name: "SPRITE_SIZE_ITEM", value: 48, exclude: true ),
      ]
    ),
    "cloud": (
      variables: [
        ( name: "CLOUD_X", value: 0 ),
        ( name: "CLOUD_Y", value: 1 ),
        ( name: "CLOUD_PX", value: 2 ),
        ( name: "CLOUD_PY", value: 3 ),
        ( name: "CLOUD_WIDTH", value: 4 ),
        ( name: "CLOUD_HEIGHT", value: 5 ),

        ( name: "MAX_CLOUD", value: 12, exclude: true )
      ]
    ),
    "chipc": (
      variables: [
        ( name: "CHIPC_X", value: 0, ),
        ( name: "CHIPC_Y", value: 1, ),
        ( name: "CHIPC_WIDTH", value: 2, ),
        ( name: "CHIPC_HEIGHT", value: 3, ),
        ( name: "CHIPC_F", value: 4, )
      ]
    ),
    "chipi": (
      variables: [
        ( name: "CHIPI_X", value: 0, ),
        ( name: "CHIPI_Y", value: 1, ),
        ( name: "CHIPI_WIDTH", value: 2, ),
        ( name: "CHIPI_HEIGHT", value: 3, ),
        ( name: "CHIPI_F", value: 4, ),
        ( name: "CHIPI_S", value: 5, ),
        ( name: "CHIPI_SH", value: 6, ),
        ( name: "CHIPI_ANIM", value: 7, )
      ]
    ),
    "chipm": (
      variables: [
        ( name: "CHIPM_ROLE", value: 0 ),
        ( name: "CHIPM_ROLE_SUB", value: 1, ),
        ( name: "CHIPM_WALL", value: 2, ),
        ( name: "CHIPM_ANIM", value: 3, ),
        ( name: "CHIPM_F", value: 5, ),
        ( name: "CHIPM_H", value: 6, ),
        ( name: "CHIPM_ATTRIB", value: 7, ),
      ],
    ),
    "chipm_attrib": (
      variables: [
        ( name: "CHIPM_ATTRIB_DEFAULT", value: 0 ),
        ( name: "CHIPM_ATTRIB_CANT_SEE", value: 1 ),
        ( name: "CHIPM_ATTRIB_CANT_PASS", value: 4 ),
        ( name: "CHIPM_ATTRIB_CANT_SEE_OR_PASS", value: 5 ),
      ]
    ),
    "chipm_role": (
      variables: [
        ( name: "MAP_CHIP_ROLE_NONE", value: 0, ),
        ( name: "MAP_CHIP_ROLE_DRYROCK", value: 1, ),
        ( name: "MAP_CHIP_ROLE_CROP", value: 2, ),
        ( name: "MAP_CHIP_ROLE_WATER", value: 3, ),
        ( name: "MAP_CHIP_ROLE_SNOW", value: 4, ),
        ( name: "MAP_CHIP_ROLE_MOUNTAIN_WATER", value: 5, ),
        ( name: "MAP_CHIP_ROLE_HARD_WALL", value: 6, ),
        ( name: "MAP_CHIP_ROLE_SAND", value: 7, ),
        ( name: "MAP_CHIP_ROLE_SAND_HARD", value: 8, ),
        ( name: "MAP_CHIP_ROLE_COAST", value: 9, ),
        ( name: "MAP_CHIP_ROLE_SAND_WATER", value: 10, ),
      ],
    ),
    "item_find_mode": (
      variables: [
        ( name: "ITEM_FIND_MODE_TYPE", value: 0 ),
        ( name: "ITEM_FIND_MODE_SKILL_REF", value: 1 ),
        ( name: "ITEM_FIND_MODE_TYPE_MINOR", value: 2 ),
        ( name: "ITEM_FIND_MODE_DBID", value: 3 ),
      ]
    ),
    "item_find_location": (
      variables: [
        ( name: "ITEM_FIND_LOCATION_GROUND", value: -1 ),
        ( name: "ITEM_FIND_LOCATION_GROUND_AND_CHARAS", value: 0 ),
        ( name: "ITEM_FIND_LOCATION_CHARAS", value: 1 ),
      ]
    ),
    "matget_type": (
      variables: [
        ( name: "MATGET_TYPE_DIG", value: 1 ),
        ( name: "MATGET_TYPE_FISH", value: 2 ),
        ( name: "MATGET_TYPE_HARVEST", value: 3 ),
        ( name: "MATGET_TYPE_OBTAIN", value: 4 ),
        ( name: "MATGET_TYPE_FIND", value: 5 ),
        ( name: "MATGET_TYPE_RECEIVE", value: 6 ),
        ( name: "MATGET_TYPE_GET", value: 7 ),
      ],
      ignore: [ 0 ]
    ),
    "calcbuff_chara": (
      includes: [
        "chara"
      ],
      variables: [
        ( name: "CALCBUFF_DESCRIPTION", value: -2 ),
        ( name: "CALCBUFF_DURATION", value: -1 ),
      ]
    )
  },

  arrays: {
    "cdata": (
      indices: [
        (
          substitute: { 0: Group("cdata") }
        ),
        (
          rules: { 0: Expr },
          substitute: { 0: VariantRecursive("cdata", ["STARTING_CDATA_CHARA_BIT", "STARTING_CDATA_BUFF", "STARTING_CDATA_ATTR", "STARTING_CDATA_FOOD_EXP"], Lhs("+")) }
        ),
        (
          rules: { 0: Expr },
          substitute: { 0: VariantRecursive("cdata", ["ARRAY_CDATA_BUFF"], Rhs("*")) }
        ),
        (
          rules: { 0: Expr },
          substitute: { 0: VariantRecursive("cdata", ["STARTING_CDATA_ACT_MAIN", "STARTING_CDATA_ACT_SUB"], Lhs("+")) }
        ),
        (
          rules: { 1: Group("chara"), },
          substitute: { 1: Group("chara") }
        ),
        (
          macro: (
            index: 0,
            group: "cdata",
          )
        ),
      ]
    ),
    "cdatan": (
      indices: [
        ( substitute: { 0: Group("cdatan") } ),
        (
          rules: { 1: Group("chara"), },
          substitute: { 1: Group("chara") }
        ),
        (
          macro: (
            index: 0,
            group: "cdatan",
          )
        ),
      ]
    ),
    "cbitorg": (
      indices: [
        (
          substitute: {
            0: GroupRecursive("chara_bit", Lhs("/")),
            1: Group("chara_id")
          }
        )
      ]
    ),
    "pcc": (
      indices: [
        (
          substitute: { 0: Group("pcc") }
        )
      ]
    ),
    "c_col": (
      indices: [
        (
          substitute: { 1: Group("color") }
        )
      ]
    ),
    "inv": (
      indices: [
        (
          substitute: {
            0: Group("inv")
          }
        ),
        (
          rules: { 0: VariantRecursive("inv", ["STARTING_INV_ITEM_ENCHANT"], Lhs("+")) },
          substitute: { 0: VariantRecursive("inv", ["STARTING_INV_ITEM_ENCHANT"], Lhs("+")) }
        ),
        (
          rules: { 0: VariantRecursive("inv", ["STARTING_INV_ITEM_ENCHANT_POWER"], Lhs("+")) },
          substitute: { 0: VariantRecursive("inv", ["STARTING_INV_ITEM_ENCHANT_POWER"], Lhs("+")) }
        ),
        (
          macro: (
            index: 0,
            group: "inv",
          )
        ),
      ]
    ),
    "ioriginalnameref": (
      indices: [
        (
          substitute: { 0: Group("item_id") }
        )
      ]
    ),
    "ioriginalnameref2": (
      indices: [
        (
          substitute: { 0: Group("item_id") }
        )
      ]
    ),
    "iorgweight": (
      indices: [
        (
          substitute: { 0: Group("item_id") }
        )
      ]
    ),
    "ipicref": (
      indices: [
        (
          substitute: { 0: Group("item_id") }
        )
      ]
    ),
    "irandomname": (
      indices: [
        (
          substitute: { 0: Group("item_id") }
        )
      ]
    ),
    "icolref": (
      indices: [
        (
          substitute: { 0: Group("item_id") }
        )
      ]
    ),
    "ilight": (
      indices: [
        (
          substitute: { 0: Group("item_id") }
        )
      ]
    ),
    "ialphanameref": (
      indices: [
        (
          substitute: { 0: Group("item_id") }
        )
      ]
    ),
    "filter_item": (
      indices: [
        (
          substitute: { 0: Group("item_id") }
        )
      ]
    ),
    "rffilter_item": (
      indices: [
        (
          substitute: { 0: Group("item_id") }
        )
      ]
    ),
    "iknownnameref": (
      indices: [
        (
          substitute: { 0: Group("item_id") }
        )
      ]
    ),
    "gdata": (
      indices: [
        (
          rules: { 0: VariantRecursive("gdata", ["STARTING_GDATA_HELP"], Lhs("+")) },
          substitute: { 0: VariantRecursive("gdata", ["STARTING_GDATA_HELP"], Lhs("+")) }
        ),
        (
          rules: { 0: VariantRecursive("gdata", ["STARTING_GDATA_SHORTCUT"], Lhs("+")) },
          substitute: { 0: VariantRecursive("gdata", ["STARTING_GDATA_SHORTCUT"], Lhs("+")) }
        ),
        (
          rules: { 0: VariantRecursive("gdata", ["STARTING_GDATA_RANK"], Lhs("+")) },
          substitute: { 0: VariantRecursive("gdata", ["STARTING_GDATA_RANK"], Lhs("+")) }
        ),
        (
          rules: { 0: VariantRecursive("gdata", ["GDATA_QUEST_POOL"], Lhs("+")) },
          substitute: { 0: VariantRecursive("gdata", ["GDATA_QUEST_POOL"], Lhs("+")) }
        ),
        (
          rules: { 0: VariantRecursive("gdata", ["GDATA_DECK_SIZE"], Lhs("+")) },
          substitute: { 0: VariantRecursive("gdata", ["GDATA_DECK_SIZE"], Lhs("+")) }
        ),
        (
          rules: { 0: Flag },
          substitute: { 0: Flag("gdata") }
        ),
        (
          substitute: { 0: Group("gdata") }
        ),
      ]
    ),
    "gdatan": (
      indices: [
        (
          substitute: { 0: Group("gdatan") }
        )
      ]
    ),
    "genetemp": (
      indices: [
        (
          substitute: { 0: Group("gdata") }
        ),
      ]
    ),
    "mdata": (
      indices: [
        (
          substitute: { 0: Group("mdata") }
        )
      ]
    ),
    "map": (
      indices: [
        (
          substitute: { 2: Group("map") }
        ),
      ]
    ),
    "mapbk": (
      indices: [
        (
          substitute: { 2: Group("map") }
        ),
      ]
    ),
    "feat": (
      indices: [
        (
          substitute: { 0: Group("feat"), }
        )
      ]
    ),
    "adata": (
      indices: [
        (
          substitute: { 0: Group("adata") }
        )
      ]
    ),
    "qdata": (
      indices: [
        (
          substitute: { 0: Group("qdata") }
        )
      ]
    ),
    "sdata": (
      indices: [
        (
          substitute: {
            0: Multi([
                VariantRecursive("skill_spact", ["STARTING_SKILL_SPACT"], Rhs("+")),
                Group("skill_id"),
              ]),
            1: Group("chara")
          }
        )
      ]
    ),
    "musicfile": (
      indices: [
        (
          substitute: {
            0: Group("music_id"),
          }
        )
      ]
    ),
    "encref": (
      indices: [
        (
          substitute: {
            0: Group("encref"),
            1: Group("enchant_id")
          }
        )
      ]
    ),
    "encammoref": (
      indices: [
        (
          substitute: {
            0: Group("encammoref"),
            1: Group("enchant_ammo")
          }
        )
      ]
    ),
    "encprocref": (
      indices: [
        (
          substitute: {
            0: Group("encprocref"),
            1: Group("enchant_proc_id")
          }
        )
      ]
    ),
    "mtname": (
      indices: [
        (
          substitute: {
            1: Group("item_material"),
          }
        )
      ]
    ),
    "mtbit": (
      indices: [
        (
          substitute: {
            1: Group("item_material"),
          }
        )
      ]
    ),
    "mtref": (
      indices: [
        (
          substitute: {
            0: Group("mtref"),
            1: Group("item_material"),
          }
        )
      ]
    ),
    "mtenc": (
      indices: [
        (
          substitute: {
            0: Group("mtenc"),
            1: Group("item_material"),
          }
        )
      ]
    ),
    "fishdata": (
      indices: [
        (
          substitute: {
            0: Group("fishdata"),
          }
        )
      ]
    ),
    "tname": (
      indices: [
        (
          substitute: { 0: Group("chipm_role") }
        )
      ]
    ),
    "cloud": (
      indices: [
        (
          substitute: { 0: Group("cloud"), }
        )
      ]
    ),
    "chipi": (
      indices: [
        (
          substitute: { 0: Group("chipi"), 1: XY2Pic }
        )
      ]
    ),
    "chipc": (
      indices: [
        (
          substitute: { 0: Group("chipc"), 1: XY2Pic }
        )
      ]
    ),
    "chipm": (
      indices: [
        (
          substitute: {
            0: Group("chipm"),
            1: XY2Pic
          }
        ),
      ]
    ),
    "picfood": (
      indices: [
        (
          substitute: {
            1: Group("food_type"),
          }
        ),
      ]
    ),
    "mefsubref": (
      indices: [
        (
          substitute: { 0: Group("mefsubref"), 1: Group("map_effect") }
        )
      ]
    ),
    "mef": (
      indices: [
        (
          substitute: { 0: Group("mef") }
        )
      ]
    ),
    "lightdata": (
      indices: [
        (
          substitute: { 0: Group("lightdata"), 1: Group("light_type") }
        )
      ]
    ),
    "trait": (
      indices: [
        (
          substitute: { 0: Group("trait"), }
        )
      ]
    ),
    "sdataref": (
      indices: [
        (
          macro: (
            index: 0,
            group: "skill_dataref",
          )
        ),
        (
          substitute: {
            0: Group("skill_dataref"),
            1: Group("skill_id"),
          }
        )
      ]
    ),
    "skillname": (
      indices: [
        (
          substitute: { 0: Group("skill_id"), }
        )
      ]
    ),
    "skilldesc": (
      indices: [
        (
          substitute: { 0: Group("skill_id"), }
        )
      ]
    ),
    "skillencdesc": (
      indices: [
        (
          substitute: { 0: Group("skill_id"), }
        )
      ]
    ),
    "bdataref": (
      indices: [
        (
          substitute: { 0: Group("bdataref"), 1: Group("buff_id"), }
        )
      ]
    ),
    "buffname": (
      indices: [
        (
          substitute: { 0: Group("buff_id"), }
        )
      ]
    ),
    "bufftxt": (
      indices: [
        (
          substitute: { 1: Group("buff_id"), }
        )
      ]
    ),
    "matref": (
      indices: [
        (
          substitute: {
            0: Group("matref"),
            1: Group("material_id"),
          }
        ),
      ]
    ),
    "matname": (
      indices: [
        (
          substitute: { 0: Group("material_id"), }
        ),
      ]
    ),
    "matdesc": (
      indices: [
        (
          substitute: { 0: Group("material_id"), }
        ),
      ]
    ),
    "matspot": (
      indices: [
        (
          substitute: { 1: Group("material_id"), }
        ),
      ]
    ),
    "ranknorma": (
      indices: [
        (
          substitute: { 0: Group("rank") }
        )
      ]
    ),
    "rpdata": (
      indices: [
        (
          substitute: { 0: GroupRecursive("rpdata", Lhs("+")) }
        ),
        (
          substitute: { 0: Group("rpdata") }
        )
      ]
    ),
    "rpdatan": (
      indices: [
        (
          substitute: { 0: Group("rpdatan") }
        )
      ]
    ),
    "rfnameorg": (
      indices: [
        (
          substitute: {
            0: Group("rfnameorg"),
            1: Multi([
                GroupRecursive("rf_id", Lhs("-")),
                VariantRecursive("ext", ["EXT_RF"], Rhs("-")),
              ])
          }
        )
      ]
    ),
    "spact": (
      indices: [
        (
          substitute: {
            0: GroupRecursive("skill_spact", Any),
          }
        )
      ]
    ),
    "npcmemory": (
      indices: [
        (
          substitute: {
            1: Group("chara_id"),
          }
        )
      ]
    ),
    "itemmemory": (
      indices: [
        (
          substitute: {
            1: Group("item_id"),
          }
        )
      ]
    )
  },

  expressions: {

    // Variables

    "cc": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: Group("chara") } )
          ))
      ]
    ),
    "tc": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: Group("chara") } )
          ))
      ]
    ),
    "rc": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: Group("chara") } )
          ))
      ]
    ),
    "mode": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: GroupRecursive("mode", Any) } )
          ))
      ]
    ),
    "dbmode": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: GroupRecursive("dbmode", Any) } )
          ))
      ]
    ),
    "rdsecond": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: Group("boolean") } )
          ))
      ]
    ),
    "env": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: Group("sound_id") } )
          ))
      ]
    ),
    "tid": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: GroupRecursive("trait", Any) } )
          ))
      ]
    ),
    "encounter": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: Group("encounter") } )
          ))
      ]
    ),
    "creaturepack": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: Group("filter_race") } )
          ))
      ]
    ),
    "matid": (
      indices: [
        MatchAll((
            substitute: (rhs: { 0: Group("item_id") })
          ))
      ]
    ),
    "atxspot": (
      indices: [
        MatchAll((
            substitute: (rhs: { 0: Group("atx") })
          ))
      ]
    ),
    "nocubl": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: GroupRecursive("item_status", Any) } )
          ))
      ]
    ),
    "animeid": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: GroupRecursive("animation_id", Any) } )
          ))
      ]
    ),
    "ele": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: Group("skill_all_resist") } )
          ))
      ]
    ),
    "attackskill": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: Group("skill_id") } )
          ))
      ]
    ),
    "haveweapon": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: Group("boolean") } )
          ))
      ]
    ),
    "maxnpcid": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: Group("chara_id") } )
          ))
      ]
    ),
    "rdtype": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: Group("random_dungeon_type") } )
          ))
      ]
    ),

    // Arrays

    "cdata": (
      indices: [
        MatchAll((
            rules: (lhs: Array({ 0: Variant("cdata", ["CDATA_ID"]) })),
            substitute: (rhs: { 0: Group("chara_id") })
          )),
        MatchAll((
            rules: (lhs: Array({ 0: Variant("cdata", ["CDATA_EXIST"]) })),
            substitute: (rhs: { 0: Group("chara_state") })
          )),
        MatchAll((
            rules: (lhs: Array({ 0: Variant("cdata", ["CDATA_ROLE"]) })),
            substitute: (rhs: { 0: Group("role") })
          )),
        MatchAll((
            rules: (lhs: Array({ 0: Variant("cdata", ["CDATA_ATTACK_STYLE"]) })),
            substitute: (rhs: { 0: Group("wield_style") })
          )),
        MatchAll((
            rules: (lhs: Array({ 0: Variant("cdata", ["CDATA_PIC", "CDATA_PIC_ORG", "CDATA_CHARA_PIC"]) })),
            substitute: (rhs: { 0: XY2Pic })
          )),
        MatchAll((
            rules: (lhs: Array({ 0: Variant("cdata", ["CDATA_QUALITY"]) })),
            substitute: (rhs: { 0: Group("fix_quality") })
          )),
        MatchAll((
            rules: (lhs: Array({ 0: Variant("cdata", ["CDATA_GOD"]) })),
            substitute: (rhs: { 0: Group("god") })
          )),
        MatchAll((
            rules: (lhs: Array({ 0: Variant("cdata", ["CDATA_EQUIP_WEIGHT"]) })),
            substitute: (rhs: { 0: Group("equip_weight_class") })
          )),
        MatchAll((
            rules: (lhs: Array({ 0: Variant("cdata", ["CDATA_RACE_ID"]) })),
            substitute: (rhs: { 0: Group("race_id") })
          )),
        MatchAll((
            rules: (lhs: Array({ 0: Variant("cdata", ["CDATA_RELATION", "CDATA_RELATION_ORG"]) })),
            substitute: (rhs: { 0: Group("relation") })
          )),
        MatchAll((
            rules: (lhs: Array({ 0: Variant("cdata", ["CDATA_ELEMENT"]) })),
            substitute: (rhs: { 0: GroupRecursive("skill_all_resist", Lhs("*")) })
          )),
        MatchAll((
            rules: (lhs: Array({ 0: Variant("cdata", ["CDATA_ROW_ACT"]) })),
            substitute: (rhs: { 0: Group("action") })
          )),
        MatchAll((
            rules: (lhs: Array({ 0: VariantRecursive("cdata", ["STARTING_CDATA_BUFF"], Lhs("+")) })),
            substitute: (rhs: { 0: Group("buff_id") })
          )),
        MatchAll((
            rules: (
              // lhs: Array({ 0: Symbol(["body", "cnt", "bodylist"]) }),
              ops: ["/", "\\", "*"],
              rhs: { 0: Variant("ext", ["EXT_EQUIP_SLOTS"]) },
            ),
            substitute: (rhs: { 0: Variant("ext", ["EXT_EQUIP_SLOTS"]) })
          )),
        MatchAll((
            rules: (lhs: Array({ 0: Variant("cdata", ["STARTING_CDATA_ACT_MAIN", "STARTING_CDATA_ACT_SUB"]) })),
            substitute: (
                rhs: {
                    0: Group("all_ai_actions"),
                    1: Group("all_ai_actions"),
                    2: Group("all_ai_actions"),
                    3: Group("all_ai_actions"),
                    4: Group("all_ai_actions")
                }
            )
          )),
      ]
    ),
    "inv": (
      indices: [
        MatchAll((
            rules: (lhs: Array({ 0: Variant("inv", ["INV_ITEM_PIC"]) })),
            substitute: (rhs: { 0: XY2Pic })
          )),
        MatchAll((
            rules: (lhs: Array({ 0: Variant("inv", ["INV_ITEM_ID"]) })),
            substitute: (rhs: { 0: Group("item_id") })
          )),
        MatchAll((
            rules: (lhs: Array({ 0: Variant("inv", ["INV_ITEM_STATUS"]) })),
            substitute: (rhs: { 0: Group("item_status") })
          )),
        MatchAll((
            rules: (lhs: Array({ 0: Variant("inv", ["INV_ITEM_PROPERTY"]) })),
            substitute: (rhs: { 0: Group("item_property") })
          )),
        MatchAll((
            rules: (lhs: Array({ 0: Variant("inv", ["INV_ITEM_KNOWN"]) })),
            substitute: (rhs: { 0: Group("item_known") })
          )),
        MatchAll((
            rules: (lhs: Array({ 0: Variant("inv", ["INV_ITEM_QUALITY"]) })),
            substitute: (rhs: { 0: Group("fix_quality") })
          )),
        MatchAll((
            rules: (lhs: Array({ 0: Variant("inv", ["INV_ITEM_SKILL_REF"]) })),
            substitute: (rhs: { 0: Group("skill_id") })
          )),
        MatchAll((
            rules: (lhs: Array({ 0: Variant("inv", ["INV_ITEM_MATERIAL"]) })),
            substitute: (rhs: { 0: Group("item_material") })
          )),
        MatchAll((
            rules: (lhs: Array({ 0: Variant("inv", ["INV_ITEM_EFFECT"]) })),
            substitute: (rhs: { 0: Group("item_effect") })
          )),
        MatchAll((
            rules: (lhs: Array({ 0: Variant("inv", ["INV_ITEM_EFFECT"]) })),
            substitute: (rhs: { 0: Group("item_effect") })
          )),
        // (
        //   rules: (lhs: Array({ 0: Variant("inv", ["INV_ITEM_FILE"]) })),
        //   substitute: (rhs: { 0: Group("item_file") })
        // )
      ]
    ),
    "ilight": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: Group("light_type") } )
          )),
      ]
    ),
    "ipicref": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: XY2Pic } )
          )),
      ]
    ),
    "icolref": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: Group("color") } )
          )),
      ]
    ),
    "mdata": (
      indices: [
        MatchAll((
            rules: ( lhs: Array({ 0: Variant("mdata", ["MDATA_TYPE"]) }) ),
            substitute: ( rhs: { 0: Group("map_type") } )
          )),
        MatchAll((
            rules: ( lhs: Array({ 0: Variant("mdata", ["MDATA_MUSIC"]) }) ),
            substitute: ( rhs: { 0: Group("music_id") } )
          )),
        MatchAll((
            rules: ( lhs: Array({ 0: Variant("mdata", ["MDATA_FIELD"]) }) ),
            substitute: ( rhs: { 0: Group("map_field") } )
          )),
        MatchAll((
            rules: ( lhs: Array({ 0: Variant("mdata", ["MDATA_TILESET"]) }) ),
            substitute: ( rhs: { 0: Group("map_tileset") } )
          ))
      ]
    ),
    "map": (
      indices: [
        MatchAll((
            rules: ( lhs: Array({ 2: Variant("map", ["MAP_TILE_ID", "MAP_TILE_ID_MEMORY"]) }) ),
            substitute: ( rhs: { 0: XY2Pic } )
          )),
        MatchAll((
            rules: ( lhs: Array({ 0: Variant("map", ["MAP_LIGHT_TYPE"]) }) ),
            substitute: ( rhs: { 0: Group("light_type") } )
          ))
      ]
    ),
    "adata": (
      indices: [
        MatchAll((
            rules: ( lhs: Array({ 0: Variant("adata", ["ADATA_ID", "ADATA_PARENT"]) }) ),
            substitute: ( rhs: { 0: Group("area_id") } )
          )),
        MatchAll((
            rules: ( lhs: Array({ 0: Variant("adata", ["ADATA_ICON"]) }) ),
            substitute: ( rhs: { 0: XY2Pic } )
          )),
        MatchAll((
            rules: ( lhs: Array({ 0: Variant("adata", ["ADATA_SHOP_TYPE"]) }) ),
            substitute: ( rhs: { 0: Group("shop_type") } )
          )),
        MatchAll((
            rules: ( lhs: Array({ 0: Variant("adata", ["ADATA_TYPE"]) }) ),
            substitute: ( rhs: { 0: Group("map_type") } )
          ))
      ]
    ),
    "feat": (
      indices: [
        MatchAll((
            rules: ( lhs: Array({ 0: Variant("feat", ["FEAT_CELL_FEATURE_ID"]) }) ),
            substitute: ( rhs: { 0: Group("cell_feature") } )
          )),
        MatchAll((
            rules: ( lhs: Array({ 0: Variant("feat", ["FEAT_CELL_SUB_FEATURE_ID"]) }) ),
            substitute: ( rhs: { 0: Group("cell_sub_feature") } )
          )),
      ]
    ),
    "atxid": (
      indices: [
        MatchAll((
            rules: ( lhs: Array({ 0: Variant("atxid", ["ATXID_ATX_ID"]) }) ),
            substitute: ( rhs: { 0: Group("atx") } )
          )),
      ]
    ),
    "gdata": (
      indices: [
        MatchAll((
            rules: ( lhs: Array({ 0: Variant("gdata", ["GDATA_WORLD_RENEW"]) }) ),
            substitute: ( rhs: { 0: Group("boolean") } )
          )),
        MatchAll((
            rules: ( lhs: Array({ 0: Variant("gdata", ["GDATA_AREA", "GDATA_TELEPORT_AREA", "GDATA_WORLD"]) }) ),
            substitute: ( rhs: { 0: Group("area_id") } )
          )),
        MatchAll((
            rules: ( lhs: Array({ 0: Variant("gdata", ["GDATA_WEATHER"]) }) ),
            substitute: ( rhs: { 0: Group("weather") } )
          )),
        MatchAll((
            rules: ( lhs: Array({ 0: Variant("gdata", ["GDATA_QUEST"]) }) ),
            substitute: ( rhs: { 0: Group("quest_type") } )
          )),
        MatchAll((
            rules: ( lhs: Array({ 0: Variant("gdata", ["GDATA_ROW_ACT"]) }) ),
            substitute: ( rhs: { 0: Group("action") } )
          )),
        MatchAll((
            rules: ( lhs: Array({ 0: Variant("gdata", ["GDATA_QUEST_STATE"]) }) ),
            substitute: ( rhs: { 0: Group("quest_state") } )
          )),
      ]
    ),
    "qdata": (
      indices: [
        MatchAll((
            rules: ( lhs: Array({ 0: Variant("qdata", ["QDATA_EXIST"]) }) ),
            substitute: ( rhs: { 0: Group("quest_type") } )
          )),
        MatchAll((
            rules: ( lhs: Array({ 0: Variant("qdata", ["QDATA_TYPE"]) }) ),
            substitute: ( rhs: { 0: Group("quest_type") } )
          )),
        MatchAll((
            rules: ( lhs: Array({ 0: Variant("qdata", ["QDATA_STATE"]) }) ),
            substitute: ( rhs: { 0: Group("quest_state") } )
          )),
        MatchAll((
            rules: ( lhs: Array({ 0: Variant("qdata", ["QDATA_REWARD_ITEM"]) }) ),
            substitute: ( rhs: { 0: Group("quest_reward_or_filter") } )
          )),
      ]
    ),
    "chipm": (
      indices: [
        MatchAll((
            rules: ( lhs: Array({ 0: Variant("chipm", ["CHIPM_ROLE", "CHIPM_ROLE_SUB"]) }) ),
            substitute: ( rhs: { 0: Group("chipm_role") } )
          )),
        MatchAll((
            rules: ( lhs: Array({ 0: Variant("chipm", ["CHIPM_ATTRIB"]) }) ),
            substitute: ( rhs: { 0: Group("chipm_attrib") } )
          )),
        MatchAll((
            rules: ( lhs: Array({ 0: Variant("chipm", ["CHIPM_ATTRIB"]) }), ops: ["&"] ),
            substitute: ( rhs: { 0: Group("chipm_attrib") } )
          )),
      ]
    ),
    "pcc": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: VariantRecursive("color", ["COLOR_TINT_MULT"], Rhs("\\")) } )
          )),
      ]
    ),
    "cardrefpic": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: XY2PicRecursive(Lhs("+")) } )
          )),
        MatchAll((
            substitute: ( rhs: { 0: GroupRecursive("color", Any) } )
          )),
      ]
    ),
    "mefsubref": (
      indices: [
        MatchAll((
            rules: ( lhs: Array({ 0: Variant("mefsubref", ["MEFSUBREF_X"]) }) ),
            substitute: ( rhs: { 2: Group("map_effect_type") } )
          )),
      ]
    ),
    "mef": (
      indices: [
        MatchAll((
            rules: ( lhs: Array({ 0: Variant("mef", ["MEF_TYPE"]) }) ),
            substitute: ( rhs: { 0: Group("mef_type") } )
          )),
        MatchAll((
            rules: ( lhs: Array({ 0: Variant("mef", ["MEF_SOURCE"]) }) ),
            substitute: ( rhs: { 0: Group("chara") } )
          )),
        MatchAll((
            rules: ( lhs: Array({ 0: Variant("mef", ["MEF_ITEM_ID"]) }) ),
            substitute: ( rhs: { 0: Group("item_id") } )
          )),
      ]
    ),
    "encref": (
      indices: [
        MatchAll((
            rules: ( lhs: Array({ 0: Variant("encref", ["ENCREF_GENERATE_CHANCE"]) }) ),
            substitute: ( rhs: { 3: Group("filter"), 4: Group("filter") } )
          )),
      ]
    ),
    "encprocref": (
      indices: [
        MatchAll((
            rules: ( lhs: Array({ 0: Variant("encprocref", ["ENCPROCREF_SKILL_ID"]) }) ),
            substitute: ( rhs: { 0: Group("skill_id"), 1: Group("target_type"), 3: Group("filter"), 4: Group("filter") } )
          )),
      ]
    ),
    "mtenc": (
      indices: [
        MatchAll((
            substitute: (
              lhs: Array({ 0: Constant(0) }),
              rhs: {
                0: Multi([
                    VariantRecursive("ext", ["EXT_ENCHANTMENT"], Any),
                    GroupRecursive("enchant_id", Lhs("*"))
                  ]),
              }
            )
          )),
        MatchAny((
            rule: VariantRecursive("enchant_id", ["ENCHANT_ATTRIBUTE", "ENCHANT_SUSTAIN", "ENCHANT_FOOD"], Lhs("*")),
            substitute: GroupRecursive("skill_attribute", Rhs("+")),
          )),
        MatchAny((
            rule: VariantRecursive("enchant_id", ["ENCHANT_RESISTANCE", "ENCHANT_ELEMENTAL_DMG"], Lhs("*")),
            substitute: GroupRecursive("skill_all_resist", Rhs("+")),
          )),
        MatchAny((
            rule: VariantRecursive("enchant_id", ["ENCHANT_PROC"], Lhs("*")),
            substitute: GroupRecursive("enchant_proc_id", Rhs("+")),
          )),
        MatchAny((
            rule: VariantRecursive("enchant_id", ["ENCHANT_SKILL"], Lhs("*")),
            substitute: GroupRecursive("skill_id", Rhs("+")),
          )),
        MatchAny((
            rule: VariantRecursive("enchant_id", ["ENCHANT_SPELL"], Lhs("*")),
            substitute: GroupRecursive("skill_spell", Rhs("+")),
          )),
      ]
    ),
    "mtlistmetal": (
      indices: [
        MatchAll((
            rules: ( lhs: Array({ 0: Constant(0) }) ),
            substitute: (
              rhs: {
                0: Group("item_material"),
                1: Group("item_material"),
                2: Group("item_material"),
                3: Group("item_material"),
              }
            )
          ))
      ]
    ),
    "mtlistleather": (
      indices: [
        MatchAll((
            rules: ( lhs: Array({ 0: Constant(0) }) ),
            substitute: (
              rhs: {
                0: Group("item_material"),
                1: Group("item_material"),
                2: Group("item_material"),
                3: Group("item_material"),
              }
            )
          ))
      ]
    ),
    "fishdata": (
      indices: [
        MatchAll((
            rules: ( lhs: Array({ 0: Variant("fishdata", ["FISHDATA_PIC"]) }) ),
            substitute: ( rhs: { 0: XY2Pic, 7: Group("item_id") } )
          )),
      ]
    ),
    "sdataref": (
      indices: [
        MatchAll((
            rules: ( lhs: Array({ 0: Variant("skill_dataref", ["SKILL_DATAREF_USE"]) }), rhs: { 4: Any } ),
            substitute: ( rhs: { 0: Group("skill_id"), 1: Group("skill_type"), 3: Group("target_type") } )
          ))
      ]
    ),
    "bdataref": (
      indices: [
        MatchAll((
            rules: ( lhs: Array({ 0: Variant("bdataref", ["BDATAREF_BUFF_TYPE"]) }) ),
            substitute: ( rhs: { 0: Group("buff_type") } )
          ))
      ]
    ),
    "matspot": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: Group("atx") } )
          ))
      ]
    ),
    "matval": (
      indices: [
        MatchAll((
            substitute: (
              lhs: Variable,
              rhs: {
                0: Group("skill_id"),
              }
            )
          ))
      ]
    ),
    "matneed": (
      indices: [
        MatchAll((
            substitute: (
              lhs: Variable,
              rhs: {
                0: Group("material_id"),
                2: Group("material_id"),
                4: Group("material_id"),
                6: Group("material_id"),
                8: Group("material_id"),
              }
            )
          ))
      ]
    ),
    "fixlv": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: Group("fix_quality") } )
          ))
      ]
    ),
    "fixmaterial": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: Group("item_material") } )
          ))
      ]
    ),
    "flttypemajor": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: Group("filter") } )
          ))
      ]
    ),
    "flttypeminor": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: Group("filter") } )
          ))
      ]
    ),
    "invrange": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: GroupRecursive("item", Any) } )
          ))
      ]
    ),
    "invhead": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: GroupRecursive("item", Any) } )
          ))
      ]
    ),
    "efid": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: Group("skill_or_buff_id") } )
          ))
      ]
    ),
    "efidprev": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: Group("skill_or_buff_id") } )
          ))
      ]
    ),
    "act": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: Group("ai_action_or_skill") } )
          ))
      ]
    ),
    "bitp": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: Group("chara_bit") } )
          ))
      ]
    ),
    "sound": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: Group("sound_id") } )
          ))
      ]
    ),
    "music": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: Group("music_id") } )
          ))
      ]
    ),
    "scenemode": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: Group("boolean") } )
          ))
      ]
    ),
    "chatpicloaded": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: Group("boolean") } )
          ))
      ]
    ),
    "levelexitby": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: Group("map_exit") } )
          ))
      ]
    ),
    "movelevelbystairs": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: Group("boolean") } )
          ))
      ]
    ),
    "chararefreshhack": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: Group("boolean") } )
          ))
      ]
    ),
    "reftype": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: Group("filter") } )
          ))
      ]
    ),
    "reftypeminor": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: Group("filter") } )
          ))
      ]
    ),
    "fixeditemenc": (
      indices: [
        MatchAll((
            substitute: (
              rhs: {
                0: Multi([
                    VariantRecursive("ext", ["EXT_ENCHANTMENT"], Any),
                    GroupRecursive("enchant_id", Lhs("*"))
                  ]),
                2: Multi([
                    VariantRecursive("ext", ["EXT_ENCHANTMENT"], Any),
                    GroupRecursive("enchant_id", Lhs("*"))
                  ]),
                4: Multi([
                    VariantRecursive("ext", ["EXT_ENCHANTMENT"], Any),
                    GroupRecursive("enchant_id", Lhs("*"))
                  ]),
                6: Multi([
                    VariantRecursive("ext", ["EXT_ENCHANTMENT"], Any),
                    GroupRecursive("enchant_id", Lhs("*"))
                  ]),
                8: Multi([
                    VariantRecursive("ext", ["EXT_ENCHANTMENT"], Any),
                    GroupRecursive("enchant_id", Lhs("*"))
                  ]),
                10: Multi([
                    VariantRecursive("ext", ["EXT_ENCHANTMENT"], Any),
                    GroupRecursive("enchant_id", Lhs("*"))
                  ]),
                12: Multi([
                    VariantRecursive("ext", ["EXT_ENCHANTMENT"], Any),
                    GroupRecursive("enchant_id", Lhs("*"))
                  ]),
                14: Multi([
                    VariantRecursive("ext", ["EXT_ENCHANTMENT"], Any),
                    GroupRecursive("enchant_id", Lhs("*"))
                  ]),
                16: Multi([
                    VariantRecursive("ext", ["EXT_ENCHANTMENT"], Any),
                    GroupRecursive("enchant_id", Lhs("*"))
                  ]),
                18: Multi([
                    VariantRecursive("ext", ["EXT_ENCHANTMENT"], Any),
                    GroupRecursive("enchant_id", Lhs("*"))
                  ]),
              }
            )
          )),
        MatchAny((
            rule: VariantRecursive("enchant_id", ["ENCHANT_ATTRIBUTE", "ENCHANT_SUSTAIN", "ENCHANT_FOOD"], Lhs("*")),
            substitute: GroupRecursive("skill_attribute", Rhs("+")),
          )),
        MatchAny((
            rule: VariantRecursive("enchant_id", ["ENCHANT_RESISTANCE", "ENCHANT_ELEMENTAL_DMG"], Lhs("*")),
            substitute: GroupRecursive("skill_all_resist", Rhs("+")),
          )),
        MatchAny((
            rule: VariantRecursive("enchant_id", ["ENCHANT_PROC"], Lhs("*")),
            substitute: GroupRecursive("enchant_proc_id", Rhs("+")),
          )),
        MatchAny((
            rule: VariantRecursive("enchant_id", ["ENCHANT_SKILL"], Lhs("*")),
            substitute: GroupRecursive("skill_id", Rhs("+")),
          )),
        MatchAny((
            rule: VariantRecursive("enchant_id", ["ENCHANT_SPELL"], Lhs("*")),
            substitute: GroupRecursive("skill_spell", Rhs("+")),
          )),
      ]
    ),
    "egoenc": (
      indices: [
        MatchAll((
            substitute: (
              rhs: {
                0: Multi([
                    VariantRecursive("ext", ["EXT_ENCHANTMENT"], Any),
                    GroupRecursive("enchant_id", Lhs("*"))
                  ]),
                2: Multi([
                    VariantRecursive("ext", ["EXT_ENCHANTMENT"], Any),
                    GroupRecursive("enchant_id", Lhs("*"))
                  ]),
                4: Multi([
                    VariantRecursive("ext", ["EXT_ENCHANTMENT"], Any),
                    GroupRecursive("enchant_id", Lhs("*"))
                  ]),
                6: Multi([
                    VariantRecursive("ext", ["EXT_ENCHANTMENT"], Any),
                    GroupRecursive("enchant_id", Lhs("*"))
                  ]),
                8: Multi([
                    VariantRecursive("ext", ["EXT_ENCHANTMENT"], Any),
                    GroupRecursive("enchant_id", Lhs("*"))
                  ]),
                10: Multi([
                    VariantRecursive("ext", ["EXT_ENCHANTMENT"], Any),
                    GroupRecursive("enchant_id", Lhs("*"))
                  ]),
                12: Multi([
                    VariantRecursive("ext", ["EXT_ENCHANTMENT"], Any),
                    GroupRecursive("enchant_id", Lhs("*"))
                  ]),
                14: Multi([
                    VariantRecursive("ext", ["EXT_ENCHANTMENT"], Any),
                    GroupRecursive("enchant_id", Lhs("*"))
                  ]),
                16: Multi([
                    VariantRecursive("ext", ["EXT_ENCHANTMENT"], Any),
                    GroupRecursive("enchant_id", Lhs("*"))
                  ]),
                18: Multi([
                    VariantRecursive("ext", ["EXT_ENCHANTMENT"], Any),
                    GroupRecursive("enchant_id", Lhs("*"))
                  ]),
              }
            )
          )),
        MatchAny((
            rule: VariantRecursive("enchant_id", ["ENCHANT_ATTRIBUTE", "ENCHANT_SUSTAIN", "ENCHANT_FOOD"], Lhs("*")),
            substitute: GroupRecursive("skill_attribute", Rhs("+")),
          )),
        MatchAny((
            rule: VariantRecursive("enchant_id", ["ENCHANT_RESISTANCE", "ENCHANT_ELEMENTAL_DMG"], Lhs("*")),
            substitute: GroupRecursive("skill_all_resist", Rhs("+")),
          )),
        MatchAny((
            rule: VariantRecursive("enchant_id", ["ENCHANT_PROC"], Lhs("*")),
            substitute: GroupRecursive("enchant_proc_id", Rhs("+")),
          )),
        MatchAny((
            rule: VariantRecursive("enchant_id", ["ENCHANT_SKILL"], Lhs("*")),
            substitute: GroupRecursive("skill_id", Rhs("+")),
          )),
        MatchAny((
            rule: VariantRecursive("enchant_id", ["ENCHANT_SPELL"], Lhs("*")),
            substitute: GroupRecursive("skill_spell", Rhs("+")),
          )),
      ]
    ),
    "ammoproc": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: Group("enchant_ammo") } )
          ))
      ]
    ),
    "amp": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: Group("enchant_ammo") } )
          ))
      ]
    ),
    "rplistdef": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: VariantRecursive("ext", ["EXT_RECIPES"], Any) } )
          ))
      ]
    ),
    "rpdata": (
      indices: [
        MatchAll((
            rules: ( lhs: Array({ 0: Variant("rpdata", ["RPDATA_ITEM"]) }) ),
            substitute: ( rhs: { 0: Group("item_or_recipe_blend_id") } )
          )),
        MatchAll((
            rules: ( lhs: Array({ 0: Variant("rpdata", ["RPDATA_SKILL"]) }) ),
            substitute: ( rhs: { 0: Group("skill_id") } )
          )),
        MatchAll((
            rules: ( lhs: Array({ 0: VariantRecursive("rpdata", ["RPDATA_SKILL"], Lhs("+")) }) ),
            substitute: (
                rhs: {
                    0: Group("skill_id"),
                    2: Group("skill_id"),
                    4: Group("skill_id"),
                    6: Group("skill_id"),
                    8: Group("skill_id")
                }
                )
          )),
        MatchAll((
            rules: ( lhs: Array({ 0: VariantRecursive("rpdata", ["RPDATA_MAT"], Lhs("+")) }) ),
            substitute: (
              rhs: {
                0: Group("recipe_ingredient"),
                1: Group("recipe_ingredient"),
                2: Group("recipe_ingredient"),
                3: Group("recipe_ingredient"),
                4: Group("recipe_ingredient"),
                5: Group("recipe_ingredient"),
                6: Group("recipe_ingredient"),
                7: Group("recipe_ingredient"),
                8: Group("recipe_ingredient"),
                9: Group("recipe_ingredient"),
                10: Group("recipe_ingredient"),
                11: Group("recipe_ingredient"),
                12: Group("recipe_ingredient"),
                13: Group("recipe_ingredient"),
                14: Group("recipe_ingredient"),
                15: Group("recipe_ingredient"),
                16: Group("recipe_ingredient"),
                17: Group("recipe_ingredient"),
                18: Group("recipe_ingredient"),
                19: Group("recipe_ingredient")
              }
            )
          )),
        MatchAll((
            rules: ( lhs: Array({ 0: VariantRecursive("rpdata", ["RPDATA_MAT"], Lhs("+")) }) ),
            substitute: ( rhs: { 0: VariantRecursive("ext", ["EXT_RF", "EXT_RP"], Any) } )
          )),
      ]
    ),
    "rplistshop": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: VariantRecursive("ext", ["EXT_RECIPES"], Any) })
          ))
      ]
    ),
    "rpid": (
      indices: [
        MatchAll((
            rules: ( rhs: { 0: VariantRecursive("rpdata", ["STARTING_RPID"], Lhs("+")) } ),
            substitute: ( rhs: { 0: VariantRecursive("rpdata", ["STARTING_RPID"], Lhs("+")), } )
          )),
        MatchAll((
            rules: ( rhs: { 0: VariantRecursive("ext", ["EXT_RP"], Rhs("+")) } ),
            substitute: (
              rhs: {
                0: Multi([
                    GroupRecursive("item_id", Lhs("+")),
                    VariantRecursive("ext", ["EXT_RP"], Rhs("+")),
                  ])
              }
            )
          ))
      ]
    ),
    "picp": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: Group("item_id") } )
          ))
      ]
    ),
    "invctrl": (
      indices: [
        MatchAll((
            rules: ( lhs: Variable ),
            substitute: ( rhs: { 0: Group("invctrl") } )
          )),
        MatchAll((
            rules: ( lhs: Array({0: Variant("invctrl", ["INVCTRL_GET"])}) ),
            substitute: ( rhs: { 1: Group("invctrl_get") } )
          )),
        MatchAll((
            rules: ( lhs: Array({0: Variant("invctrl", ["INVCTRL_MATERIAL_ENCHANT"])}) ),
            substitute: ( rhs: { 1: Group("invctrl_material_enchant") } )
          )),
        MatchAll((
            rules: ( lhs: Array({0: Variant("invctrl", ["INVCTRL_PUT"])}) ),
            substitute: ( rhs: { 1: Group("invctrl_put") } )
          )),
      ]
    ),

    "fsetincome":         (indices: [MatchAny((rule: Group("filter"), substitute: Group("filter")))]),
    "fsetchest":          (indices: [MatchAny((rule: Group("filter"), substitute: Group("filter")))]),
    "fsetwear":           (indices: [MatchAny((rule: Group("filter"), substitute: Group("filter")))]),
    "fsetitem":           (indices: [MatchAny((rule: Group("filter"), substitute: Group("filter")))]),
    "fsetrewardsupply":   (indices: [MatchAny((rule: Group("filter"), substitute: Group("filter")))]),
    "fsetrare":           (indices: [MatchAny((rule: Group("filter"), substitute: Group("filter")))]),
    "fsetperform ":       (indices: [MatchAny((rule: Group("filter"), substitute: Group("filter")))]),
    "fsetdeliver":        (indices: [MatchAny((rule: Group("filter"), substitute: Group("filter")))]),
    "fsetsupply":         (indices: [MatchAny((rule: Group("filter"), substitute: Group("filter")))]),
    "fsetmagic":          (indices: [MatchAny((rule: Group("filter"), substitute: Group("filter")))]),
    "fsetarmor":          (indices: [MatchAny((rule: Group("filter"), substitute: Group("filter")))]),
    "fsetweapon":         (indices: [MatchAny((rule: Group("filter"), substitute: Group("filter")))]),
    "fsetplantartifact":  (indices: [MatchAny((rule: Group("filter"), substitute: Group("filter")))]),
    "fsetplantunknown":   (indices: [MatchAny((rule: Group("filter"), substitute: Group("filter")))]),
    "fsetremain":         (indices: [MatchAny((rule: Group("filter"), substitute: Group("filter")))]),
    "fsetbarrel":         (indices: [MatchAny((rule: Group("filter"), substitute: Group("filter")))]),
    "fsetcollect":        (indices: [MatchAny((rule: Group("filter"), substitute: Group("filter")))]),
    "meeditfilterlist":   (indices: [MatchAny((rule: Group("filter"), substitute: Group("filter")))]),

    "isetplantunknownh":       (indices: [MatchAny((rule: Group("item_id"), substitute: Group("item_id")))]),
    "isetplantunknownn":       (indices: [MatchAny((rule: Group("item_id"), substitute: Group("item_id")))]),
    "isetplantunknowna":       (indices: [MatchAny((rule: Group("item_id"), substitute: Group("item_id")))]),
    "isetplantunknownf":       (indices: [MatchAny((rule: Group("item_id"), substitute: Group("item_id")))]),
    "isetplantfruith":         (indices: [MatchAny((rule: Group("item_id"), substitute: Group("item_id")))]),
    "isetplantfruitn":         (indices: [MatchAny((rule: Group("item_id"), substitute: Group("item_id")))]),
    "isetplantfruita":         (indices: [MatchAny((rule: Group("item_id"), substitute: Group("item_id")))]),
    "isetplantfruitf":         (indices: [MatchAny((rule: Group("item_id"), substitute: Group("item_id")))]),
    "isetplantvegeh":          (indices: [MatchAny((rule: Group("item_id"), substitute: Group("item_id")))]),
    "isetplantvegen":          (indices: [MatchAny((rule: Group("item_id"), substitute: Group("item_id")))]),
    "isetplantvegea":          (indices: [MatchAny((rule: Group("item_id"), substitute: Group("item_id")))]),
    "isetplantvegef":          (indices: [MatchAny((rule: Group("item_id"), substitute: Group("item_id")))]),
    "isetdrinkinn":            (indices: [MatchAny((rule: Group("item_id"), substitute: Group("item_id")))]),
    "isetdeed":                (indices: [MatchAny((rule: Group("item_id"), substitute: Group("item_id")))]),
    "isetfruit":               (indices: [MatchAny((rule: Group("item_id"), substitute: Group("item_id")))]),
    "isetthrowpotionminor":    (indices: [MatchAny((rule: Group("item_id"), substitute: Group("item_id")))]),
    "isetthrowpotionmajor":    (indices: [MatchAny((rule: Group("item_id"), substitute: Group("item_id")))]),
    "isetthrowpotiongreater":  (indices: [MatchAny((rule: Group("item_id"), substitute: Group("item_id")))]),
    "isethire":                (indices: [MatchAny((rule: Group("item_id"), substitute: Group("item_id")))]),
    "isetgiftminor":           (indices: [MatchAny((rule: Group("item_id"), substitute: Group("item_id")))]),
    "isetgiftmajor":           (indices: [MatchAny((rule: Group("item_id"), substitute: Group("item_id")))]),
    "isetgiftgrand":           (indices: [MatchAny((rule: Group("item_id"), substitute: Group("item_id")))]),
    "isethirerole":            (indices: [MatchAny((rule: Group("item_id"), substitute: Group("item_id")))]),
    "isetcrop":                (indices: [MatchAny((rule: Group("item_id"), substitute: Group("item_id")))]),
    "isetgod":                 (indices: [MatchAny((rule: Group("item_id"), substitute: Group("item_id")))]),

    "asettownn": (indices: [MatchAny((rule: Group("area_id"), substitute: Group("area_id")))]),
    "asettowns": (indices: [MatchAny((rule: Group("area_id"), substitute: Group("area_id")))]),

    "tile_trap":         (indices: [MatchAll((substitute: ( rhs: { 0: XY2Pic } )))]),
    "tile_doorclosed":   (indices: [MatchAll((substitute: ( rhs: { 0: XY2Pic } )))]),
    "tile_doorclosed2":  (indices: [MatchAll((substitute: ( rhs: { 0: XY2Pic } )))]),
    "tile_doorclosed3":  (indices: [MatchAll((substitute: ( rhs: { 0: XY2Pic } )))]),
    "tile_doorclosed4":  (indices: [MatchAll((substitute: ( rhs: { 0: XY2Pic } )))]),
    "tile_doorclosed5":  (indices: [MatchAll((substitute: ( rhs: { 0: XY2Pic } )))]),
    "tile_dooropen":     (indices: [MatchAll((substitute: ( rhs: { 0: XY2Pic } )))]),
    "tile_downstairs":   (indices: [MatchAll((substitute: ( rhs: { 0: XY2Pic } )))]),
    "tile_upstairs":     (indices: [MatchAll((substitute: ( rhs: { 0: XY2Pic } )))]),
    "tile_hidden":       (indices: [MatchAll((substitute: ( rhs: { 0: XY2Pic } )))]),
    "tile_downlocked":   (indices: [MatchAll((substitute: ( rhs: { 0: XY2Pic } )))]),
    "tile_re":           (indices: [MatchAll((substitute: ( rhs: { 0: XY2Pic } )))]),
    "tile_plant":        (indices: [MatchAll((substitute: ( rhs: { 0: XY2Pic } )))]),
    "tile_board":        (indices: [MatchAll((substitute: ( rhs: { 0: XY2Pic } )))]),
    "tile_votebox":      (indices: [MatchAll((substitute: ( rhs: { 0: XY2Pic } )))]),
    "tile_townboard":    (indices: [MatchAll((substitute: ( rhs: { 0: XY2Pic } )))]),
    "tile_trans":        (indices: [MatchAll((substitute: ( rhs: { 0: XY2Pic } )))]),
    "tile_dungeon":      (indices: [MatchAll((substitute: ( rhs: { 0: XY2Pic } )))]),
    "tile_battlesite":   (indices: [MatchAll((substitute: ( rhs: { 0: XY2Pic } )))]),
    "tile_default":      (indices: [MatchAll((substitute: ( rhs: { 0: XY2Pic } )))]),
    "tile_fog":          (indices: [MatchAll((substitute: ( rhs: { 0: XY2Pic } )))]),
    "tile_wall":         (indices: [MatchAll((substitute: ( rhs: { 0: XY2Pic } )))]),
    "tile_room":         (indices: [MatchAll((substitute: ( rhs: { 0: XY2Pic } )))]),
    "tile_tunnel":       (indices: [MatchAll((substitute: ( rhs: { 0: XY2Pic } )))]),
    "tile_pot":          (indices: [MatchAll((substitute: ( rhs: { 0: XY2Pic } )))]),

    "picfood":           (indices: [MatchAny((substitute: XY2Pic))]),

    "eqhelm":     (indices: [MatchAll((rules: (rhs: { 0: Variable }), substitute: (rhs: { 0: Group("filter_item_or_item_id"), 1: Group("fix_quality") })))]),
    "eqweapon1":  (indices: [MatchAll((rules: (rhs: { 0: Variable }), substitute: (rhs: { 0: Group("filter_item_or_item_id"), 1: Group("fix_quality") })))]),
    "eqshield":   (indices: [MatchAll((rules: (rhs: { 0: Variable }), substitute: (rhs: { 0: Group("filter_item_or_item_id"), 1: Group("fix_quality") })))]),
    "eqrange":    (indices: [MatchAll((rules: (rhs: { 0: Variable }), substitute: (rhs: { 0: Group("filter_item_or_item_id"), 1: Group("fix_quality") })))]),
    "eqammo":     (indices: [MatchAll((rules: (rhs: { 0: Variable }), substitute: (rhs: { 0: Group("filter_item_or_item_id"), 1: Group("fix_quality") })))]),
    "eqweapon2":  (indices: [MatchAll((rules: (rhs: { 0: Variable }), substitute: (rhs: { 0: Group("filter_item_or_item_id"), 1: Group("fix_quality") })))]),
    "eqarmor":    (indices: [MatchAll((rules: (rhs: { 0: Variable }), substitute: (rhs: { 0: Group("filter_item_or_item_id"), 1: Group("fix_quality") })))]),
    "eqglove":    (indices: [MatchAll((rules: (rhs: { 0: Variable }), substitute: (rhs: { 0: Group("filter_item_or_item_id"), 1: Group("fix_quality") })))]),
    "eqboots":    (indices: [MatchAll((rules: (rhs: { 0: Variable }), substitute: (rhs: { 0: Group("filter_item_or_item_id"), 1: Group("fix_quality") })))]),
    "eqcloack":   (indices: [MatchAll((rules: (rhs: { 0: Variable }), substitute: (rhs: { 0: Group("filter_item_or_item_id"), 1: Group("fix_quality") })))]),
    "eqgirdle":   (indices: [MatchAll((rules: (rhs: { 0: Variable }), substitute: (rhs: { 0: Group("filter_item_or_item_id"), 1: Group("fix_quality") })))]),
    "eqring1":    (indices: [MatchAll((rules: (rhs: { 0: Variable }), substitute: (rhs: { 0: Group("filter_item_or_item_id"), 1: Group("fix_quality") })))]),
    "eqring2":    (indices: [MatchAll((rules: (rhs: { 0: Variable }), substitute: (rhs: { 0: Group("filter_item_or_item_id"), 1: Group("fix_quality") })))]),
    "eqamulet1":  (indices: [MatchAll((rules: (rhs: { 0: Variable }), substitute: (rhs: { 0: Group("filter_item_or_item_id"), 1: Group("fix_quality") })))]),
    "eqamulet2":  (indices: [MatchAll((rules: (rhs: { 0: Variable }), substitute: (rhs: { 0: Group("filter_item_or_item_id"), 1: Group("fix_quality") })))]),

    // Functions

    "cbit": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: Group("boolean") } )
          ))
      ]
    ),
    "ibit": (
      indices: [
        MatchAll((
            substitute: ( rhs: { 0: Group("boolean") } )
          ))
      ]
    ),
    "refitem": (
      indices: [
        MatchAll((
            rules: ( lhs: Array({ 1: Variant("dbspec_item", ["DBSPEC_TYPE", "DBSPEC_TYPE_MINOR"]) }) ),
            substitute: ( rhs: { 0: Group("filter") } )
          )),
        MatchAll((
            rules: ( lhs: Array({ 1: Variant("dbspec_item", ["DBSPEC_CAN_READ", "DBSPEC_CAN_ZAP", "DBSPEC_CAN_DRINK", "DBSPEC_CAN_USE"]) }) ),
            substitute: ( rhs: { 0: Group("boolean") } )
          ))
      ]
    ),
  },

  functions: {
    "HMMBITON": (
      args: {
        0: (name: "target", type: Int),
        1: (name: "bit", type: Int, indices: [
            (
              rules: { 0: Symbol(["cbitorg"]) },
              substitute: GroupRecursive("chara_bit", Lhs("\\"))
            )
          ]
        ),
      }
    ),
    "buffer": (
      args: {
        0: (name: "bufferid", type: Int, indices: [ ( substitute: Group("gsel_buffer") )]),
      }
    ),
    "gsel": (
      args: {
        0: (name: "bufferid", type: Int, indices: [ ( substitute: Group("gsel_buffer") )]),
      }
    ),
    "gcopy": (
      args: {
        0: (name: "bufferid", type: Int, indices: [ ( substitute: Group("gsel_buffer") )]),
        1: (name: "x", type: Int),
        2: (name: "y", type: Int),
        3: (name: "width", type: Int),
        4: (name: "height", type: Int),
      }
    ),
    "grotate": (
      args: {
        0: (name: "bufferid", type: Int, indices: [ ( substitute: Group("gsel_buffer") )]),
        1: (name: "x", type: Int),
        2: (name: "y", type: Int),
        3: (name: "rot", type: Int),
        4: (name: "width", type: Int),
        5: (name: "height", type: Int),
      }
    ),
    "netload": (
      args: {
        0: (name: "filename", type: Str),
      }
    ),
    "xy2pic": (
      args: {
        0: (name: "x", type: Int),
        1: (name: "y", type: Int),
      }
    ),
    "hantozen": (
      args: {
        0: (name: "arg1", type: Str),
        1: (name: "arg2", type: Var),
        2: (name: "arg3", type: Int),
      }
    ),
    "zentohan": (
      args: {
        0: (name: "arg1", type: Str),
        1: (name: "arg2", type: Var),
        2: (name: "arg3", type: Int),
      }
    ),
    "tmset": (
      args: {}
    ),
    "tmend": (
      args: {}
    ),
    "lang": (
      args: {
        0: (name: "jp", type: Str),
        1: (name: "en", type: Str),
      }
    ),
    "cnvrank": (
      args: {
        0: (name: "rank", type: Int),
      }
    ),
    "cnvtalk": (
      args: {
        0: (name: "str", type: Str),
      }
    ),
    "cnvarticle": (
      args: {
        0: (name: "str", type: Str),
      }
    ),
    "cnvitemname": (
      args: {
        0: (name: "itemid", type: Int, indices: [ ( substitute: Group("item_id")) ]),
      }
    ),
    "cnven": (
      args: {
        0: (name: "str", type: Str),
      }
    ),
    "cbit": (
      args: {
        0: (name: "bit", indices: [ ( substitute: Group("chara_bit" ) ) ]),
        1: (name: "charid", indices: [ ( substitute: Group("chara" ) ) ]),
      }
    ),
    "cbitmod": (
      args: {
        0: (name: "bit", indices: [ ( substitute: Group("chara_bit" ) ) ]),
        1: (name: "charid", indices: [ ( substitute: Group("chara" ) ) ]),
        2: (name: "seton", indices: [ ( substitute: Group("boolean" )) ])
      }
    ),
    "refchara": (
      args: {
        0: (name: "dbid", indices: [ ( substitute: Group("chara_id" ) ) ]),
        1: (name: "dbspec", indices: [ ( substitute: Group("dbspec_chara" )) ]),
        2: (name: "charid")
      }
    ),
    "refclass": (
      args: {
        0: (name: "dbid", type: Int),
        1: (name: "dbspec", type: Int, indices: [ ( substitute: Group("dbspec_chara" )) ]),
      }
    ),
    "refrace": (
      args: {
        0: (name: "dbidn", type: Str),
        1: (name: "dbspec", type: Int, indices: [ ( substitute: Group("dbspec_chara" )) ]),
      }
    ),
    "ranktitle": (
      args: {
        0: (name: "rank", type: Int),
      }
    ),
    "guildname": (
      args: {}
    ),
    "calcbuff": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("calcbuff_chara") ) ]),
        1: (name: "buffid", type: Int, indices: [ ( substitute: Group("buff_id") ) ]),
        2: (name: "power", type: Int),
      }
    ),
    "calcskill": (
      args: {
        0: (name: "skillid", type: Int, indices: [ ( substitute: Group("skill_id")) ]),
        1: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
        2: (name: "spellpower", type: Int),
      }
    ),
    "sorg": (
      args: {
        0: (name: "skillid", type: Int, type: Int, indices: [ ( substitute: Group("skill_id")) ]),
        1: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
      }
    ),
    "randskill": (
      args: {}
    ),
    "randattb": (
      args: {}
    ),
    "ibit": (
      args: {
        0: (name: "bit", indices: [ ( substitute: Group("item_bit" ) ) ]),
        1: (name: "itemid")
      }
    ),
    "ibitmod": (
      args: {
        0: (name: "bit", indices: [ ( substitute: Group("item_bit" ) ) ]),
        1: (name: "itemid"),
        2: (name: "seton", indices: [ ( substitute: Group("boolean" )) ])
      }
    ),
    "refitem": (
      args: {
        0: (name: "dbid", indices: [ ( substitute: Group("item_id" ) ) ]),
        1: (name: "dbspec", indices: [ ( substitute: Group("dbspec_item" )) ]),
      }
    ),
    "iequiploc": (
      args: {
        0: (name: "itemid", type: Int, indices: [ ( substitute: Group("item")) ]),
      }
    ),
    "setunid": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
        1: (name: "unid", type: Int),
      }
    ),
    "getunid": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
      }
    ),
    "findunid": (
      args: {
        0: (name: "arg1", type: Str),
      }
    ),
    "synccheck": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "evid": (
      args: {}
    ),
    "evfind": (
      args: {
        0: (name: "eventid", type: Int),
      }
    ),
    "evadd": (
      args: {
        0: (name: "evid", type: Int, indices: [ ( substitute: Group("event") ) ]),
        1: (name: "param1", type: Int),
        2: (name: "param2", type: Int),
      }
    ),
    "sndload": (
      args: {
        0: (name: "filepath", type: Str),
        1: (name: "sound_id", type: Int, indices: [ ( substitute: Group("sound_id")) ]),
      }
    ),
    "musicload": (
      args: {
        0: (name: "arg1", type: Str),
        1: (name: "arg2", type: Int),
      }
    ),
    "snd": (
      args: {
        0: (name: "sound_id", type: Int, indices: [ ( substitute: Group("sound_id")) ]),
        1: (name: "looping", type: Int, indices: [ ( substitute: Group("boolean")) ]),
        2: (name: "stop_if_playing", type: Int, indices: [ ( substitute: Group("boolean")) ]),
      }
    ),
    // "GetTStatus": (
    //   args: {
    //     0: (name: "TweakCategory", type: Int),
    //     1: (name: "TweakNumber", type: Int),
    //   }
    // ),
    "key_check": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "keyrelease": (
      args: {}
    ),
    "press": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "bmes": (
      args: {
        0: (name: "arg1", type: Str),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
        3: (name: "arg4", type: Int),
      }
    ),
    "talk_conv": (
      args: {
        0: (name: "arg1", type: Var),
        1: (name: "arg2", type: Int),
      }
    ),
    "msg_write": (
      args: {
        0: (name: "arg1", type: Var),
      }
    ),
    "txtmore": (
      args: {}
    ),
    "txtcontinue": (
      args: {}
    ),
    "anime_halt": (
      args: {}
    ),
    "msg_halt": (
      args: {}
    ),
    "help_halt": (
      args: {}
    ),
    "txtef": (
      args: {
        0: (name: "color", type: Int, indices: [ ( substitute: Group("color") ) ]),
      }
    ),
    "msg_newlog": (
      args: {}
    ),
    "msg_newline": (
      args: {}
    ),
    "txtnew": (
      args: {}
    ),
    "msg_clear": (
      args: {}
    ),
    "txt_conv": (
      args: {}
    ),
    "name": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "aln": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
      }
    ),
    "npcn": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
      }
    ),
    "_s": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
        1: (name: "arg2", type: Int),
      }
    ),
    "_s2": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "is2": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "is": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
      }
    ),
    "was": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
      }
    ),
    "have": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
      }
    ),
    "does": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "he": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
        1: (name: "arg2", type: Int),
      }
    ),
    "_s3": (
      args: {
        0: (name: "num", type: Int),
      }
    ),
    "his2": (
      args: {
        0: (name: "EntityID", type: Int),
      }
    ),
    "him2": (
      args: {
        0: (name: "EntityID", type: Int),
      }
    ),
    "his": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
        1: (name: "arg2", type: Int),
      }
    ),
    "him": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
        1: (name: "arg2", type: Int),
      }
    ),
    "your2": (
      args: {
        0: (name: "EntityID2", type: Int),
      }
    ),
    "your": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
        1: (name: "arg1", type: Int),
      }
    ),
    "yourself": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
      }
    ),
    "txt_check": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "txt_select": (
      args: {
        0: (name: "arg1", type: Str),
        1: (name: "arg2", type: Str),
        2: (name: "arg3", type: Str),
        3: (name: "arg4", type: Str),
        4: (name: "arg5", type: Str),
        5: (name: "arg6", type: Str),
        6: (name: "arg7", type: Str),
        7: (name: "arg8", type: Str),
        8: (name: "arg9", type: Str),
      }
    ),
    "cnvfix": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "stxt": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Str),
      }
    ),
    "cnvdate": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "cnvplaytime": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "roundmargin": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "at": (
      args: {
        0: (name: "waittime", type: Int),
      }
    ),
    "text_set": (
      args: {}
    ),
    "elename": (
      args: {
        0: (name: "ele", type: Int, indices: [ ( substitute: Group("skill_all_resist")) ]),
      }
    ),
    "txttargetlevel": (
      args: {}
    ),
    "txttargetsp": (
      args: {}
    ),
    "sncnv": (
      args: {
        0: (name: "arg1", type: Var),
      }
    ),
    "sngeneral": (
      args: {
        0: (name: "arg1", type: Var),
      }
    ),
    "sninn": (
      args: {
        0: (name: "arg1", type: Var),
      }
    ),
    "sntrade": (
      args: {
        0: (name: "arg1", type: Var),
      }
    ),
    "sngoods": (
      args: {
        0: (name: "arg1", type: Var),
      }
    ),
    "snbakery": (
      args: {
        0: (name: "arg1", type: Var),
      }
    ),
    "snmagic": (
      args: {
        0: (name: "arg1", type: Var),
      }
    ),
    "snarmor": (
      args: {
        0: (name: "arg1", type: Var),
      }
    ),
    "sntrainer": (
      args: {
        0: (name: "arg1", type: Var),
      }
    ),
    "snfish": (
      args: {
        0: (name: "arg1", type: Var),
      }
    ),
    "snblack": (
      args: {
        0: (name: "arg1", type: Var),
      }
    ),
    "snfood": (
      args: {
        0: (name: "arg1", type: Var),
      }
    ),
    "txtsetlastword": (
      args: {}
    ),
    "txtsetwinword": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "txtsetwinwordc": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "limitmax": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "maplevel": (
      args: {
        0: (name: "arg0", type: Int),
      }
    ),
    "mapfile": (
      args: {
        0: (name: "mapid", type: Int),
      }
    ),
    "mapname": (
      args: {
        0: (name: "mapid", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "txtbuilding": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "txtskillchange": (
      args: {
        0: (name: "skillid", type: Int, indices: [ ( substitute: Group("skill_id")) ]),
        1: (name: "negative", type: Int),
        2: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
      }
    ),
    "foodname": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Str),
        2: (name: "arg3", type: Int),
        3: (name: "arg4", type: Int),
      }
    ),
    "_yoro": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "_dozo": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "_thanks": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "_birth": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "_rob": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "_ka": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "_da": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "_nda": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "_noka": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "_kana": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "_kimi": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "_ru": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "_tanomu": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "_ore": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "_ga": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "_dana": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "_kure": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "_daro": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "_yo": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "_aru": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "_u": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "_na": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "_ta": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "_trick": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "cnvweight": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "fltname": (
      args: {
        0: (name: "type", type: Int),
      }
    ),
    "addnews2": (
      args: {
        0: (name: "arg1", type: Str),
        1: (name: "arg2", type: Int),
      }
    ),
    "addnewstopic": (
      args: {
        0: (name: "arg1", type: Str),
        1: (name: "arg2", type: Str),
      }
    ),
    "addnews": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "txtgod": (
      args: {
        0: (name: "godid", type: Int, indices: [ ( substitute: Group("god")) ]),
        1: (name: "flavor", type: Int, indices: [ ( substitute: Group("god_text")) ]),
      }
    ),
    "create_pcpic": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "addefmap": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
        3: (name: "arg4", type: Int),
        4: (name: "arg5", type: Int),
        5: (name: "arg6", type: Int),
      }
    ),
    "cardplayerinit": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "cardplayeradd": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
      }
    ),
    "initcard": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg2", type: Int),
      }
    ),
    "showcard2": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "showcardpile": (
      args: {}
    ),
    "showcard": (
      args: {}
    ),
    "servecard": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "showcardholder": (
      args: {}
    ),
    "opencard2": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "trashcard": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "cpscore": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "lastcard": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "cpblackcard": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "cpcardnum": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "pileremain": (
      args: {}
    ),
    "csvsort": (
      args: {
        0: (name: "arg1", type: Array),
        1: (name: "arg2", type: Var),
        2: (name: "arg3", type: Int),
      }
    ),
    "randomname": (
      args: {
        0: (name: "arg0", type: Int),
      }
    ),
    "random_title": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "getinheritance": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Array),
        2: (name: "arg3", type: Var),
      }
    ),
    "calcobjlv": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "calcfixlv": (
      args: {
        0: (name: "startquality", type: Int, indices: [ ( substitute: Group("fix_quality") )]),
      }
    ),
    "flt": (
      args: {
        0: (name: "objlv", type: Int),
        1: (name: "qualitylv", type: Int, indices: [ ( substitute: Group("fix_quality") )]),
      }
    ),
    "fltn": (
      args: {
        0: (name: "arg1", type: Str),
      }
    ),
    "discsetmc": (
      args: {}
    ),
    "fltsetdungeon": (
      args: {}
    ),
    "randomele": (
      args: {}
    ),
    "putenclv": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "encflt": (
      args: {
        0: (name: "filter1", type: Int),
        1: (name: "filter2", type: Int),
      }
    ),
    "randomenc": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "randomenclv": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "randomencp": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "sortenc": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "encremove": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
      }
    ),
    "encadd": (
      args: {
        0: (name: "itemidx", type: Int),
        1: (
          name: "enchant",
          type: Int,
          indices: [
            (
              substitute: Multi([
                  VariantRecursive("ext", ["EXT_ENCHANTMENT"], Any),
                  GroupRecursive("enchant_id", Lhs("*"))
                ])
            ),
            (
              rules: { 1: VariantRecursive("enchant_id", ["ENCHANT_ATTRIBUTE", "ENCHANT_SUSTAIN", "ENCHANT_FOOD"], Lhs("*")) },
              substitute: GroupRecursive("skill_attribute", Rhs("+")),
            ),
            (
              rules: { 1: VariantRecursive("enchant_id", ["ENCHANT_RESISTANCE", "ENCHANT_ELEMENTAL_DMG"], Lhs("*")) },
              substitute: GroupRecursive("skill_all_resist", Rhs("+")),
            ),
            (
              rules: { 1: VariantRecursive("enchant_id", ["ENCHANT_PROC"], Lhs("*")) },
              substitute: GroupRecursive("enchant_proc_id", Rhs("+")),
            ),
            (
              rules: { 1: VariantRecursive("enchant_id", ["ENCHANT_SKILL"], Lhs("*")) },
              substitute: GroupRecursive("skill_id", Rhs("+")),
            ),
            (
              rules: { 1: VariantRecursive("enchant_id", ["ENCHANT_SPELL"], Lhs("*")) },
              substitute: GroupRecursive("skill_spell", Rhs("+")),
            ),
            (
              rules: { 1: Literal },
              substitute: Group("enchant_id"),
            ),
          ]
        ),
        2: (name: "arg3", type: Int),
        3: (name: "arg4", type: Int),
        4: (name: "arg5", type: Int),
        5: (name: "arg6", type: Int),
        6: (name: "arg7", type: Int),
      }
    ),
    "egoadd": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "itemcreate": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
        1: (name: "dbid", type: Int, indices: [ ( substitute: Group("item_id" )) ]),
        2: (name: "x", type: Int),
        3: (name: "y", type: Int),
        4: (name: "num", type: Int),
      }
    ),
    "inv_getheader": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "inv_getowner": (
      args: {
        0: (name: "itemid", type: Int, indices: [ ( substitute: Group("item") ) ]),
      }
    ),
    "inv_find": (
      args: {
        0: (name: "item_dbid", type: Int, indices: [ ( substitute: Group("item_id" )) ]),
        1: (name: "invid", type: Int, indices: [ ( substitute: Group("inv_id" )) ]),
      }
    ),
    "fix_find": (
      args: {
        0: (name: "item_dbid", type: Int, indices: [ ( substitute: Group("item_id" )) ]),
        1: (name: "invid", type: Int, indices: [ ( substitute: Group("inv_id" )) ]),
      }
    ),
    "item_find": (
      args: {
        0: (
          name: "query",
          type: Int,
          indices: [
            (
              rules: { 1: Variant("item_find_mode", ["ITEM_FIND_MODE_TYPE", "ITEM_FIND_MODE_TYPE_MINOR"]) },
              substitute: Group("filter")
            ),
            (
              rules: { 1: Variant("item_find_mode", ["ITEM_FIND_MODE_DBID"]) },
              substitute: Group("item_id")
            ),
            (
              rules: { 1: Variant("item_find_mode", ["ITEM_FIND_MODE_SKILL_REF"]) },
              substitute: Group("skill_id")
            )
          ]
        ),
        1: (name: "mode", type: Int, indices: [ ( substitute: Group("item_find_mode" ) ) ]),
        2: (name: "inv", type: Int, indices: [ ( substitute: Group("item_find_location" )) ]),
      }
    ),
    "encfind": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara" )) ]),
        1: (name: "encid", type: Int, indices: [ ( substitute: Group("enchant_id" )) ]),
      }
    ),
    "encfindpower": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara" )) ]),
        1: (name: "encid", type: Int, indices: [ ( substitute: Group("enchant_id" )) ]),
      }
    ),
    "encfindspec": (
      args: {
        0: (name: "itemid", type: Int, indices: [ ( substitute: Group("item")) ]),
        1: (name: "encid", type: Int, indices: [ ( substitute: Group("enchant_id" )) ]),
      }
    ),
    "itemlist": (
      args: {
        0: (name: "inv", type: Int, indices: [ ( substitute: Group("inv_id" )) ]),
        1: (name: "item_dbid", type: Int, indices: [ ( substitute: Group("item_id" )) ]),
      }
    ),
    "itemusingfind": (
      args: {
        0: (name: "itemid", type: Int, indices: [ ( substitute: Group("item")) ]),
        1: (name: "arg2", type: Int, indices: [ ( substitute: Group("boolean" )) ]),
      }
    ),
    "itemfind": (
      args: {
        0: (name: "x", type: Int),
        1: (name: "y", type: Int),
        2: (name: "item_dbid", type: Int, indices: [ ( substitute: Group("item_id" )) ]),
      }
    ),
    "allitemfind": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "mapfoodtypefind": (
      args: {
        0: (name: "x", type: Int),
        1: (name: "y", type: Int),
        2: (name: "arg3", type: Int),
      }
    ),
    "mapitemfind": (
      args: {
        0: (name: "x", type: Int),
        1: (name: "y", type: Int),
        2: (name: "itemid", type: Int, indices: [ ( substitute: Group("item_id")) ]),
      }
    ),
    "cell_refresh": (
      args: {
        0: (name: "x", type: Int),
        1: (name: "y", type: Int),
      }
    ),
    "itemturn": (
      args: {
        0: (name: "itemid", type: Int, indices: [ ( substitute: Group("item")) ]),
      }
    ),
    "removeitem": (
      args: {
        0: (name: "itemid", type: Int, indices: [ ( substitute: Group("item") ) ]),
        1: (name: "amount", type: Int),
      }
    ),
    "item_copy": (
      args: {
        0: (name: "src", type: Int),
        1: (name: "dst", type: Int),
      }
    ),
    "item_exchange": (
      args: {
        0: (name: "itemid1", type: Int),
        1: (name: "itemid2", type: Int),
      }
    ),
    "item_delete": (
      args: {
        0: (name: "itemid", type: Int, indices: [ ( substitute: Group("item")) ]),
      }
    ),
    "inv_getspace": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
      }
    ),
    "inv_sum": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
      }
    ),
    "item_compress": (
      args: {
        0: (name: "arg0", type: Int),
      }
    ),
    "inv_getfreeid": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
      }
    ),
    "inv_weight": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
      }
    ),
    "item_num": (
      args: {
        0: (name: "itemid", type: Int, indices: [ ( substitute: Group("item")) ]),
        1: (name: "amount", type: Int),
      }
    ),
    "item_separate": (
      args: {
        0: (name: "itemid", type: Var),
      }
    ),
    "chara_unequip": (
      args: {
        0: (name: "itemid", type: Int, indices: [ ( substitute: Group("item")) ]),
      }
    ),
    "item_identify": (
      args: {
        0: (name: "itemid", type: Int, indices: [ ( substitute: Group("item")) ]),
        1: (name: "idlevel", type: Int, indices: [ ( rules: { 1: Group("item_known") }, substitute: Group("item_known")) ]),
        2: (name: "power", type: Int),
      }
    ),
    "item_checkknown": (
      args: {
        0: (name: "itemid", type: Int, indices: [ ( substitute: Group("item")) ]),
      }
    ),
    "rpname": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "itemowner": (
      args: {
        0: (name: "itemid", type: Int, indices: [ ( substitute: Group("item") ) ]),
      }
    ),
    "itemname": (
      args: {
        0: (name: "itemid", type: Int, indices: [ ( substitute: Group("item") ) ]),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
      }
    ),
    "remain_make": (
      args: {
        0: (name: "itemid", type: Int, indices: [ ( substitute: Group("item") ) ]),
        1: (name: "arg2", type: Int),
      }
    ),
    "make_dish": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "item_stack": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara") ) ]),
        1: (name: "itemid", type: Int, indices: [ ( substitute: Group("item") ) ]),
        2: (name: "mode", type: Int),
      }
    ),
    "colorres": (
      args: {
        0: (name: "arg0", type: Int),
      }
    ),
    "equipinfo": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
      }
    ),
    "csvstr2": (
      args: {
        0: (name: "arg1", type: Array),
        1: (name: "arg2", type: Str),
      }
    ),
    "cargocheck": (
      args: {}
    ),
    "rndshuffle": (
      args: {
        0: (name: "arg1", type: Array),
      }
    ),
    "dist": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
        3: (name: "arg4", type: Int),
      }
    ),
    "winposy": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "cutname": (
      args: {
        0: (name: "arg1", type: Var),
        1: (name: "arg2", type: Int),
      }
    ),
    "cs_list": (
      args: {
        0: (name: "arg1", type: Str),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
        3: (name: "arg4", type: Int),
        4: (name: "arg5", type: Int),
        5: (name: "arg6", type: Int),
        6: (name: "arg7", type: Int),
      }
    ),
    "cs_listbk": (
      args: {}
    ),
    "gohostile": (
      args: {}
    ),
    "goneutral": (
      args: {}
    ),
    "modkarma": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "modrank": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
      }
    ),
    "sexp": (
      args: {
        0: (name: "skillid", type: Int, indices: [ ( substitute: Group("skill_id")) ]),
        1: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
      }
    ),
    "sgrowth": (
      args: {
        0: (name: "skillid", type: Int, indices: [ ( substitute: Group("skill_id")) ]),
        1: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
      }
    ),
    "modgrowth": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
        1: (name: "skillid", type: Int, indices: [ ( substitute: Group("skill_id")) ]),
        2: (name: "arg3", type: Int),
      }
    ),
    "skillgain": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
        1: (name: "skillid", type: Int),
        2: (name: "arg3", type: Int),
        3: (name: "arg4", type: Int),
      }
    ),
    "skillmod": (
      args: {
        0: (name: "skillid", type: Int, indices: [ ( substitute: Group("skill_id")) ]),
        1: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
        2: (name: "arg3", type: Int),
      }
    ),
    "skillexp": (
      args: {
        0: (name: "skillid", type: Int, indices: [ ( substitute: Group("skill_id")) ]),
        1: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
        2: (name: "amount", type: Int),
        3: (name: "arg4", type: Int),
        4: (name: "arg5", type: Int),
      }
    ),
    "calcfame": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
        1: (name: "amount", type: Int),
      }
    ),
    "decfame": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
        1: (name: "amount", type: Int),
      }
    ),
    "getworker": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "removeworker": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "calcshopreform": (
      args: {}
    ),
    "delmef": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "addmef": (
      args: {
        0: (name: "x", type: Int),
        1: (name: "y", type: Int),
        2: (name: "mefid", type: Int, indices: [ ( substitute: Group("mef_type")) ]),
        3: (name: "chip", type: Int, indices: [ ( substitute: XY2Pic ) ]),
        4: (name: "duration", type: Int),
        5: (name: "power", type: Int),
        6: (name: "source", type: Int, indices: [ ( substitute: Group("chara")) ]),
        7: (name: "itemid", type: Int),
        8: (name: "cursestate", type: Int),
        9: (name: "color", type: Int),
      }
    ),
    "cell_featset": (
      args: {
        0: (name: "x", type: Int),
        1: (name: "y", type: Int),
        2: (name: "chipid", type: Int),
        3: (name: "featid", type: Int, indices: [ ( substitute: Group("cell_feature")) ]),
        4: (name: "featsubid", type: Int, indices: [ ( rules: { 3: Variant("cell_feature", ["CELL_FEATURE_TRAP", "CELL_FEATURE_SEED"]) }, substitute: Group("cell_sub_feature")) ]),
        5: (name: "param", type: Int),
      }
    ),
    "cell_featread": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg2", type: Int),
      }
    ),
    "cell_featclear": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "cell_check": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "cell_swap": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
        3: (name: "arg4", type: Int),
      }
    ),
    "cell_movechara": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
      }
    ),
    "route_info": (
      args: {
        0: (name: "arg1", type: Var),
        1: (name: "arg2", type: Var),
        2: (name: "arg3", type: Int),
      }
    ),
    "breath_list": (
      args: {}
    ),
    "draw_emo": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
      }
    ),
    "chara_preparepic": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "cell_shownull": (
      args: {
        0: (name: "x", type: Int),
        1: (name: "y", type: Int),
      }
    ),
    "cell_show": (
      args: {
        0: (name: "x", type: Int),
        1: (name: "y", type: Int),
        2: (name: "see", type: Int),
      }
    ),
    "cell_draw": (
      args: {}
    ),
    "cell_itemlist": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "cell_itemoncell": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "fov_los": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
        3: (name: "arg4", type: Int),
      }
    ),
    "get_route": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
        3: (name: "arg4", type: Int),
      }
    ),
    "display_customkey": (
      args: {
        0: (name: "arg1", type: Str),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
        3: (name: "arg3", type: Int),
      }
    ),
    "display_key": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
      }
    ),
    "cursor_check": (
      args: {}
    ),
    "lenfix": (
      args: {
        0: (name: "arg1", type: Var),
        1: (name: "arg2", type: Int),
      }
    ),
    "showscroll": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
        3: (name: "arg4", type: Int),
      }
    ),
    "window": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
        3: (name: "arg4", type: Int),
        4: (name: "arg4", type: Int),
        5: (name: "arg5", type: Int),
      }
    ),
    "window2": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
        3: (name: "arg4", type: Int),
        4: (name: "arg5", type: Int),
        5: (name: "arg6", type: Int),
      }
    ),
    "display_window2": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
        3: (name: "arg4", type: Int),
        4: (name: "arg5", type: Int),
        5: (name: "arg6", type: Int),
      }
    ),
    "display_window": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
        3: (name: "arg4", type: Int),
        4: (name: "arg5", type: Int),
        5: (name: "arg6", type: Int),
      }
    ),
    "display_note": (
      args: {
        0: (name: "arg1", type: Str),
        1: (name: "arg2", type: Int),
      }
    ),
    "display_topic": (
      args: {
        0: (name: "arg1", type: Str),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
        3: (name: "arg3", type: Int),
      }
    ),
    "display_msg": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "id_crlf": (
      args: {
        0: (name: "arg1", type: Var),
      }
    ),
    "conv_crlf": (
      args: {
        0: (name: "arg1", type: Var),
        1: (name: "arg2", type: Int),
      }
    ),
    "rm_crlf": (
      args: {
        0: (name: "arg1", type: Var),
      }
    ),
    "role": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
      }
    ),
    "rolemax": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
      }
    ),
    "page_save": (
      args: {}
    ),
    "page_load": (
      args: {}
    ),
    "fileadd": (
      args: {
        0: (name: "arg1", type: Str),
        1: (name: "arg2", type: Int),
      }
    ),
    "arrayfile": (
      args: {}
    ),
    "validatetmp": (
      args: {
        0: (name: "arg1", type: Str),
        1: (name: "arg2", type: Int),
      }
    ),
    "zopenwrapper": (
      args: {
        0: (name: "arg1", type: Var),
        1: (name: "arg2", type: Str),
        2: (name: "arg3", type: Int),
        3: (name: "arg4", type: Int),
      }
    ),
    "existwrapper": (
      args: {
        0: (name: "arg1", type: Str),
      }
    ),
    "deletewrapper": (
      args: {
        0: (name: "arg1", type: Str),
      }
    ),
    "arrayfilewrapper": (
      args: {}
    ),
    "dirlistwrapper": (
      args: {
        0: (name: "arg1", type: Var),
        1: (name: "arg2", type: Str),
      }
    ),
    "fmode13replacer": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "del_str": (
      args: {
        0: (name: "arg1", type: Str),
        1: (name: "arg2", type: Str),
      }
    ),
    "cnv_str": (
      args: {
        0: (name: "arg1", type: Var),
        1: (name: "arg2", type: Str),
        2: (name: "arg3", type: Str),
      }
    ),
    "fix_wish": (
      args: {
        0: (name: "arg1", type: Var),
      }
    ),
    "fix_input_chat": (
      args: {
        0: (name: "arg1", type: Var),
      }
    ),
    "fix_input_chat2": (
      args: {
        0: (name: "arg1", type: Var),
      }
    ),
    "cnv_filestr": (
      args: {
        0: (name: "arg1", type: Var),
      }
    ),
    "imeset": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "imeget": (
      args: {}
    ),
    "_fdialog": (
      args: {
        0: (name: "arg1", type: Array),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Array),
        3: (name: "arg4", type: Str),
        4: (name: "arg5", type: Str),
      }
    ),
    "gmes": (
      args: {
        0: (name: "arg1", type: Str),
      }
    ),
    "boxl": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
        3: (name: "arg4", type: Int),
      }
    ),
    "topicbox": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
        3: (name: "arg4", type: Int),
      }
    ),
    "fixtxt": (
      args: {
        0: (name: "arg1", type: Str),
        1: (name: "arg2", type: Int),
      }
    ),
    "windowanime": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
        3: (name: "arg4", type: Int),
        4: (name: "arg5", type: Int),
        5: (name: "arg6", type: Int),
      }
    ),
    "windowanimecorner": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
        3: (name: "arg4", type: Int),
        4: (name: "arg5", type: Int),
        5: (name: "arg6", type: Int),
      }
    ),
    "showtitle": (
      args: {
        0: (name: "arg0", type: Str),
        1: (name: "arg1", type: Str),
        2: (name: "arg2", type: Int),
        3: (name: "arg3", type: Int),
      }
    ),
    "drawmenu": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "fillbg": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
        3: (name: "arg4", type: Int),
        4: (name: "arg5", type: Int),
      }
    ),
    "direction": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
        3: (name: "arg4", type: Int),
      }
    ),
    "prodcheck": (
      args: {}
    ),
    "calcweaponfix": (
      args: {
        0: (name: "itemid", type: Int, indices: [ ( substitute: Group("item_id")) ]),
      }
    ),
    "fixaiact": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "eleinfo": (
      args: {
        0: (name: "skillid", type: Int, indices: [ ( substitute: Group("skill_id")) ]),
        1: (name: "mode", type: Int),
      }
    ),
    "characreate": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("characreate_loc")) ]),
        1: (name: "dbid", type: Int, indices: [ ( substitute: Group("chara_id" )) ]),
        2: (name: "x", type: Int),
        3: (name: "y", type: Int),
      }
    ),
    "relationbetween": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg1", type: Int),
      }
    ),
    "calcage": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "rowactend": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "customtalk": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
        1: (name: "dbmode", type: Int, indices: [ ( substitute: Group("dbmode_flavor")) ]),
      }
    ),
    "findchara": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara_id")) ]),
      }
    ),
    "findcharaaz": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara_id")) ]),
      }
    ),
    "findcharala": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara_id")) ]),
      }
    ),
    "findallyguard": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara_id")) ]),
      }
    ),
    "findally": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara_id")) ]),
      }
    ),
    "implevel": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "modimp": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
        1: (name: "arg2", type: Int),
      }
    ),
    "implevel2": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "modimp2": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
        1: (name: "arg2", type: Int),
      }
    ),
    "put_questtarget": (
      args: {}
    ),
    "exist_questtarget": (
      args: {}
    ),
    "check_quest": (
      args: {}
    ),
    "refreshspeed": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "tag_begin": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "tag_end": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "ride_begin": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "ride_end": (
      args: {}
    ),
    "chara_vanquish": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
      }
    ),
    "turn_aggro": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
      }
    ),
    "make_sound": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
        3: (name: "arg4", type: Int),
        4: (name: "arg5", type: Int),
        5: (name: "arg6", type: Int),
      }
    ),
    "get_freechara": (
      args: {}
    ),
    "get_freeally": (
      args: {}
    ),
    "get_freeallyne": (
      args: {}
    ),
    "del_chara": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "relocate_chara": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
      }
    ),
    "hostileaction": (
      args: {
        0: (name: "target", type: Int, indices: [ ( substitute: Group("chara") )]),
        1: (name: "source", type: Int, indices: [ ( substitute: Group("chara") )]),
      }
    ),
    "rowact_check": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
      }
    ),
    "rowact_item": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "wake_up": (
      args: {}
    ),
    "incognitobegin": (
      args: {}
    ),
    "incognitoend": (
      args: {}
    ),
    "cell_setchara": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
      }
    ),
    "cell_removechara": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "cell_findspace": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
      }
    ),
    "findbuff": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
        1: (name: "buffid", type: Int, indices: [ ( substitute: Group("buff_id")) ]),
      }
    ),
    "addbuff": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
        1: (name: "buffid", type: Int, indices: [ ( substitute: Group("buff_id")) ]),
        2: (name: "arg3", type: Int),
        3: (name: "arg4", type: Int),
      }
    ),
    "delbuff": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
        1: (name: "buffid", type: Int, indices: [ ( substitute: Group("buff_id")) ]),
      }
    ),
    "animeload": (
      args: {
        0: (name: "animid", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "animeblood": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
      }
    ),
    "resistmod": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
        1: (name: "ele", type: Int, indices: [ ( substitute: Group("skill_resist")) ]),
        2: (name: "arg3", type: Int),
      }
    ),
    "resistmodh": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
        1: (name: "ele", type: Int, indices: [ ( substitute: Group("skill_resist")) ]),
        2: (name: "arg3", type: Int),
      }
    ),
    "modcorrupt": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "wet": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "fuel": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "dmgcon": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
        1: (name: "cond", type: Int, indices: [ ( substitute: Group("condition")) ]),
        2: (name: "power", type: Int),
      }
    ),
    "healhp": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
        1: (name: "amount", type: Int),
      }
    ),
    "healmp": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
        1: (name: "amount", type: Int),
      }
    ),
    "healsp": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
        1: (name: "amount", type: Int),
      }
    ),
    "healcon": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
        1: (name: "cond", type: Int, indices: [ ( substitute: Group("condition")) ]),
        2: (name: "arg3", type: Int),
      }
    ),
    "spillblood": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
      }
    ),
    "spillfrag": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
      }
    ),
    "check_talk": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "check_kill": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "item_acid": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "item_fire": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "mapitem_fire": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "item_cold": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "mapitem_cold": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "copy_chara": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "txteledmg": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
        3: (name: "ele", type: Int),
      }
    ),
    "dmghp": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
        1: (name: "amount", type: Int),
        2: (name: "source", type: Int, indices: [ ( substitute: Group("damage_source")) ]),
        3: (name: "element", type: Int, indices: [ ( substitute: Group("skill_id")) ]),
        4: (name: "element_power", type: Int),
      }
    ),
    "dmgmp": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
        1: (name: "arg2", type: Int),
      }
    ),
    "dmgsp": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
        1: (name: "arg2", type: Int),
      }
    ),
    "dmgspt": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
        1: (name: "amount", type: Int),
      }
    ),
    "dmgsptalk": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
        1: (name: "amount", type: Int),
      }
    ),
    "healsan": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
        1: (name: "arg2", type: Int),
      }
    ),
    "dmgsan": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
        1: (name: "arg2", type: Int),
      }
    ),
    "actionsp": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
        1: (name: "arg2", type: Int),
      }
    ),
    "advfavoriteskill": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "advfavoritestat": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "modweight": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
      }
    ),
    "modheight": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
        1: (name: "arg2", type: Int),
      }
    ),
    "cure_anorexia": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
      }
    ),
    "chara_vomit": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
      }
    ),
    "chara_morasi": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "eatstatus": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "chara_anorexia": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "sickifcursed": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
      }
    ),
    "net_send": (
      args: {
        0: (name: "arg1", type: Str),
        1: (name: "arg2", type: Int),
      }
    ),
    "net_read": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "net_dllist": (
      args: {
        0: (name: "arg1", type: Str),
        1: (name: "arg2", type: Int),
      }
    ),
    "net_dl": (
      args: {
        0: (name: "arg1", type: Str),
        1: (name: "arg2", type: Str),
      }
    ),
    "carmor": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "cnveqweight": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "calcexpalive": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "calcattackhit": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "calcattackdmg": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "cnvbonus": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "calcmedalvalue": (
      args: {
        0: (name: "itemid", type: Int, indices: [ ( substitute: Group("item")) ]),
      }
    ),
    "calcmusicticketvalue": (
      args: {
        0: (name: "itemid", type: Int, indices: [ ( substitute: Group("item")) ]),
      }
    ),
    "calcitemvalue": (
      args: {
        0: (name: "itemid", type: Int, indices: [ ( substitute: Group("item")) ]),
        1: (name: "mode", type: Int),
      }
    ),
    "calcinvestvalue": (
      args: {
        0: (name: "arg0", type: Int),
      }
    ),
    "calcinvestvalue50": (
      args: {
        0: (name: "arg0", type: Int),
      }
    ),
    "calcguiltvalue": (
      args: {
        0: (name: "arg0", type: Int),
      }
    ),
    "calchireadv": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "calchirecost": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
      }
    ),
    "generatemoney": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
      }
    ),
    "calccosthire": (
      args: {}
    ),
    "calccostbuilding": (
      args: {}
    ),
    "calccosttax": (
      args: {}
    ),
    "calcmealvalue": (
      args: {}
    ),
    "calccostreload": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "calccargoupdate": (
      args: {}
    ),
    "calccargoupdatecost": (
      args: {}
    ),
    "calcidentifyvalue": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "calctraincost": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
      }
    ),
    "calclearncost": (
      args: {
        0: (name: "arg0", type: Int),
        1: (name: "arg1", type: Int),
        2: (name: "arg1", type: Int),
      }
    ),
    "calcresurrectvalue": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "calcslavevalue": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "calcidtlv": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "calcrestorecost": (
      args: {}
    ),
    "calcrestorecostc": (
      args: {}
    ),
    "calcinitgold": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "calcspellpower": (
      args: {
        0: (name: "skillid", type: Int, indices: [ ( substitute: Group("skill_id")) ]),
        1: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
      }
    ),
    "calcspellfail": (
      args: {
        0: (name: "skillid", type: Int, indices: [ ( substitute: Group("skill_id")) ]),
        1: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
      }
    ),
    "calcspellcostmp": (
      args: {
        0: (name: "skillid", type: Int, indices: [ ( substitute: Group("skill_id")) ]),
        1: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
      }
    ),
    "calcspellcoststock": (
      args: {
        0: (name: "skillid", type: Int, indices: [ ( substitute: Group("skill_id")) ]),
        1: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
      }
    ),
    "skillinit": (
      args: {
        0: (name: "skillid", type: Int, indices: [ ( substitute: Group("skill_id")) ]),
        1: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
        2: (name: "arg3", type: Int),
      }
    ),
    "calcscore": (
      args: {}
    ),
    "calcpartyscore": (
      args: {}
    ),
    "calcpartyscore2": (
      args: {}
    ),
    "eqweaponlight": (
      args: {}
    ),
    "eqweaponheavy": (
      args: {}
    ),
    "eqrandweaponmage": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "convertartifact": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "lovemiracle": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "lovemiracle2": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "map_converttile": (
      args: {}
    ),
    "map_tileset": (
      args: {
        0: (name: "arg1", type: Int, indices: [ ( substitute: Group("map_tileset")) ]),
      }
    ),
    "map_initcustom": (
      args: {
        0: (name: "mapname", type: Str),
      }
    ),
    "map_reload": (
      args: {
        0: (name: "arg1", type: Str),
      }
    ),
    "map_initialize": (
      args: {}
    ),
    "map_placecharaonentrance": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
      }
    ),
    "map_placearena": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "map_placeplayer": (
      args: {}
    ),
    "map_randomtile": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "map_line": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
        3: (name: "arg4", type: Int),
      }
    ),
    "map_makesimpleroom": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
        3: (name: "arg4", type: Int),
        4: (name: "arg5", type: Int),
        5: (name: "arg6", type: Int),
      }
    ),
    "map_digcheck": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "map_nextdir1": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "map_nextdir2": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "map_ovservemap": (
      args: {}
    ),
    "map_digtoentrance1": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
        3: (name: "arg4", type: Int),
        4: (name: "arg5", type: Int),
      }
    ),
    "map_makeroom": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "map_setfog": (
      args: {
        0: (name: "arg0", type: Int),
        1: (name: "arg1", type: Int),
      }
    ),
    "map_createroomdoor": (
      args: {}
    ),
    "map_createroom": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "map_placeupstairs": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "map_placedownstairs": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "map_randsite": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "map_fever": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "map_trap": (
      args: {
        0: (name: "x", type: Int),
        1: (name: "y", type: Int),
        2: (name: "arg3", type: Int),
        3: (name: "level", type: Int),
      }
    ),
    "map_web": (
      args: {
        0: (name: "x", type: Int),
        1: (name: "y", type: Int),
        2: (name: "difficulty", type: Int),
      }
    ),
    "map_barrel": (
      args: {
        0: (name: "x", type: Int),
        1: (name: "y", type: Int),
      }
    ),
    "map_connectroom": (
      args: {}
    ),
    "map_makedoor": (
      args: {}
    ),
    "selectcoast": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "dimmix": (
      args: {
        0: (name: "arg1", type: Array),
      }
    ),
    "GetTabbedParameter": (
      args: {
        0: (name: "FilePath", type: Str),
        1: (name: "SearchString", type: Str),
      }
    ),
    "RemoveTabs": (
      args: {
        0: (name: "RTInput", type: Str),
      }
    ),
    "RemoveLineBreaks": (
      args: {
        0: (name: "RLBInput", type: Str),
      }
    ),
    "AddLineBreaks": (
      args: {
        0: (name: "ALBInput", type: Str),
      }
    ),
    "AddTabs": (
      args: {
        0: (name: "ATInput", type: Str),
      }
    ),
    "ParseString": (
      args: {
        0: (name: "InputString", type: Str),
      }
    ),
    "equipinfo2": (
      args: {
        0: (name: "eq2_itempos", type: Int),
        1: (name: "eq2_posx", type: Int),
        2: (name: "eq2_posy", type: Int),
        3: (name: "eq2_setnum", type: Int),
      }
    ),
    "cbreeder": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
      }
    ),
    "cdbit": (
      args: {
        0: (name: "bit", type: Int),
        1: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
      }
    ),
    "cdbitmod": (
      args: {
        0: (name: "bit", type: Int),
        1: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
        2: (name: "seton", type: Int),
      }
    ),
    "cpflip": (
      args: {}
    ),
    "cpisplayer": (
      args: {}
    ),
    "cpisme": (
      args: {}
    ),
    "cpisenemy": (
      args: {}
    ),
    "cnvrare": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "card_ref": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "dbghit": (
      args: {}
    ),
    "makecardlist": (
      args: {}
    ),
    "cardhelp": (
      args: {
        0: (name: "arg1", type: Str),
        1: (name: "arg2", type: Int),
      }
    ),
    "tcgdrawcard": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "tcgdraw": (
      args: {}
    ),
    "efllistadd": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
        3: (name: "arg4", type: Int),
        4: (name: "arg5", type: Int),
        5: (name: "arg6", type: Int),
      }
    ),
    "create_card": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "cardpos": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "gravecard": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "dmgcard": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "dmgplayer": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "delbottomcard": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "gameover": (
      args: {}
    ),
    "getholdersum": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "getspotsum": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "getdecksum": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "cardcandeclareattack": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "cardcanblock": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "cardcanuseskill": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "getrandomcard": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "saccard": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "opencard": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "activatecard": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg1", type: Int),
      }
    ),
    "actionchain": (
      args: {}
    ),
    "actionproc": (
      args: {}
    ),
    "putcard": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "tcgdrawbg": (
      args: {}
    ),
    "tcginit": (
      args: {}
    ),
    "calcstartcard": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "calcstartattb": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "calcdomain": (
      args: {}
    ),
    "calcdecksize": (
      args: {}
    ),
    "decktest": (
      args: {}
    ),
    "tcgdeck": (
      args: {}
    ),
    "tcgmain": (
      args: {}
    ),
    "csfix": (
      args: {}
    ),
    "cslineup": (
      args: {}
    ),
    "cslinedown": (
      args: {}
    ),
    "validaction": (
      args: {}
    ),
    "random_material": (
      args: {
        0: (name: "matlv", type: Int),
        1: (name: "matrare", type: Int),
      }
    ),
    "matgetmain": (
      args: {
        0: (name: "matid", type: Int, indices: [ ( substitute: Group("material_id")) ]),
        1: (name: "amount", type: Int),
        2: (name: "message_type", type: Int, indices: [ ( substitute: Group("matget_type")) ]),
      }
    ),
    "matdelmain": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "atxinit": (
      args: {}
    ),
    "begintempinv": (
      args: {}
    ),
    "exittempinv": (
      args: {}
    ),
    "modpiety": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "calcincome": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "rpmatname": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "blendcheckext": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "rpsuccessrate": (
      args: {
        0: (name: "rate", type: Int),
      }
    ),
    "rpdiff": (
      args: {
        0: (name: "arg0", type: Int),
        1: (name: "arg1", type: Int),
        2: (name: "arg2", type: Int),
      }
    ),
    "blendcheckmat": (
      args: {
        0: (name: "arg1", type: Int),
      }
    ),
    "blendmatnum": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "blendlist": (
      args: {
        0: (name: "arg1", type: Array),
        1: (name: "arg2", type: Int),
      }
    ),
    "window_recipe2": (
      args: {}
    ),
    "window_recipe": (
      args: {
        0: (name: "arg0", type: Array),
        1: (name: "itemid", type: Int, indices: [ ( substitute: Group("item")) ]),
        2: (name: "arg2", type: Int),
        3: (name: "arg3", type: Int),
        4: (name: "arg4", type: Int),
        5: (name: "arg5", type: Int),
      }
    ),
    "clear_rprefmat": (
      args: {}
    ),
    "txtitemoncell": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "txttargetnpc": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
      }
    ),
    "key_direction": (
      args: {}
    ),
    "savecycle": (
      args: {}
    ),
    "trimdesc": (
      args: {
        0: (name: "arg1", type: Str),
        1: (name: "arg2", type: Int),
      }
    ),
    "zipadd": (
      args: {
        0: (name: "arg1", type: Str),
      }
    ),
    "zipinit2": (
      args: {
        0: (name: "arg1", type: Str),
        1: (name: "arg2", type: Str),
      }
    ),
    "zipadd2": (
      args: {
        0: (name: "arg1", type: Str),
      }
    ),
    "zipend2": (
      args: {}
    ),
    "unzip2": (
      args: {
        0: (name: "arg1", type: Str),
        1: (name: "arg2", type: Str),
      }
    ),
    "getnpctxt": (
      args: {
        0: (name: "arg1", type: Str),
        1: (name: "arg2", type: Str),
      }
    ),
    "cnvvar": (
      args: {
        0: (name: "arg1", type: Var),
        1: (name: "arg2", type: Str),
      }
    ),
    "efstatusfix": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
        2: (name: "arg3", type: Int),
        3: (name: "arg4", type: Int),
      }
    ),
    "calcmagiccontrol": (
      args: {
        0: (name: "arg1", type: Int),
        1: (name: "arg2", type: Int),
      }
    ),
    "dipcursed": (
      args: {
        0: (name: "item", type: Int),
        1: (name: "arg1", type: Int),
      }
    ),
    "clientguide": (
      args: {
        0: (name: "arg0", type: Int),
      }
    ),
    "tradecheck": (
      args: {
        0: (name: "charid", type: Int, indices: [ ( substitute: Group("chara")) ]),
      }
    ),
    "randname": (
      args: {
        0: (name: "arg0", type: Int),
      }
    ),
    "randnameinit": (
      args: {}
    ),
    "ai_check": (
      args: {}
    ),
    "cnvjkey": (
      args: {
        0: (name: "arg1", type: Str),
      }
    ),

    // Vanilla

    "dist_town": (
      args: {}
    ),
    "addbuilding": (
      args: {
        0: (name: "arg1"),
        1: (name: "arg2"),
        2: (name: "arg3"),
        3: (name: "arg3"),
      }
    ),
    "showeconomy": (
      args: {
        0: (name: "arg1"),
        1: (name: "arg2"),
      }
    )
  },

  labels: {
    "*rank_init": (
      rules: [
        (
          kind: Function,
          match: "sdim rankn,"
        )
      ]
    ),
    "*politics_init": (
      rules: [
        (
          kind: Function,
          match: "sdim popostname,"
        )
      ]
    ),
    "*building_init": (
      rules: [
        (
          kind: Function,
          match: "dim bddata,"
        )
      ]
    ),
    "*bRefDefine": (
      rules: [
        (
          kind: Function,
          match: "dim bdataref,"
        )
      ]
    ),
    "*sRefDefine": (
      rules: [
        (
          kind: Function,
          match: "dim sdataref,"
        )
      ]
    ),
    "*trait_init": (
      rules: [
        (
          kind: Function,
          match: "dim traitref, 10"
        )
      ]
    ),
    "*trait_ref": (
      rules: [
        (
          kind: If,
          match: "if ( tid == TRAIT_NORMAL_STAT_STAMINA ) {"
        )
      ]
    ),
    "*cm_putTrait": (
      rules: [
        (
          kind: If,
          match: "if ( cdatan(CDATAN_RACE, CHARA_PLAYER) == \"dwarf\" ) {"
        )
      ]
    ),
    "*sound_init": (
      rules: [
        (
          kind: Function,
          match: "sndload folder + \"pop1.wav\", SOUNDLIST_POP1"
        )
      ]
    ),
    "*music_init": (
      rules: [
        (
          kind: Assignment,
          match: "s = exedir + \"user\\\\music\\\\musiclist.txt\""
        )
      ]
    ),
    "*music_play": (
      rules: [
        (
          kind: Assignment,
          match: "env = SOUNDLIST_BG_RAIN"
        )
      ]
    ),
    "*map_randNameInit": (
      rules: [
        (
          kind: StringLiteral,
          match: "はじまりの"
        )
      ]
    ),
    "*item_foodInit": (
      rules: [
        (
          kind: Function,
          match: "dim picfood, 10, "
        )
      ]
    ),
    "*convert_word": (
      rules: [
        (
          kind: Assignment,
          match: "s = lang(\"\" + gdata(GDATA_GUEST), \"\" + gdata(GDATA_GUEST) + \" guest\" + _s2(gdata(GDATA_GUEST)))"
        )
      ]
    ),
    "*convert_talk": (
      rules: [
        (
          kind: Assignment,
          match: "p = rnd(noteinfo(0))"
        )
      ]
    ),
    "*spec_talk": (
      after: "*convert_talk"
    ),
    "*random_talk": (
      rules: [
        (
          kind: Assignment,
          match: "p = instr(buff, 0, \"%BORED,\" + lang(\"JP\", \"EN\"))"
        )
      ]
    ),
    "*quest_info": (
      rules: [
        (
          kind: StringLiteral,
          match: "ヴェルニースの南にあるネフィアの迷宮群のひとつ《レシマス》で、何かが見つかるかもしれない。"
        )
      ]
    ),
    "*quest_info2": (
      rules: [
        (
          kind: StringLiteral,
          match: "ぬいぐるみを守れ！ Lv6相当"
        )
      ]
    ),
    "*quest_item": (
      rules: [
        (
          kind: StringLiteral,
          match: "[古びたお守り]"
        )
      ]
    ),
    "*talk_quest_load": (
      rules: [
        (
          kind: Assignment,
          match: "buff2 = \"no txt\""
        )
      ]
    ),
    "*talk_quest": (
      rules: [
        (
          kind: Assignment,
          match: "s = \"%HARVEST\""
        )
      ]
    ),
    "*talktxt_conv": (
      rules: [
        (
          kind: If,
          match: "if ( s == \"client\" ) {"
        )
      ]
    ),
    "*system_init": (
      rules: [
        (
          kind: Function,
          match: "exist exedir + \"config.txt\""
        )
      ]
    ),
    "*exit_game": (
      rules: [
        (
          kind: Function,
          match: "CloseHandle mutex_handle"
        )
      ]
    ),
    "*exit_game_error": (
      rules: [
        (
          kind: StringLiteral,
          match: "HspError "
        )
      ]
    ),
    "*pcc_wear": (
      rules: [
        (
          kind: Assignment,
          match: "locvar_create_pcpic_p = 1"
        )
      ]
    ),
    "*cloud_init": (
      rules: [
        (
          kind: Assignment,
          match: "cloud(CLOUD_PX, cnt) = 288, 1040, 208, 160"
        )
      ]
    ),
    "*mapchip_init": (
      rules: [
        (
          kind: Assignment,
          match: "chipm(CHIPM_F, xy2pic(2, 7)) = 0, 0"
        )
      ]
    ),
    "*chip_init": (
      rules: [
        (
          kind: Function,
          match: "dim cloud, 6, "
        )
      ]
    ),
    "*random_titleInit": (
      rules: [
        (
          kind: Function,
          match: "noteload lang(\"data\\\\ndata.csv\", \"data\\\\ndata-e.csv\")"
        )
      ]
    ),
    "*randomName_WHILE1": (
      rules: [
        (
          kind: Assignment,
          match: "locvar_randomname_s = rn1(rnd(length(rn1)))"
        )
      ]
    ),
    "*randomName_WHILE1_CONTINUE": (
      after: "*randomName_WHILE1",
      loop_kind: WhileContinue
    ),
    "*randomName_BREAK": (
      after: "*randomName_WHILE1_CONTINUE",
      loop_kind: Break
    ),
    "*random_title_loop": (
      rules: [
        (
          kind: Assignment,
          match: "locvar_csvsort_p(2) = rnd(length2(rnlist))"
        )
      ]
    ),
    "*end_name": (
      rules: [
        (
          kind: StringLiteral,
          match: "The army of "
        )
      ]
    ),
    "*time_warn_talk": (
      rules: [
        (
          kind: If,
          match: "if ( hour_played == 1 ) {"
        )
      ]
    ),
    "*item_encInit": (
      rules: [
        (
          kind: Function,
          match: "dim encref, 8"
        )
      ]
    ),
    "*item_encdetail": (
      rules: [
        (
          kind: StringLiteral,
          match: "ランダムなテレポートを引き起こす"
        )
      ]
    ),
    "*item_egoInit": (
      rules: [
        (
          kind: Function,
          match: "sdim egoname"
        )
      ]
    ),
    "*item_egoMinor": (
      rules: [
        (
          kind: Function,
          match: "encadd ci, randomenc(randomenclv(egolv)), randomencp(), 8"
        )
      ]
    ),
    "*item_ego": (
      rules: [
        (
          kind: If,
          match: "if ( egoref(1, cnt) != 0 ) {"
        )
      ]
    ),
    "*item_enc": (
      rules: [
        (
          kind: Function,
          match: "encadd ci, ENCHANT_ATTRIBUTE * EXT_ENCHANTMENT + SKILL_ATTR_MAG, randomencp()"
        )
      ]
    ),
    "*item_materialInit": (
      rules: [
        (
          kind: Function,
          match: "sdim mtname, 18, 2,"
        )
      ]
    ),
    "*item_material": (
      after: "*item_materialInit"
    ),
    "*choose_material": (
      rules: [
        (
          kind: Assignment,
          match: "mtlv = rnd(objlv + 1) / 10 + 1"
        )
      ]
    ),
    "*remake_material": (
      rules: [
        (
          kind: Assignment,
          match: "dbmode = DBMODE_SET_STATS"
        )
      ]
    ),
    "*apply_material": (
      rules: [
        (
          kind: Assignment,
          match: "p(1) = 150, 80"
        )
      ]
    ),
    "*apply_materialEnc": (
      rules: [
        (
          kind: Function,
          match: "encadd ci, mtenc(cnt * 2, p), mtenc(cnt * 2 + 1, p), 0, 1"
        )
      ]
    ),
    "*fish_init": (
      rules: [
        (
          kind: Function,
          match: "dim fishdata, 10, 100"
        )
      ]
    ),
    "*itemNameSub": (
      rules: [
        (
          kind: StringLiteral,
          match: "解読済みの"
        )
      ]
    ),
    "*skipName": (
      rules: [
        (
          kind: StringLiteral,
          match: "(媚薬混入)"
        )
      ]
    ),
    "*skip_stack": (
      rules: [
        (
          kind: StringLiteral,
          match: "をまとめた(計"
        )
      ]
    ),
    "*skipitemDraw": (
      rules: [
        (
          kind: If,
          match: "if ( locvar_cell_draw_p == 528 ) {"
        )
      ]
    ),
    "*fov_los_WHILE1": (
      rules: [
        (
          kind: If,
          match: "if ( locvar_fov_los_ty < fov_los_arg4 == 0 ) {"
        ),
        (
          kind: If,
          match: "if ( map(fov_los_arg1, locvar_fov_los_ty, MAP_MEF_INDEX_PLUS_ONE) != 0 ) {"
        ),
        (
          kind: If,
          match: "if ( mef(MEF_TYPE, map(fov_los_arg1, locvar_fov_los_ty, MAP_MEF_INDEX_PLUS_ONE) - 1) == MEF_TYPE_KEMURIDAMA ) {"
        )
      ],
      loop_kind: While
    ),
    "*fov_los_WEND1": (
      after: "*fov_los_WHILE1",
      loop_kind: WhileEnd
    ),
    "*fov_los_WHILE2": (
      after: "*fov_los_WEND1",
      loop_kind: While,
    ),
    "*fov_los_WEND2": (
      after: "*fov_los_WHILE2",
      loop_kind: WhileEnd
    ),
    "*fov_los_WHILE3": (
      after: "*fov_los_WEND2",
      loop_kind: While,
    ),
    "*fov_los_WEND3": (
      after: "*fov_los_WHILE3",
      loop_kind: WhileEnd,
    ),
    "*fov_los_WHILE4": (
      after: "*fov_los_WEND3",
      loop_kind: While,
    ),
    "*fov_los_WEND4": (
      after: "*fov_los_WHILE4",
      loop_kind: WhileEnd,
    ),
    "*fov_los_WHILE5": (
      after: "*fov_los_WEND4",
      loop_kind: While,
    ),
    "*fov_los_WEND5": (
      after: "*fov_los_WHILE5",
      loop_kind: WhileEnd,
    ),
    "*fov_los_WHILE6": (
      after: "*fov_los_WEND5",
      loop_kind: While,
    ),
    "*fov_los_WEND6": (
      after: "*fov_los_WHILE6",
      loop_kind: WhileEnd,
    ),
    "*fov_los_WHILE7": (
      after: "*fov_los_WEND6",
      loop_kind: While,
    ),
    "*fov_los_WEND7": (
      after: "*fov_los_WHILE7",
      loop_kind: WhileEnd,
    ),
    "*fov_los_WHILE8": (
      after: "*fov_los_WEND7",
      loop_kind: While,
    ),
    "*fov_los_WEND8": (
      after: "*fov_los_WHILE8",
      loop_kind: WhileEnd,
    ),
    "*fov_los_WHILE9": (
      after: "*fov_los_WEND8",
      loop_kind: While,
    ),
    "*fov_los_WEND9": (
      after: "*fov_los_WHILE9",
      loop_kind: WhileEnd,
    ),
    "*fov_los_WHILE10": (
      after: "*fov_los_WEND9",
      loop_kind: While,
    ),
    "*fov_los_WEND10": (
      after: "*fov_los_WHILE10",
      loop_kind: WhileEnd,
    ),
    "*get_route_WHILE1": (
      rules: [
        (
          kind: If,
          match: "if ( locvar_fov_los_ty < get_route_arg4 == 0 ) {"
        )
      ],
      loop_kind: While
    ),
    "*get_route_WEND1": (
      after: "*get_route_WHILE1",
      loop_kind: WhileEnd
    ),
    "*get_route_WHILE2": (
      after: "*get_route_WEND1",
      loop_kind: While
    ),
    "*get_route_WEND2": (
      after: "*get_route_WHILE2",
      loop_kind: WhileEnd
    ),
    "*get_route_WHILE3": (
      after: "*get_route_WEND2",
      loop_kind: While
    ),
    "*get_route_WEND3": (
      after: "*get_route_WHILE3",
      loop_kind: WhileEnd
    ),
    "*get_route_WHILE4": (
      after: "*get_route_WEND3",
      loop_kind: While
    ),
    "*get_route_WEND4": (
      after: "*get_route_WHILE4",
      loop_kind: WhileEnd
    ),
    "*get_route_WHILE5": (
      after: "*get_route_WEND4",
      loop_kind: While
    ),
    "*get_route_WEND5": (
      after: "*get_route_WHILE5",
      loop_kind: WhileEnd
    ),
    "*get_route_WHILE6": (
      after: "*get_route_WEND5",
      loop_kind: While
    ),
    "*get_route_WEND6": (
      after: "*get_route_WHILE6",
      loop_kind: WhileEnd
    ),
    "*conv_crlf_@": (
      rules: [
        (
          kind: Function,
          match: "getstr locvar_conv_crlf_tmpstr, conv_crlf_arg1, locvar_conv_crlf_i"
        )
      ]
    ),
    "*mRefDefine": (
      rules: [
        (
          kind: Function,
          match: "dim matval, 4"
        )
      ]
    ),
    "*db_item": (
      rules: [
        (
          kind: If,
          match: "if ( dbmode != DBMODE_FIND )"
        ),
        (
          kind: Assignment,
          match: "dbmax = 0"
        ),
        (
          kind: Assignment,
          match: "dbsum = 0"
        ),
      ]
    ),
    "*db_setFilterItem": (
      rules: [
        (
          kind: Assignment,
          match: "filter_item(ITEM_ID_HAND_AXE) = \"\""
        )
      ]
    ),
    "*db_setItem": (
      rules: [
        (
          kind: Assignment,
          match: "ipicref(ITEM_ID_LARGE_BOOKSHELF) = xy2pic(13, 16)"
        )
      ]
    ),
    "*recipe_ref": (
      rules: [
        (
          kind: Assignment,
          match: "matneed = -1, -1, -1, -1, -1, -1, -1, -1, -1, -1"
        )
      ]
    ),
    "*conCalc": (
      rules: [
        (
          kind: Assignment,
          match: "locvar_dmgcon_r = sdata(locvar_dmgcon_res, dmgcon_charid) / 50"
        )
      ]
    ),
    "*skipDmgTxt": (
      rules: [
        (
          kind: StringLiteral,
          match: "死の宣告は無効になった。"
        )
      ]
    ),
    "*exit_death": (
      rules: [
        (
          kind: If,
          match: "if ( cfg_dhyouji == 2 ) {"
        )
      ]
    ),
    "*net_read_WHILE1": (
      rules: [
        (
          kind: Function,
          match: "txt \"[Chat Skipped]\""
        )
      ],
      loop_kind: While
    ),
    "*net_read_WEND1": (
      after: "*net_read_WHILE1",
      loop_kind: WhileEnd
    ),
    "*net_init": (
      rules: [
        (
          kind: Function,
          match: "sdim cgiurl2"
        )
      ]
    ),
    "*net_chat": (
      rules: [
        (
          kind: StringLiteral,
          match: "もう少し待った方がいい気がする。"
        )
      ]
    ),
    "*com_vote_new": (
      rules: [
        (
          kind: StringLiteral,
          match: "現在、処刑投票は行われていない。"
        )
      ]
    ),
    "*com_vote_new_loop": (
      after: "*com_vote_new",
      loop_kind: While

    ),
    "*com_vote_new_loop_WHILE1": (
      after: "*com_vote_new_loop",
      loop_kind: WhileContinue
    ),
    "*com_vote_new_loop_WEND1": (
      after: "*com_vote_new_loop_WHILE1",
      loop_kind: WhileEnd
    ),
    "*com_vote": (
      rules: [
        (
          kind: StringLiteral,
          match: "あなたの異名を登録する"
        )
      ]
    ),
    "*com_vote_loop": (
      after: "*com_vote"
    ),
    "*com_vote_loop_WHILE1": (
      after: "*com_vote_loop",
      loop_kind: While
    ),
    "*com_vote_loop_WEND1": (
      after: "*com_vote_loop_WHILE1",
      loop_kind: WhileEnd
    ),
    "*uploader": (
      rules: [
        (
          kind: Function,
          match: "picload exedir + \"graphic\\\\uploader.bmp\""
        )
      ]
    ),
    "*uploader_load": (
      after: "*uploader"
    ),
    "*uploader_main": (
      after: "*uploader_load"
    ),
    "*uploader_event": (
      after: "*uploader_main"
    ),
    "*OnNavigateComplete2": (
      rules: [
        (
          kind: Assignment,
          match: "pdoc = ie(\"Document\")"
        )
      ]
    ),
    "*browser": (
      rules: [
        (
          kind: Function,
          match: "picload exedir + \"graphic\\\\browser.bmp\""
        )
      ]
    ),
    "*browser_load": (
      after: "*browser"
    ),
    "*browser_main": (
      after: "*browser_load"
    ),
    "*browser_event": (
      after: "*browser_main"
    ),
    "*screen_init": (
      rules: [
        (
          kind: Assignment,
          match: "inf_barh = 16"
        )
      ]
    ),
    "*screen_txtAdv": (
      rules: [
        (
          kind: Function,
          match: "gcopy BUFFER_INF, 192, 360, 24, 16"
        )
      ]
    ),
    "*screen_refresh": (
      after: "*screen_txtAdv"
    ),
    "*screen_refreshFull": (
      rules: [
        (
          kind: Function,
          match: "gcopy BUFFER_INF, 120, 504, inf_msgx, inf_verh"
        )
      ]
    ),
    "*screen_raderRefresh": (
      rules: [
        (
          kind: If,
          match: "if ( map(sx, sy, MAP_TILE_ID_MEMORY) == map(sx, sy, MAP_TILE_ID) ) {"
        )
      ]
    ),
    "*screen_draw": (
      rules: [
        (
          kind: Assignment,
          match: "screendrawhack = 1",
          exact: true
        )
      ]
    ),
    "*screen_sync": (
      after: "*screen_draw"
    ),
    "*screen_drawStatus": (
      rules: [
        (
          kind: Function,
          match: "mes _conblind"
        )
      ]
    ),
    "*autoTurn_pic": (
      rules: [
        (
          kind: Function,
          match: "picload exedir + \"\\\\graphic\\\\anime2.bmp\""
        )
      ]
    ),
    "*screen_drawAutoTurn": (
      rules: [
        (
          kind: Function,
          match: "bmes \"AUTO TURN\", 235, 235, 235"
        )
      ]
    ),
    "*screen_drawMsg2": (
      rules: [
        (
          kind: Function,
          match: "gcopy BUFFER_INF, 672, 477, ap, 2"
        )
      ]
    ),
    "*anime": (
      rules: [
        (
          kind: Assignment,
          match: "anisound = 0"
        )
      ]
    ),
    "*anime_SWEND1": (
      after: "*anime",
      loop_kind: SwitchEnd
    ),
    "*screen_setPos": (
      rules: [
        (
          kind: Assignment,
          match: "sx = cdata(CDATA_X_NEW, CHARA_PLAYER) - scx, cdata(CDATA_X_NEW, CHARA_PLAYER)"
        )
      ]
    ),
    "*los": (
      rules: [
        (
          kind: Assignment,
          match: "sy(2) = cdata(CDATA_Y, CHARA_PLAYER) - 17 / 2, cdata(CDATA_Y, CHARA_PLAYER) + 17 / 2, 17 / 2 - cdata(CDATA_Y, CHARA_PLAYER)"
        )
      ]
    ),
    "*los_jump": (
      after: "*los"
    ),
    "*los_jump2": (
      rules: [
        (
          kind: Assignment,
          match: "slight(lx, ly) += 1000"
        )
      ]
    ),
    "*los_Loc": (
      rules: [
        (
          kind: Assignment,
          match: "sy(2) = tlocinity - val / 2, tlocinity + val / 2, val / 2 - tlocinity"
        )
      ]
    ),
    "*los_draw": (
      rules: [
        (
          kind: Assignment,
          match: "screendrawhack = 2"
        )
      ]
    ),
    "*screen_rain": (
      rules: [
        (
          kind: Function,
          match: "line rainx(cnt) - 40, rainy(cnt) - cnt \\ 3 - 1, rainx(cnt) - 39 + cnt \\ 2, rainy(cnt)"
        )
      ]
    ),
    "*screen_hardRain": (
      rules: [
        (
          kind: Function,
          match: "line rainx(cnt) - 40, rainy(cnt) - cnt \\ 5 - 4, rainx(cnt) - 39 + cnt \\ 2, rainy(cnt)"
        )
      ]
    ),
    "*screen_snow": (
      rules: [
        (
          kind: Function,
          match: "gcopy BUFFER_INF, rainx(cnt) \\ 2 * 8, 600 + cnt \\ 6 * 8"
        )
      ]
    ),
    "*screen_ether": (
      rules: [
        (
          kind: Function,
          match: "gcopy BUFFER_INF, 16 + rainx(cnt) \\ 2 * 8, 600 + cnt \\ 6 * 8"
        )
      ]
    ),
    "*screen_scroll": (
      rules: [
        (
          kind: Assignment,
          match: "scrollp = cfg_walkwait"
        )
      ]
    ),
    "*rader_preDraw": (
      rules: [
        (
          kind: Function,
          match: "gfini raderw * mdata(MDATA_WIDTH), raderh * mdata(MDATA_HEIGHT)"
        )
      ]
    ),
    "*screen_drawRader": (
      rules: [
        (
          kind: Function,
          match: "pos inf_raderx + sx(1), inf_radery + sy(1)"
        )
      ]
    ),
    "*screen_fade": (
      rules: [
        (
          kind: Function,
          match: "gfini windoww, windowh - 88"
        )
      ]
    ),
    "*screen_fadeIn": (
      rules: [
        (
          kind: Function,
          match: "gfini windoww, windowh",
          exact: true
        )
      ]
    ),
    "*screen_fadeOut": (
      after: "*screen_fadeIn"
    ),
    "*screen_drawEventFull": (
      rules: [
        (
          kind: Assignment,
          match: "evscrh = windowh / evtiles - 1"
        )
      ]
    ),
    "*screen_drawEventMap": (
      rules: [
        (
          kind: Function,
          match: "pos x * evtiles, y * evtiles"
        )
      ]
    ),
    "*fishing_draw": (
      rules: [
        (
          kind: Assignment,
          match: "fishdir = 0, 1, 3, 2"
        )
      ]
    ),
    "*calcBodyFix": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_BODY_SPEED_FIX, r1) = 0"
        )
      ]
    ),
    "*calcBodyGain": (
      rules: [
        (
          kind: StringLiteral,
          match: "の身体から新たな"
        )
      ]
    ),
    "*calcLevelUp": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_SKILLPOINT, r1) += p"
        )
      ]
    ),
    "*calcGodRecruitingPenalty": (
      rules: [
        (
          kind: Assignment,
          match: "sdata(cnt + STARTING_SKILL_SPACT, r1) = limit(sdata(cnt + STARTING_SKILL_SPACT, r1) / 5, 1000 * 50000, 1000 * 400000)"
        )
      ]
    ),
    "*calcMaileINITService": (
      rules: [
        (
          kind: If,
          match: "if ( sdata(cnt + STARTING_SKILL_SPACT, r1) > 1000 * 20000 ) {"
        )
      ]
    ),
    "*calcAdvRecruitingPenalty": (
      rules: [
        (
          kind: Assignment,
          match: "sdata(cnt + STARTING_SKILL_SPACT, r1) = limit(sdata(cnt + STARTING_SKILL_SPACT, r1) / 2, 1, 1000 * 200000)"
        )
      ]
    ),
    "*calcSoulSpindlePenalty": (
      rules: [
        (
          kind: Assignment,
          match: "sdata(cnt + STARTING_SKILL_SPACT, r1) = limit(sdata(cnt + STARTING_SKILL_SPACT, r1), 1, 1000 * 50000)"
        )
      ]
    ),
    "*calcPowerUp": (
      rules: [
        (
          kind: Assignment,
          match: "sdata(mainskill(cnt) + STARTING_SKILL_SPACT, r1) = limit(sdata(mainskill(cnt)"
        )
      ]
    ),
    "*calcExpToNextLevel": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_EXP_TO_NEXT_LVL, r1) = 100000000"
        )
      ]
    ),
    "*expDig": (
      rules: [
        (
          kind: Function,
          match: "skillexp SKILL_NORMAL_MINING, CHARA_PLAYER, 100"
        )
      ]
    ),
    "*expLiteracy": (
      rules: [
        (
          kind: Function,
          match: "skillexp SKILL_NORMAL_LITERACY, CHARA_PLAYER, 15, 10, 100"
        )
      ]
    ),
    "*expTrade": (
      rules: [
        (
          kind: Function,
          match: "skillexp SKILL_NORMAL_NEGOTIATION, r1, limit(r2 / (limit(sdata(SKILL_NORMAL_NEGOTIATION, r1), 1, 100) + 10), 10, 300), 10"
        )
      ]
    ),
    "*expOpenLock": (
      rules: [
        (
          kind: Function,
          match: "skillexp SKILL_NORMAL_LOCK_PICKING, r1, 100"
        )
      ]
    ),
    "*expDetection": (
      rules: [
        (
          kind: Function,
          match: "skillexp SKILL_NORMAL_DETECTION, cc, gdata(GDATA_LEVEL) * 2 + 20"
        )
      ]
    ),
    "*expCasting": (
      rules: [
        (
          kind: Function,
          match: "skillexp SKILL_NORMAL_CASTING, r1, sdataref(SKILL_DATAREF_COST, r2) + 10, 5"
        )
      ]
    ),
    "*expMagicCapacity": (
      rules: [
        (
          kind: Function,
          match: "skillexp SKILL_NORMAL_MAGIC_CAPACITY, r1, limit(abs(cdata(CDATA_MP, r1)) * 400 / (cdata(CDATA_MAX_MP, r1) + 1),"
        )
      ]
    ),
    "*expRegen": (
      rules: [
        (
          kind: Function,
          match: "skillexp SKILL_NORMAL_HEALING, r1, 5 + sdata(SKILL_NORMAL_HEALING, r1), 1000"
        )
      ]
    ),
    "*expStealth": (
      rules: [
        (
          kind: Function,
          match: "skillexp SKILL_NORMAL_STEALTH, r1, 2, 0, 1000"
        )
      ]
    ),
    "*expInvesting": (
      rules: [
        (
          kind: Function,
          match: "skillexp SKILL_NORMAL_INVESTING, CHARA_PLAYER, 600"
        )
      ]
    ),
    "*expWeightLifting": (
      rules: [
        (
          kind: Function,
          match: "skillexp SKILL_NORMAL_WEIGHT_LIFTING, r1, 4, 0, 1000"
        )
      ]
    ),
    "*expSwimming": (
      rules: [
        (
          kind: Function,
          match: "skillexp SKILL_NORMAL_SWIMMING, r1, 4, 0, 1000"
        )
      ]
    ),
    "*expArmor": (
      rules: [
        (
          kind: Function,
          match: "skillexp SKILL_NORMAL_HEAVY_ARMOR, r1, 20, 0, 1000"
        )
      ]
    ),
    "*expRiding": (
      rules: [
        (
          kind: Function,
          match: "skillexp SKILL_ACTIVE_RIDING, r1, 4, 0, 1000"
        )
      ]
    ),
    "*expMagicDevice": (
      rules: [
        (
          kind: Function,
          match: "skillexp SKILL_NORMAL_MAGIC_DEVICE, cc, 40"
        ),
        (
          kind: Function,
          match: "return",
          exact: true
        )
      ]
    ),
    "*expFishing": (
      rules: [
        (
          kind: Function,
          match: "skillexp SKILL_NORMAL_FISHING, CHARA_PLAYER, 100"
        )
      ]
    ),
    "*expMemorize": (
      rules: [
        (
          kind: Function,
          match: "skillexp SKILL_NORMAL_MEMORIZATION, CHARA_PLAYER, 10 + sdataref(SKILL_DATAREF_DIFF, efid) / 5"
        )
      ]
    ),
    "*expProduct": (
      rules: [
        (
          kind: Function,
          match: "skillexp r1, CHARA_PLAYER, limit(100 + r2 * 30, 100, 1500)"
        )
      ]
    ),
    "*charaRefresh": (
      rules: [
        (
          kind: Assignment,
          match: "chararefreshhack = TRUE"
        )
      ]
    ),
    "*calcInitialSkill": (
      rules: [
        (
          kind: Function,
          match: "skillinit SKILL_WEAPON_LONGSWORD, r1, i"
        )
      ]
    ),
    "*calcReadCheck": (
      rules: [
        (
          kind: StringLiteral,
          match: "は余計に混乱した。"
        )
      ]
    ),
    "*calcSearch": (
      rules: [
        (
          kind: Function,
          match: "gosub *expDetection"
        )
      ]
    ),
    "*calcTrap": (
      rules: [
        (
          kind: If,
          match: "if ( rnd(refdiff + 1) < sdata(SKILL_ATTR_PER, cc) + sdata(SKILL_NORMAL_DETECTION, cc) * 4 ) {"
        )
      ]
    ),
    "*expDisarm": (
      rules: [
        (
          kind: Function,
          match: "skillexp SKILL_NORMAL_DISARM_TRAP, cc, 50"
        )
      ]
    ),
    "*calcDisarm": (
      rules: [
        (
          kind: Function,
          match: "gosub *expDisarm"
        )
      ]
    ),
    "*calcStealth": (
      rules: [
        (
          kind: If,
          match: "if ( cdata(CDATA_X, r1) > cdata(CDATA_X, r2) - cv & cdata(CDATA_X, r1) < cdata(CDATA_X, r2) + cv ) {"
        )
      ]
    ),
    "*calcHunger": (
      rules: [
        (
          kind: If,
          match: "if ( trait(TRAIT_RACE_SLOW_DIGESTION) ) {"
        )
      ]
    ),
    "*calcThirst": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_THIRST, r1) = 1"
        )
      ]
    ),
    "*calcCondition": (
      rules: [
        (
          kind: Function,
          match: "healcon r1, CONDITION_POISON, 1"
        )
      ]
    ),
    "*calcBurdenPc": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_BURDEN, CHARA_PLAYER) = 4"
        )
      ]
    ),
    "*learn_sp": (
      rules: [
        (
          kind: Assignment,
          match: "overp = 0"
        )
      ]
    ),
    "*chara_initEquip": (
      rules: [
        (
          kind: If,
          match: "if ( cdatan(CDATAN_RACE, rc) == \"mutant\" ) {"
        )
      ]
    ),
    "*set_figure": (
      rules: [
        (
          kind: If,
          match: "if ( s == \"頭\" ) {"
        )
      ]
    ),
    "*place_chara": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_X, rc) = cdata(CDATA_X, CHARA_PLAYER)"
        )
      ]
    ),
    "*place_necro": (
      rules: [
        (
          kind: Assignment,
          match: "hitugi = 0"
        ),
      ]
    ),
    "*chara_init": (
      rules: [
        (
          kind: Assignment,
          match: "npcmemory(1, dbid)++"
        )
      ]
    ),
    "*chara_fix": (
      rules: [
        (
          kind: Assignment,
          match: "cdatan(CDATAN_NAME, rc) = lang(\"《\", \"{\") + cdatan(CDATAN_NAME, rc) + lang(\"》\", \"}\")"
        )
      ]
    ),
    "*cm_finish": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_HUNGER, rc) = 9000"
        )
      ]
    ),
    "*cm_finishPC": (
      rules: [
        (
          kind: If,
          match: "if ( cdatan(CDATAN_CLASS, CHARA_PLAYER) == \"pianist\" ) {"
        )
      ]
    ),
    "*resurrect_ally": (
      rules: [
        (
          kind: Function,
          match: "txt cnven(cdatan(CDATAN_NAME, rc)) + lang(\"が現れた！\", \" \" + have(rc) + \" been resurrected!\")"
        )
      ]
    ),
    "*resurrect": (
      rules: [
        (
          kind: Function,
          match: "cbitmod CHARA_BIT_SUICIDE_SWITCH, rc, FALSE"
        )
      ]
    ),

    "*renewStatus": (
      rules: [
        (
          kind: If,
          match: "if ( cdata(STARTING_CDATA_BUFF + cnt * ARRAY_CDATA_BUFF, rc) == BUFF_PUNISHMENT ) {"
        )
      ]
    ),
    "*chara_respawn": (
      rules: [
        (
          kind: Function,
          match: "skillmod SKILL_NORMAL_PERFORMER, rc, 1000"
        )
      ]
    ),
    "*cm_init": (
      rules: [
        (
          kind: If,
          match: "if ( cfg_wizard ) {"
        ),
        (
          kind: Assignment,
          match: "mode = MODELIST_CHARA_CREATION"
        ),
        (
          kind: Function,
          match: "picload exedir + \"graphic\\\\void.bmp\", 1"
        ),
        (
          kind: StringLiteral,
          match: "これ以上は冒険者を保存できない。"
        )
      ]
    ),
    "*cm_init_WHILE1": (
      after: "*cm_init",
      loop_kind: While
    ),
    "*cm_init_WEND1": (
      after: "*cm_init_WHILE1",
      loop_kind: WhileEnd
    ),
    "*cm_aka": (
      rules: [
        (
          kind: StringLiteral,
          match: "Choose your Alias."
        )
      ]
    ),
    "*cm_aka_WHILE1": (
      after: "*cm_aka",
      loop_kind: While
    ),
    "*cm_aka_WEND1": (
      after: "*cm_aka_WHILE1",
      loop_kind: WhileEnd
    ),
    "*cm_past": (
      rules: [
        (
          kind: StringLiteral,
          match: "君の経歴を教えてくれるかな。内緒にしてもいいけれど。"
        )
      ]
    ),
    "*cm_past_loop": (
      rules: [
        (
          kind: StringLiteral,
          match: "経歴のロール"
        )
      ]
    ),
    "*cm_race": (
      rules: [
        (
          kind: If,
          match: "if ( cfg_extrarace ) {"
        )
      ]
    ),
    "*cm_race_loop": (
      after: "*cm_race"
    ),
    "*cm_race_loop_WHILE1": (
      after: "*cm_race_loop",
      loop_kind: While
    ),
    "*cm_race_name_change": (
      rules: [
        (
          kind: StringLiteral,
          match: "種族名を変更する？"
        )
      ]
    ),
    "*cm_race_name_change_input": (
      rules: [
        (
          kind: StringLiteral,
          match: "新しい種族は？"
        )
      ]
    ),
    "*cm_sex": (
      rules: [
        (
          kind: StringLiteral,
          match: "What's your gender?"
        )
      ]
    ),
    "*cm_sex_WHILE1": (
      after: "*cm_sex",
      loop_kind: While
    ),
    "*cm_sex_WEND1": (
      after: "*cm_sex_WHILE1",
      loop_kind: WhileEnd
    ),
    "*cm_class": (
      rules: [
        (
          kind: StringLiteral,
          match: "職業や種族は、初期の能力だけでなく、成長の方向性に影響するんだ。"
        )
      ]
    ),
    "*cm_class_WHILE1": (
      after: "*cm_class",
      loop_kind: While
    ),
    "*cm_class_change_name": (
      rules: [
        (
          kind: StringLiteral,
          match: "職業名を変更する？"
        )
      ]
    ),
    "*cm_class_change_name_input": (
      rules: [
        (
          kind: StringLiteral,
          match: "新しい職業は？"
        )
      ]
    ),
    "*cm_skill": (
      rules: [
        (
          kind: StringLiteral,
          match: "君の特筆すべき才能を1つ、教えてほしいな。"
        )
      ]
    ),
    "*cm_stats": (
      rules: [
        (
          kind: StringLiteral,
          match: "死にたくないなら、ある程度の能力は必要だね。"
        )
      ]
    ),
    "*cm_stats_WHILE1": (
      after: "*cm_stats",
      loop_kind: While
    ),
    "*cm_feat": (
      rules: [
        (
          kind: StringLiteral,
          match: "フィートとは、君の持っている有益な特徴だ。3つまで選べるよ。"
        )
      ]
    ),
    "*cm_portrait": (
      rules: [
        (
          kind: StringLiteral,
          match: "君の見た目を知っておきたいな。まあ、後からいつでも変えられるけどね。"
        )
      ]
    ),
    "*cmSubTxt": (
      after: "*cm_portrait"
    ),
    "*cm_gamemode": (
      rules: [
        (
          kind: StringLiteral,
          match: "あえて険しい道を行くのも君の自由だ。"
        )
      ]
    ),
    //"*cm_confirm":  (
    //   rules: [
    //     (
    //       kind: Function,
    //       match: "snd SOUNDLIST_OK1"
    //     )
    //   ]
    // ),
    // (
    //   name: "*cm_birth",
    //   rules: [
    //     (
    //       kind: Function,
    //       match: "snd SOUNDLIST_CHARA"
    //     )
    //   ]
    // ),
    "*cm_birth_loop": (
      rules: [
        (
          kind: Assignment,
          match: "cdatan(CDATAN_NAME, rc) = \"????\""
        )
      ]
    ),
    "*cm_end": (
      rules: [
        (
          kind: StringLiteral,
          match: "最後の質問だ。君の名前は？"
        )
      ]
    ),
    "*cm_name_loop": (
      rules: [
        (
          kind: StringLiteral,
          match: "あいにく、その名前の冒険者はすでに存在する。"
        )
      ]
    ),
    "*cm_bg": (
      after: "*cm_name_loop"
    ),
    "*cm_refer": (
      rules: [
        (
          kind: StringLiteral,
          match: "\"種族: \"",
          exact: true
        )
      ]
    ),
    "*convertartifact_WHILE1": (
      rules: [
        (
          kind: StringLiteral,
          match: " turns its shape into stardust."
        )
      ],
      loop_kind: While
    ),
    "*convertartifact_WEND1": (
      after: "*convertartifact_WHILE1",
      loop_kind: WhileEnd
    ),
    "*item_fltInit": (
      rules: [
        (
          kind: Assignment,
          match: "fsetincome = FILTER_ITEM_POTION, FILTER_ITEM_SCROLL, FILTER_ITEM_SCROLL, FILTER_ITEM_ROD, FILTER_ITEM_SPELLBOOK, FILTER_ORE, FILTER_ITEM_FOOD, FILTER_ITEM_FOOD"
        )
      ]
    ),
    "*item_loot": (
      rules: [
        (
          kind: Assignment,
          match: "inv(INV_ITEM_PROPERTY, ti) = PROP_INHERITED"
        )
      ]
    ),
    "*item_loot_SWEND1": (
      after: "*item_loot",
      loop_kind: SwitchEnd
    ),
    "*item_loot_SWEND2": (
      after: "*item_loot_SWEND1",
      loop_kind: SwitchEnd
    ),
    "*item_rot": (
      rules: [
        (
          kind: StringLiteral,
          match: "は腐った。"
        )
      ]
    ),
    "*curse": (
      rules: [
        (
          kind: StringLiteral,
          match: "悪意のある手が"
        )
      ]
    ),
    "*pregnant": (
      rules: [
        (
          kind: StringLiteral,
          match: "は不安げに腹を押さえた。"
        )
      ]
    ),
    "*curse_enc": (
      rules: [
        (
          kind: StringLiteral,
          match: "Something sucks "
        )
      ]
    ),
    "*item_senseQuality": (
      rules: [
        (
          kind: StringLiteral,
          match: "\"バックパックの中の\"",
          exact: true
        )
      ]
    ),
    "*item_fix": (
      rules: [
        (
          kind: Function,
          match: "encadd ci, fixeditemenc(cnt * 2), fixeditemenc(cnt * 2 + 1), 0, 0, 0, 1"
        )
      ]
    ),
    "*item_init": (
      rules: [
        (
          kind: Assignment,
          match: "fixlv++"
        )
      ]
    ),
    "*item_value": (
      rules: [
        (
          kind: Assignment,
          match: "inv(INV_ITEM_VALUE, ci) = inv(INV_ITEM_VALUE, ci) * (80 + inv(INV_ITEM_SUB_NAME, ci) * 20) / 100"
        )
      ]
    ),
    "*foodRotten": (
      rules: [
        (
          kind: Assignment,
          match: "nutrition = 1000"
        )
      ]
    ),
    "*item_cook": (
      rules: [
        (
          kind: Function,
          match: "snd SOUNDLIST_COOK1"
        )
      ]
    ),
    "*eatEffect": (
      rules: [
        (
          kind: Function,
          match: "skillexp SKILL_ATTR_STR, cc, 2000"
        )
      ]
    ),
    "*eatHard": (
      rules: [
        (
          kind: StringLiteral,
          match: "まるで鉄のように硬い！"
        )
      ]
    ),
    "*eatInsane": (
      rules: [
        (
          kind: StringLiteral,
          match: "気が変になりそうな味だ。"
        )
      ]
    ),
    "*eatHorse": (
      rules: [
        (
          kind: StringLiteral,
          match: "馬肉だ！これは精がつきそうだ。"
        )
      ]
    ),
    "*eatHoly": (
      rules: [
        (
          kind: StringLiteral,
          match: "は神聖なものを汚した気がした。"
        )
      ]
    ),
    "*eatPlayer": (
      rules: [
        (
          kind: StringLiteral,
          match: "＠を食べるなんて…"
        )
      ]
    ),
    "*eatGuard": (
      rules: [
        (
          kind: StringLiteral,
          match: "ガード達はあなたを憎悪した。"
        )
      ]
    ),
    "*eatVesda": (
      rules: [
        (
          kind: StringLiteral,
          match: "の体は一瞬燃え上がった。"
        )
      ]
    ),
    "*eatIssizzle": (
      rules: [
        (
          kind: StringLiteral,
          match: "の胃は狂気で満たされた。"
        ),
        (
          kind: Function,
          match: "resistmod cc, SKILL_RES_MIND, 50"
        ),
        (
          kind: Function,
          match: "dmgsan cc, 200"
        ),
        (
          kind: Function,
          match: "dmgcon cc, CONDITION_INSANE, 1000"
        )
      ]
    ),
    "*eatPutit": (
      rules: [
        (
          kind: StringLiteral,
          match: "肌がつるつるになりそうだ。"
        )
      ]
    ),
    "*eatCupid": (
      rules: [
        (
          kind: StringLiteral,
          match: "は恋をしている気分になった！"
        )
      ]
    ),
    "*eatPoison": (
      rules: [
        (
          kind: StringLiteral,
          match: "これは有毒だ！"
        )
      ]
    ),
    "*eatTroll": (
      rules: [
        (
          kind: StringLiteral,
          match: "血が沸き立つようだ。"
        )
      ]
    ),
    "*eatRotten": (
      rules: [
        (
          kind: StringLiteral,
          match: "腐ってるなんて分かりきっていたのに…うげぇ"
        )
      ]
    ),
    "*eatBeetle": (
      rules: [
        (
          kind: StringLiteral,
          match: "力が湧いてくるようだ。"
        )
      ]
    ),
    "*eatMandrake": (
      rules: [
        (
          kind: StringLiteral,
          match: "微かな魔力の刺激を感じた。"
        )
      ]
    ),
    "*eatGhost": (
      rules: [
        (
          kind: StringLiteral,
          match: "胃の調子がおかしい…"
        )
      ]
    ),
    "*eatHealSan": (
      rules: [
        (
          kind: StringLiteral,
          match: "この肉は心を落ち着かせる効果があるようだ。"
        )
      ]
    ),
    "*eatYith": (
      rules: [
        (
          kind: Function,
          match: "の胃は狂気で満たされた。"
        ),
        (
          kind: Function,
          match: "dmgsan cc, 50"
        ),
        (
          kind: Function,
          match: "resistmodh cc, SKILL_RES_MIND, 50"
        ),
        (
          kind: Function,
          match: "return"
        )
      ]
    ),
    "*eatChaos": (
      rules: [
        (
          kind: StringLiteral,
          match: "の胃は混沌で満たされた。"
        )
      ]
    ),
    "*eatEye": (
      rules: [
        (
          kind: StringLiteral,
          match: "の神経に電流が走った。"
        )
      ]
    ),
    "*eatCat": (
      rules: [
        (
          kind: StringLiteral,
          match: "猫を食べるなんて！！"
        )
      ]
    ),
    "*eatEther": (
      rules: [
        (
          kind: StringLiteral,
          match: "の体内はエーテルで満たされた。"
        )
      ]
    ),
    "*eatEND": (
      rules: [
        (
          kind: StringLiteral,
          match: "体力がつきそうだ。"
        )
      ]
    ),
    "*eatMAG": (
      rules: [
        (
          kind: StringLiteral,
          match: "魔力が鍛えられる。"
        )
      ]
    ),
    "*eatSTR": (
      rules: [
        (
          kind: StringLiteral,
          match: "\"力がつきそうだ。\"",
          exact: true
        )
      ]
    ),
    "*eatWIL": (
      rules: [
        (
          kind: StringLiteral,
          match: "精神が少しずぶとくなった。"
        )
      ]
    ),
    "*eatQuickling": (
      rules: [
        (
          kind: StringLiteral,
          match: "は速くなった気がする！"
        )
      ]
    ),
    "*eatAlien": (
      rules: [
        (
          kind: StringLiteral,
          match: "の体内に入り込んだ。"
        )
      ]
    ),
    "*alien_effect": (
      rules: [
        (
          kind: StringLiteral,
          match: "は寄生された。"
        )
      ]
    ),
    "*setCellObj": (
      rules: [
        (
          kind: Assignment,
          match: "tile_trap = xy2pic(3, 7)"
        )
      ]
    ),
    "*map_createRoom_FOR1": (
      rules: [
        (
          kind: If,
          match: "if ( x2 & y2 ) {"
        )
      ],
      loop_kind: For
    ),
    "*map_createRoom_FOR1_CONTINUE": (
      after: "*map_createRoom_FOR1",
      loop_kind: ForContinue
    ),
    "*map_createRoom_FOR1_BREAK1": (
      after: "*map_createRoom_FOR1_CONTINUE",
      loop_kind: ForBreak
    ),
    "*map_trap_FOR1": (
      rules: [
        (
          kind: Function,
          match: "cell_featset locvar_map_trap_dx, locvar_map_trap_dy, 0, CELL_FEATURE_TRAP, locvar_map_trap_trap"
        )
      ],
      loop_kind: For
    ),
    "*map_trap_FOR1_BREAK1": (
      after: "*map_trap_FOR1",
      loop_kind: ForBreak
    ),
    "*map_web_FOR1": (
      rules: [
        (
          kind: If,
          match: "if ( map_web_x == 0 ) {"
        )
      ],
      loop_kind: For
    ),
    "*map_web_FOR1_BREAK1": (
      after: "*map_web_FOR1",
      loop_kind: ForBreak
    ),
    "*map_barrel_FOR1": (
      rules: [
        (
          kind: Function,
          match: "cell_featset locvar_map_trap_dx, locvar_map_trap_dy, tile_pot, CELL_FEATURE_POT"
        )
      ],
      loop_kind: For
    ),
    "*map_barrel_FOR1_BREAK1": (
      after: "*map_barrel_FOR1",
      loop_kind: ForBreak
    ),
    "*map_connectroom_FOR1": (
      rules: [
        (
          kind: Function,
          match: "repeat rnd(rdroomentrance + 1) + 1"
        )
      ],
      loop_kind: For
    ),
    "*map_connectroom_FOR1_BREAK1": (
      after: "*map_connectroom_FOR1",
      loop_kind: ForBreak
    ),
    "*map_makedoor_FOR1": (
      rules: [
        (
          kind: Function,
          match: "repeat roomheight(cr) * 2 + roomwidth(cr) * 2"
        )
      ],
      loop_kind: For
    ),
    "*map_makedoor_FOR1_BREAK1": (
      after: "*map_makedoor_FOR1",
      loop_kind: ForBreak
    ),
    "*mapEditor_new": (
      rules: [
        (
          kind: Function,
          match: "dialog \"Unsaved data will be lost. Create a new map?\", 3"
        )
      ]
    ),
    "*mapEditor_menu": (
      rules: [
        (
          kind: Assignment,
          match: "wid = wparam & 65535"
        )
      ]
    ),
    "*mapEditor_init": (
      rules: [
        (
          kind: Function,
          match: "AppendMenuA hmenu(3), 0, 10, \"Map Mode Help\""
        )
      ]
    ),
    "*mapEditor_main": (
      after: "*mapEditor_init"
    ),
    "*mapEditor_main_WHILE1": (
      after: "*mapEditor_main",
      loop_kind: While
    ),
    "*mapEditor_main_WHILE1_CONTINUE": (
      after: "*mapEditor_main_WHILE1",
      loop_kind: WhileContinue
    ),
    "*mapEditor_main_WEND1": (
      after: "*mapEditor_main_WHILE1_CONTINUE",
      loop_kind: WhileEnd
    ),
    "*cmap_init1": (
      rules: [
        (
          kind: Assignment,
          match: "medititemmax++"
        )
      ]
    ),
    "*cmap_search1": (
      rules: [
        (
          kind: Assignment,
          match: "meditsearchenabled = 1"
        )
      ]
    ),
    "*cmap_refresh1": (
      rules: [
        (
          kind: Function,
          match: "repeat limit(medititemmax, 1, meditdw / dx * (325 / dy - 1))"
        )
      ]
    ),
    "*cmap_init2": (
      rules: [
        (
          kind: Assignment,
          match: "meditnpcmax = 0"
        )
      ]
    ),
    "*cmap_init3": (
      rules: [
        (
          kind: Assignment,
          match: "meditobjmax = 0"
        ),
      ]
    ),
    "*cmap_init_list": (
      rules: [
        (
          kind: Function,
          match: "notesel buff2"
        ),
        (
          kind: Function,
          match: "repeat cmapdatamax"
        )
      ]
    ),
    "*mapEditor_editMode": (
      rules: [
        (
          kind: If,
          match: "if ( meditmodeprev == 0 ) {"
        )
      ]
    ),
    "*mapEditor_delObj": (
      rules: [
        (
          kind: Assignment,
          match: "cmapdata(0, mnull) = 0, 0, 0, 0, 0"
        )
      ]
    ),
    "*mapEditor_changeProperty": (
      rules: [
        (
          kind: If,
          match: "if ( mproperty == 0 ) {"
        )
      ]
    ),
    "*mapEditor_fill": (
      rules: [
        (
          kind: Assignment,
          match: "map(cnt, p, MAP_TILE_ID) = tile + (rnd(tile(2)) == 0) * rnd(tile(1))"
        )
      ]
    ),
    "*mapEditor_setFog": (
      rules: [
        (
          kind: Assignment,
          match: "map(x, y, MAP_TILE_ID_MEMORY) = tile",
          exact: true
        )
      ]
    ),
    "*mapEditor_resize": (
      rules: [
        (
          kind: Assignment,
          match: "mapbk(x, y, MAP_TILE_ID) = map(x, y, MAP_TILE_ID)"
        )
      ]
    ),
    "*mapEditor_save1": (
      rules: [
        (
          kind: If,
          match: "if ( fmapfile == \"\" ) {"
        )
      ]
    ),
    "*mapEditor_save2": (
      rules: [
        (
          kind: Assignment,
          match: "filedsc = \"map\""
        ),
        (
          kind: Assignment,
          match: "fmode = 6"
        )
      ]
    ),
    "*mapEditor_load": (
      rules: [
        (
          kind: Assignment,
          match: "filedsc = \"map\""
        ),
        (
          kind: Assignment,
          match: "fmode = 5"
        )
      ]
    ),
    "*mapEditor_renewList": (
      rules: [
        (
          kind: Assignment,
          match: "cmapdatamax = 0"
        ),
        (
          kind: Assignment,
          match: "mlistrefresh = 1"
        )
      ]
    ),
    "*mapEditor_setCoast": (
      rules: [
        (
          kind: Assignment,
          match: "coasttile = 285"
        )
      ]
    ),
    "*mapEditor_setCoast2": (
      rules: [
        (
          kind: If,
          match: "if ( chipm(CHIPM_ROLE, map(x, y, MAP_TILE_ID)) == coasttile(3) ) {"
        )
      ]
    ),
    "*mapEditor_export": (
      rules: [
        (
          kind: Assignment,
          match: "mapeditorrader++"
        )
      ]
    ),
    "*map_randomDungeon": (
      rules: [
        (
          kind: Assignment,
          match: "rdtry++"
        )
      ]
    ),
    "*map_createDungeonHunt": (
      rules: [
        (
          kind: Function,
          match: "repeat 10 + rnd(6)"
        )
      ]
    ),
    "*map_createDungeonHarvest": (
      rules: [
        (
          kind: StringLiteral,
          match: "街周辺の畑"
        )
      ]
    ),
    "*map_createDungeonStandard": (
      rules: [
        (
          kind: Function,
          match: "map_createroom 1"
        )
      ]
    ),
    "*map_createDungeonResident": (
      after: "*map_createDungeonStandard"
    ),
    "*map_createDungeonJail": (
      after: "*map_createDungeonResident"
    ),
    "*map_createDungeonWide": (
      rules: [
        (
          kind: Assignment,
          match: "rdroomsizemax = 3"
        )
      ]
    ),
    "*map_createDungeonBigRoom": (
      rules: [
        (
          kind: Assignment,
          match: "p(2) = p"
        )
      ]
    ),
    "*map_createDungeonPerform": (
      rules: [
        (
          kind: Assignment,
          match: "gdata(GDATA_COUNT_NOTICE) = 9999"
        ),
        (
          kind: StringLiteral,
          match: "パーティー場"
        )
      ]
    ),
    "*map_createDungeonConquer": (
      rules: [
        (
          kind: Assignment,
          match: "gdata(GDATA_LEVEL_START_ON) = 5"
        )
      ]
    ),
    "*map_createDungeonHighPass": (
      rules: [
        (
          kind: Assignment,
          match: "mdata(MDATA_HEIGHT) = 60 + rnd(60)"
        )
      ]
    ),
    "*map_createDungeonMaze": (
      rules: [
        (
          kind: Assignment,
          match: "rdsecond = TRUE"
        )
      ]
    ),
    "*dighole": (
      rules: [
        (
          kind: Function,
          match: "dim maze, _mclass * _mclass"
        )
      ]
    ),
    "*map_createDungeonDog": (
      rules: [
        (
          kind: If,
          match: "if ( map(tx, ty, MAP_TILE_ID) != t ) {"
        )
      ]
    ),
    // (
    //   name: "*ExportItemDB",
    //   rules: [
    //     (
    //       kind: Function,
    //       match: "	repeat maxitemid - 2"
    //     )
    //   ]
    // ),
    // (
    //   name: "*ExportCardDescriptions",
    //   rules: [
    //     (
    //       kind: Function,
    //       match: "	repeat maxnpcid - 2"
    //     )
    //   ]
    // ),
    // (
    //   name: "*Load_Item_Highlights",
    //   rules: [
    //     (
    //       kind: Function,
    //       match: "	//Verify that the ItemList file exists, displaying an error message and returning if not."
    //     )
    //   ]
    // ),
    "*home_setup": (
      rules: [
        (
          kind: Assignment,
          match: "gdata(GDATA_HOME_BASE) = 1000"
        )
      ]
    ),
    "*building_new": (
      rules: [
        (
          kind: StringLiteral,
          match: "本当にこの場所に建設する？ "
        )
      ]
    ),
    "*setHome": (
      rules: [
        (
          kind: Assignment,
          match: "adata(ADATA_ICON, p) = xy2pic(11, 4)"
        )
      ]
    ),
    "*com_home": (
      rules: [
        (
          kind: StringLiteral,
          match: "ブリーダーを任命する"
        )
      ]
    ),
    "*com_home_WHILE1": (
      after: "*com_home",
      loop_kind: While
    ),
    "*com_home_WEND1": (
      after: "*com_home_WHILE1",
      loop_kind: WhileEnd
    ),
    "*com_home_WHILE2": (
      after: "*com_home_WEND1",
      loop_kind: While
    ),
    "*com_home_WHILE3": (
      after: "*com_home_WHILE2",
      loop_kind: While
    ),
    "*com_home_SWEND1": (
      after: "*com_home_WHILE3",
      loop_kind: SwitchEnd
    ),
    "*com_home_WEND2": (
      after: "*com_home_SWEND1",
      loop_kind: WhileEnd
    ),
    "*com_home_WEND3": (
      after: "*com_home_WEND2",
      loop_kind: WhileEnd
    ),
    "*home_setWallTile": (
      rules: [
        (
          kind: If,
          match: "if ( mdata(MDATA_TILE_FILE) != 2 | cnt >= 297 ) {"
        )
      ]
    ),
    "*shop_turn": (
      rules: [
        (
          kind: Assignment,
          match: "worker = getworker(gdata(GDATA_AREA))"
        ),
        (
          kind: If,
          match: "if ( worker != (-1) ) {"
        ),
      ]
    ),
    "*shop_turn_main": (
      rules: [
        (
          kind: StringLiteral,
          match: "[店]店には店番がいない。"
        )
      ]
    ),
    "*shop_update": (
      rules: [
        (
          kind: Assignment,
          match: "mdata(MDATA_MODERATE_CROWD) = (100 - gdata(GDATA_RANK_SHOP) / 100) / 4 + 1"
        )
      ]
    ),
    "*museum_value": (
      rules: [
        (
          kind: Assignment,
          match: "rtval = rtval / 2 * 3 + 40"
        )
      ]
    ),
    "*museum_unique_level": (
      rules: [
        (
          kind: If,
          match: "if ( cdata(CDATA_LEVEL, MAX_CHARA_NC) >= gdata(GDATA_DEEPEST_LEVEL) * 2 ) {"
        )
      ]
    ),
    "*museum_update": (
      rules: [
        (
          kind: StringLiteral,
          match: " Your museum is now known as <"
        )
      ]
    ),
    "*house_value": (
      rules: [
        (
          kind: Assignment,
          match: "gdata(GDATA_HOME_FURNITURE) += limit(inv(INV_ITEM_VALUE, val) / 50, 50, 500)"
        )
      ]
    ),
    "*house_update": (
      rules: [
        (
          kind: StringLiteral,
          match: "家具("
        )
      ]
    ),
    "*ranch_update": (
      rules: [
        (
          kind: Assignment,
          match: "livestock = 0"
        )
      ]
    ),
    "*skipBreeder": (
      rules: [
        (
          kind: Function,
          match: "itemcreate -1, ITEM_ID_SHIT, x, y, 0"
        ),
      ]
    ),
    "*fltChara": (
      rules: [
        (
          kind: Function,
          match: "flt calcobjlv(10), calcfixlv(FIX_QUALITY_GOOD)"
        )
      ]
    ),
    "*chara_spawn": (
      rules: [
        (
          kind: If,
          match: "if ( gdata(GDATA_CROWD) * 3 < mdata(MDATA_MODERATE_CROWD) * 2 ) {"
        )
      ]
    ),
    "*map_exit": (
      rules: [
        (
          kind: Assignment,
          match: "gdata(STARTING_GDATA_HELP + 1) = 1"
        )
      ]
    ),
    "*map_clean": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_EXIST, cnt) = CHAR_STATE_ADV",
          exact: true
        )
      ]
    ),
    "*map_save": (
      rules: [
        (
          kind: Assignment,
          match: "map(cnt, y, MAP_BLOOD_AND_DEBRIS) = 0"
        )
      ]
    ),
    "*map_init": (
      rules: [
        (
          kind: StringLiteral,
          match: "Warning, only do this i"
        )
      ]
    ),
    "*map_init_main": (
      rules: [
        (
          kind: Assignment,
          match: "maxmedal = 0"
        )
      ]
    ),
    "*map_preBegin": (
      rules: [
        (
          kind: StringLiteral,
          match: "三年の月日が経ち、あなたは再び冒険の旅に出た。"
        )
      ]
    ),
    "*skip_advPlace": (
      rules: [
        (
          kind: If,
          match: "if ( cbit(CHARA_BIT_HIRED, cnt) == TRUE ) {"
        )
      ]
    ),
    "*map_begin": (
      rules: [
        (
          kind: StringLiteral,
          match: "マップのロードに失敗しました。"
        )
      ]
    ),
    "*check_renew": (
      rules: [
        (
          kind: Function,
          match: "itemcreate cnt, ITEM_ID_STRADIVARIUS, -1, -1, 0"
        )
      ]
    ),
    "*map_prepareTile": (
      rules: [
        (
          kind: If,
          match: "if ( gdata(GDATA_HOUR) >= 10 & gdata(GDATA_HOUR) < 12 ) {"
        )
      ]
    ),
    "*world_newRandArea": (
      rules: [
        (
          kind: Assignment,
          match: "cyinit = rnd(mdata(MDATA_HEIGHT))"
        )
      ]
    ),
    "*world_update": (
      rules: [
        (
          kind: If,
          match: "if ( gdata(GDATA_WORLD_RENEW) == TRUE ) {"
        )
      ]
    ),
    "*world_refresh": (
      after: "*world_update"
    ),
    "*world_setArea": (
      rules: [
        (
          kind: If,
          match: "if ( adata(ADATA_ID, cnt) == 900 ) {"
        )
      ]
    ),
    "*world_clear": (
      rules: [
        (
          kind: Assignment,
          match: "map(x, y, MAP_LIGHT_TYPE) = 0"
        )
      ]
    ),
    "*setArea": (
      rules: [
        (
          kind: Assignment,
          match: "adata(ADATA_ID, p) = AREA_TEST_GROUND"
        )
      ]
    ),
    "*map_createRandArea": (
      rules: [
        (
          kind: Assignment,
          match: "adata(ADATA_ID, p) = AREA_RANDOM_DUNGEON"
        )
      ]
    ),
    "*mapEvent": (
      rules: [
        (
          kind: If,
          match: "if ( gdata(GDATA_FLAG_FIRE_GIANT) == 1 ) {"
        )
      ]
    ),
    "*ludus_festival": (
      rules: [
        (
          kind: Function,
          match: "characreate -1, CREATURE_ID_PART_TIME_WORKER2, 30, 22"
        )
      ]
    ),
    "*noyel_festival": (
      rules: [
        (
          kind: Function,
          match: "itemcreate -1, ITEM_ID_STATUE_JURE, 29, 16, 0"
        )
      ]
    ),
    "*db_card": (
      rules: [
        (
          kind: Assignment,
          match: "cardreftype = 10"
        )
      ]
    ),
    "*dbghit_WHILE1": (
      rules: [
        (
          kind: Function,
          match: "await"
        ),
        (
          kind: Function,
          match: "stick locvar_dbghit_a"
        ),
        (
          kind: If,
          match: "if ( locvar_dbghit_a ) {"
        ),
        (
          kind: Function,
          match: "return"
        )
      ],
      loop_kind: While
    ),
    "*dbghit_WEND1": (
      after: "*dbghit_WHILE1",
      loop_kind: WhileEnd
    ),
    "*tcgdraw_WHILE1": (
      rules: [
        (
          kind: Assignment,
          match: "locvar_tcgdraw_t++"
        )
      ],
      loop_kind: While
    ),
    "*tcgdraw_WEND1": (
      after: "*tcgdraw_WHILE1",
      loop_kind: WhileEnd
    ),
    "*getrandomcard_WHILE1": (
      rules: [
        (
          kind: Assignment,
          match: "locvar_tcgdraw_c = rnd(locvar_makecardlist_maxcard)"
        )
      ],
      loop_kind: While
    ),
    "*getrandomcard_WEND1": (
      after: "*getrandomcard_WHILE1",
      loop_kind: WhileEnd
    ),
    "*actionchain_WHILE1": (
      rules: [
        (
          kind: Assignment,
          match: "locvar_tcgdraw_chaintime--"
        )
      ],
      loop_kind: While
    ),
    "*actionchain_WEND1": (
      after: "*actionchain_WHILE1",
      loop_kind: WhileEnd
    ),
    "*actionproc_WHILE1": (
      rules: [
        (
          kind: Assignment,
          match: "locvar_tcgdraw_cc = locvar_actionproc_cardstack(0, locvar_actionproc_stack - 1)"
        )
      ],
      loop_kind: While
    ),
    "*actionproc_SWEND1": (
      after: "*actionproc_WHILE1",
      loop_kind: SwitchEnd
    ),
    "*actionproc_WHILE1_CONTINUE": (
      after: "*actionproc_SWEND1",
      loop_kind: WhileContinue
    ),
    "*actionproc_WEND1": (
      after: "*actionproc_WHILE1_CONTINUE",
      loop_kind: WhileEnd
    ),
    "*tcgDeck_loop": (
      rules: [
        (
          kind: Assignment,
          match: "locvar_cnvrare_s(cnt) += lang(\"のデッキ\", \" Deck\")"
        )
      ]
    ),
    "*tcgmain_WHILE1": (
      rules: [
        (
          kind: Function,
          match: "cpisme"
        ),
        (
          kind: If,
          match: "if ( gameover() ) {"
        )
      ],
      loop_kind: While
    ),
    "*tcgmain_WEND1": (
      after: "*tcgmain_WHILE1",
      loop_kind: WhileEnd
    ),
    "*phase_begin": (
      rules: [
        (
          kind: Assignment,
          match: "locvar_tcgdraw_phase = 0"
        )
      ]
    ),
    "*phase_draw": (
      rules: [
        (
          kind: Assignment,
          match: "locvar_tcgdraw_phase = 1"
        )
      ]
    ),
    "*phase_main": (
      rules: [
        (
          kind: Assignment,
          match: "locvar_tcgdraw_phase = 2"
        )
      ]
    ),
    "*phase_end": (
      rules: [
        (
          kind: Assignment,
          match: "locvar_tcgdraw_phase = 3"
        )
      ]
    ),
    "*refresh_bg": (
      rules: [
        (
          kind: Function,
          match: "dim locvar_cslinedown_mana, 10"
        )
      ]
    ),
    "*tcg_drawDeck": (
      rules: [
        (
          kind: If,
          match: "if ( locvar_cslinedown_ccf == cnt ) {"
        )
      ]
    ),
    "*tcg_drawInterface": (
      rules: [
        (
          kind: Assignment,
          match: "locvar_tcgdrawcard_x = locvar_dmgplayer_cpx(cnt)"
        )
      ]
    ),
    "*tcg_initBg": (
      rules: [
        (
          kind: Function,
          match: "repeat 2"
        ),
        (
          kind: Assignment,
          match: "locvar_makecardlist_cnt2 = cnt"
        ),
        (
          kind: Function,
          match: "gsel BUFFER_SCREEN"
        ),
        (
          kind: Function,
          match: "return"
        ),
      ]
    ),
    "*select_deck_pos": (
      rules: [
        (
          kind: If,
          match: "if ( locvar_tcgdrawcard_dsc < 0 ) {"
        )
      ]
    ),
    "*select_deck": (
      rules: [
        (
          kind: Assignment,
          match: "locvar_cslinedown_cflist = 1, 2, 3, 4, 5, 6, 7, 8, 9"
        )
      ]
    ),
    "*select_deck_loop": (
      rules: [
        (
          kind: If,
          match: "if ( locvar_cdbit_card(0, cnt) != (-1) ) {"
        )
      ]
    ),
    "*select_deck_loop_WHILE1": (
      after: "*select_deck_loop",
      loop_kind: While
    ),
    "*select_deck_loop_WHILE2": (
      after: "*select_deck_loop_WHILE1",
      loop_kind: While
    ),
    "*select_deck_loop_WHILE2_CONTINUE": (
      after: "*select_deck_loop_WHILE2",
      loop_kind: WhileContinue
    ),
    "*select_deck_loop_WEND2": (
      after: "*select_deck_loop_WHILE2_CONTINUE",
      loop_kind: WhileEnd
    ),
    "*select_deck_loop_WHILE1_CONTINUE": (
      after: "*select_deck_loop_WEND2",
      loop_kind: WhileContinue
    ),
    "*select_deck_loop_WEND1": (
      after: "*select_deck_loop_WHILE1_CONTINUE",
      loop_kind: WhileEnd
    ),
    "*card_player": (
      rules: [
        (
          kind: Assignment,
          match: "locvar_tcgdrawcard_csline = 1"
        )
      ]
    ),
    "*card_player_WHILE1": (
      after: "*card_player",
      loop_kind: While
    ),
    "*card_player_WHILE1_CONTINUE": (
      after: "*card_player_WHILE1",
      loop_kind: WhileContinue
    ),
    "*card_player_WEND1": (
      after: "*card_player_WHILE1_CONTINUE",
      loop_kind: WhileEnd
    ),
    "*select_action": (
      rules: [
        (
          kind: Function,
          match: "redraw 0"
        ),
        (
          kind: Assignment,
          match: "locvar_makecardlist_p = 0"
        ),
      ]
    ),
    "*select_action_WHILE1": (
      after: "*select_action",
      loop_kind: While
    ),
    "*select_action_WEND1": (
      after: "*select_action_WHILE1",
      loop_kind: WhileEnd
    ),
    "*ai_evaluate": (
      rules: [
        (
          kind: Assignment,
          match: "locvar_validaction_emax = 0"
        )
      ]
    ),
    "*ai_sac": (
      rules: [
        (
          kind: Assignment,
          match: "locvar_makecardlist_p(1) = 50"
        )
      ]
    ),
    "*card_ai": (
      rules: [
        (
          kind: Assignment,
          match: "locvar_validaction_ec = 0"
        )
      ]
    ),
    "*card_ai_WHILE1": (
      after: "*card_ai",
      loop_kind: While
    ),
    "*card_ai_WEND1": (
      after: "*card_ai_WHILE1",
      loop_kind: WhileEnd
    ),
    "*com_product": (
      rules: [
        (
          kind: StringLiteral,
          match: "必要スキル: "
        )
      ]
    ),
    "*com_product_loop": (
      after: "*com_product"
    ),
    "*com_material": (
      rules: [
        (
          kind: If,
          match: "if ( mat(cnt) != 0 ) {"
        )
      ]
    ),
    "*com_material_loop_pgchk": (
      after: "*com_material"
    ),
    "*com_material_loop": (
      after: "*com_material_loop_pgchk"
    ),
    "*com_txtadv": (
      rules: [
        (
          kind: StringLiteral,
          match: "ディーラーに話しかけた。"
        )
      ]
    ),
    "*com_txtadv_loop": (
      after: "*com_txtadv"
    ),
    "*com_txtadv_loop_WHILE1": (
      after: "*com_txtadv_loop",
      loop_kind: While
    ),
    "*com_adv_anime1": (
      rules: [
        (
          kind: Assignment,
          match: "mattile = rnd(mattile(2)) + mattile(1)"
        )
      ]
    ),
    "*com_adv_anime2": (
      after: "*com_adv_anime1"
    ),
    "*com_adv_animeSub": (
      rules: [
        (
          kind: Function,
          match: "gcopy BUFFER_SCREEN, 170, noteinfo(0) * 20 + 120 + txtadvmsgfix + 16, x(1), 20 * listmax"
        )
      ]
    ),
    "*com_txtAdvQuit": (
      rules: [
        (
          kind: StringLiteral,
          match: "幾つかの戦利品がある。"
        )
      ]
    ),
    "*atx_RE": (
      rules: [
        (
          kind: StringLiteral,
          match: "ランダムサイト"
        )
      ]
    ),
    "*atx_RE_main": (
      rules: [
        (
          kind: StringLiteral,
          match: "何をしよう？"
        )
      ]
    ),
    "*atx_RE_search": (
      rules: [
        (
          kind: StringLiteral,
          match: "茂みを見つけた。"
        )
      ]
    ),
    "*atx_RE_end": (
      rules: [
        (
          kind: StringLiteral,
          match: "探索を終えた。"
        )
      ]
    ),
    "*adv_casinoCard": (
      rules: [
        (
          kind: StringLiteral,
          match: "I want to play Blackjack."
        )
      ]
    ),
    "*adv_casinoBlackJack": (
      rules: [
        (
          kind: StringLiteral,
          match: "では、賭けるチップを宣言してください。"
        )
      ]
    ),
    "*set_npcGod": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_GOD, tc) = GOD_YACATECT"
        )
      ]
    ),
    "*god_init": (
      rules: [
        (
          kind: Function,
          match: "sdim godname,"
        )
      ]
    ),
    "*god_effect": (
      rules: [
        (
          kind: If,
          match: "if ( cdata(CDATA_GOD, r1) == GOD_MANI ) {"
        )
      ]
    ),
    "*god_detail": (
      rules: [
        (
          kind: StringLiteral,
          match: "マニは機械仕掛けの神です。"
        )
      ]
    ),
    "*god_select": (
      rules: [
        (
          kind: StringLiteral,
          match: "信仰を捨てる"
        )
      ]
    ),
    "*god_select_WHILE1": (
      after: "*god_select",
      loop_kind: While
    ),
    "*god_select_WEND1": (
      after: "*god_select_WHILE1",
      loop_kind: WhileEnd
    ),
    "*change_god": (
      rules: [
        (
          kind: Assignment,
          match: "gdata(GDATA_FLAG_TIMES_CONVERTED)++"
        )
      ]
    ),
    "*god_pray": (
      rules: [
        (
          kind: StringLiteral,
          match: "あなたの神に祈りを乞う？"
        )
      ]
    ),
    "*god_offer": (
      rules: [
        (
          kind: StringLiteral,
          match: " on the altar and mutter the name of "
        )
      ]
    ),
    "*god_punish": (
      rules: [
        (
          kind: Assignment,
          match: "efid = SKILL_EFFECT_CURSE"
        ),
        (
          kind: Assignment,
          match: "efid = SKILL_SPACT_PUNISHMENT"
        ),
        (
          kind: Assignment,
          match: "efid = SKILL_EFFECT_DECREASE_STAT"
        )
      ]
    ),
    "*random_event": (
      rules: [
        (
          kind: Assignment,
          match: "id = 4, 120"
        )
      ]
    ),
    "*random_eventProc": (
      rules: [
        (
          kind: StringLiteral,
          match: "夢の中の収穫"
        )
      ]
    ),
    "*random_eventProc_SWEND1": (
      after: "*random_eventProc",
      loop_kind: SwitchEnd
    ),
    "*re_select": (
      rules: [
        (
          kind: Function,
          match: "txt lang(\"「\", \"\\\"\") + listn(0, 0) + lang(\"」\", \"\\\"\")"
        )
      ]
    ),
    "*re_select_WHILE1": (
      after: "*re_select",
      loop_kind: While
    ),
    "*re_select_WEND1": (
      after: "*re_select_WHILE1",
      loop_kind: WhileEnd
    ),
    "*event_income": (
      rules: [
        (
          kind: StringLiteral,
          match: "請求書が送られてきた。"
        )
      ]
    ),
    "*initial_recipe": (
      rules: [
        (
          kind: Function,
          match: "repeat length(rplistdef)"
        )
      ]
    ),
    "*recipe_init": (
      rules: [
        (
          kind: Assignment,
          match: "rplistdef(length(rplistdef)) = "
        )
      ]
    ),
    "*com_blend": (
      rules: [
        (
          kind: Function,
          match: "picload exedir + \"graphic\\\\deco_blend.bmp\", 1"
        )
      ]
    ),
    "*com_blend_step": (
      rules: [
        (
          kind: StringLiteral,
          match: "幾つ作る？"
        )
      ]
    ),
    "*com_blend_recipe_loop": (
      after: "*com_blend_step"
    ),
    "*com_blend_recipe_loop_WHILE1": (
      after: "*com_blend_recipe_loop",
      loop_kind: While
    ),
    "*com_blend_recipe_loop_WHILE1_CONTINUE": (
      after: "*com_blend_recipe_loop_WHILE1",
      loop_kind: WhileContinue
    ),
    "*com_blend_material_loop": (
      after: "*com_blend_recipe_loop_WHILE1_CONTINUE"
    ),
    "*com_blend_material_loop_WHILE1": (
      after: "*com_blend_material_loop",
    ),
    "*com_blend_material_loop_WHILE1_CONTINUE": (
      after: "*com_blend_material_loop_WHILE1",
      loop_kind: WhileContinue
    ),
    "*com_blend_material_loop_WEND1": (
      after: "*com_blend_material_loop_WHILE1_CONTINUE",
      loop_kind: WhileEnd
    ),
    "*blend_checkMat": (
      rules: [
        (
          kind: If,
          match: "if ( rpref(10 + cnt * 2) == (-1) ) {"
        ),
        (
          kind: Assignment,
          match: "f = 0"
        )
      ]
    ),
    "*blend_deleteMat": (
      rules: [
        (
          kind: If,
          match: "if ( rpdata(RPDATA_TYPE, rpid) > 0 & cnt == 0 ) {"
        )
      ]
    ),
    "*blend_complete": (
      rules: [
        (
          kind: StringLiteral,
          match: "調合失敗！"
        )
      ]
    ),
    "*blend": (
      rules: [
        (
          kind: StringLiteral,
          match: "の調合をはじめた。"
        )
      ]
    ),
    "*blend_act": (
      rules: [
        (
          kind: StringLiteral,
          match: "あっ！空き瓶を井戸に落としてしまった…"
        )
      ]
    ),
    "*blend_act_SWEND1": (
      after: "*blend_act",
      loop_kind: SwitchEnd
    ),
    "*com_import": (
      rules: [
        (
          kind: Function,
          match: "net_dllist \".ept\", 1"
        )
      ]
    ),
    "*com_import_loop_pgchk": (
      after: "*com_import"
    ),
    "*com_import_loop": (
      after: "*com_import_loop_pgchk",
      loop_kind: While
    ),
    "*findLocation": (
      rules: [
        (
          kind: Assignment,
          match: "tlocx = cdata(CDATA_X, list(0, cnt))"
        )
      ]
    ),
    "*findLocation_WHILE1": (
      after: "*findLocation"
    ),
    "*findLocation_WHILE1_CONTINUE": (
      after: "*findLocation_WHILE1",
      loop_kind: WhileContinue
    ),
    "*com_target": (
      rules: [
        (
          kind: StringLiteral,
          match: "視界内にターゲットは存在しない。"
        ),
        (
          kind: Assignment,
          match: "page = cnt / pagesize"
        )
      ]
    ),
    "*com_target_loop_pgchk": (
      after: "*com_target"
    ),
    "*com_target_loop": (
      after: "*com_target_loop_pgchk"
    ),
    "*com_target_loop_WEND1": (
      after: "*com_target_loop",
      loop_kind: WhileEnd
    ),
    "*com_mapset": (
      rules: [
        (
          kind: Assignment,
          match: "ww = 33"
        )
      ]
    ),
    "*com_mapset_WHILE1": (
      after: "*com_mapset",
      loop_kind: While
    ),
    "*com_mapset_WHILE1_CONTINUE": (
      after: "*com_mapset_WHILE1",
      loop_kind: WhileContinue
    ),
    "*com_mapset_WEND1": (
      after: "*com_mapset_WHILE1_CONTINUE",
      loop_kind: WhileEnd
    ),
    "*com_ally": (
      rules: [
        (
          kind: If,
          match: "if ( allyctrl == 7 ) {"
        )
      ]
    ),
    "*com_ally_loop": (
      after: "*com_ally"
    ),
    "*com_ally_loop_WHILE1": (
      after: "*com_ally_loop",
      loop_type: While
    ),
    "*com_ally_loop_WHILE1_CONTINUE": (
      after: "*com_ally_loop_WHILE1",
      loop_type: Continue
    ),
    "*com_knowOther": (
      rules: [
        (
          kind: StringLiteral,
          match: "特に何も考えていない"
        )
      ]
    ),
    "*com_knowOther_loop": (
      after: "*com_knowOther"
    ),
    "*com_knowOther_pgchg": (
      after: "*com_knowOther_loop"
    ),
    "*com_knowSelf": (
      rules: [
        (
          kind: StringLiteral,
          match: "<title1>◆ "
        )
      ]
    ),
    "*com_knowSelf_loop": (
      after: "*com_knowSelf"
    ),
    "*com_knowSelf_pgchg": (
      after: "*com_knowSelf_loop"
    ),
    "*com_trait": (
      rules: [
        (
          kind: Function,
          match: "snd SOUNDLIST_FEAT"
        ),
        (
          kind: Function,
          match: "picload exedir + \"graphic\\\\deco_feat.bmp\", 1"
        ),
      ]
    ),
    "*com_trait_loop": (
      after: "*com_trait"
    ),
    "*com_trait_loop_WHILE1": (
      after: "*com_trait_loop",
      loop_kind: While
    ),
    "*com_journal": (
      rules: [
        (
          kind: StringLiteral,
          match: " - Completed Quests - "
        )
      ]
    ),
    "*com_journal_loop": (
      after: "*com_journal"
    ),
    "*com_journal_loop_pgchg": (
      after: "*com_journal_loop"
    ),
    "*com_quest": (
      rules: [
        (
          kind: StringLiteral,
          match: "新しい依頼は掲示されていないようだ。"
        )
      ]
    ),
    "*com_quest_loop_pgchk": (
      after: "*com_quest"
    ),
    "*com_quest_loop": (
      after: "*com_quest_loop_pgchk",
      loop_kind: While
    ),
    "*com_listNpc": (
      rules: [
        (
          kind: If,
          match: "if ( cdata(CDATA_EXIST, cnt) != CHAR_STATE_TEMP ) {"
        ),
        (
          kind: Assignment,
          match: "list(0, listmax) = cnt, -cdata(CDATA_LEVEL, cnt)"
        )
      ]
    ),
    "*com_listNpc_loop_pgchk": (
      after: "*com_listNpc"
    ),
    "*com_listNpc_loop": (
      after: "*com_listNpc_loop_pgchk",
      loop_kind: While
    ),
    "*com_reserve": (
      rules: [
        (
          kind: If,
          match: "if ( itemmemory(2, cnt) == 0 ) {"
        )
      ]
    ),
    "*com_reserve_loop_pgchk": (
      after: "*com_reserve"
    ),
    "*com_reserve_loop": (
      after: "*com_reserve_loop_pgchk",
      loop_kind: While
    ),
    "*com_jukebox": (
      rules: [
        (
          kind: Function,
          match: "repeat 134 - 50 - 1, 50"
        )
      ]
    ),
    "*com_jukebox_loop_pgchk": (
      after: "*com_jukebox"
    ),
    "*com_jukebox_loop": (
      rules: [
        (
          kind: Assignment,
          match: "s += \"No Music\""
        )
      ]
    ),
    "*com_listAdv": (
      rules: [
        (
          kind: Assignment,
          match: "list(0, listmax) = cnt, -cdata(CDATA_FAME, cnt)"
        )
      ]
    ),
    "*com_listAdv_loop_pgchk": (
      after: "*com_listAdv"
    ),
    "*com_listAdv_loop": (
      after: "*com_listAdv_loop_pgchk",
      loop_kind: While
    ),
    "*wish_fix": (
      rules: [
        (
          kind: Assignment,
          match: "inputlog = del_str(inputlog, lang(\"アイテム\", \"item\"))"
        )
      ]
    ),
    "*com_aka": (
      rules: [
        (
          kind: Assignment,
          match: "i = 10500"
        )
      ]
    ),
    "*com_aka_WHILE1": (
      after: "*com_aka"
    ),
    "*com_aka_WEND1": (
      after: "*com_aka_WHILE1"
    ),
    "*com_wish_end": (
      rules: [
        (
          kind: StringLiteral,
          match: "は狂喜して叫んだ。「"
        )
      ]
    ),
    "*com_wish": (
      rules: [
        (
          kind: Function,
          match: "何を望む？"
        )
      ]
    ),
    "*wish_item": (
      rules: [
        (
          kind: If,
          match: "if ( ioriginalnameref(cnt) == inputlog ) {"
        )
      ]
    ),
    "*wish_skill": (
      rules: [
        (
          kind: StringLiteral,
          match: "の技術を会得した！"
        )
      ]
    ),
    "*wish_card": (
      rules: [
        (
          kind: Function,
          match: "itemcreate -1, ITEM_ID_CARD, cdata(CDATA_X, CHARA_PLAYER), cdata(CDATA_Y, CHARA_PLAYER), 0"
        ),
        (
          kind: StringLiteral,
          match: "足元に"
        )
      ]
    ),
    "*wish_figure": (
      rules: [
        (
          kind: Function,
          match: "itemcreate -1, ITEM_ID_FIGURINE, cdata(CDATA_X, CHARA_PLAYER), cdata(CDATA_Y, CHARA_PLAYER), 0"
        ),
        (
          kind: StringLiteral,
          match: "足元に"
        )
      ]
    ),
    "*wish_monster": (
      rules: [
        (
          kind: Assignment,
          match: "p = 1000 - (strlen(s) - strlen(s2)) * 10"
        )
      ]
    ),
    "*com_shortcut": (
      rules: [
        (
          kind: StringLiteral,
          match: "そのキーにはショートカットが割り当てられていない。"
        )
      ]
    ),
    "*com_dig": (
      rules: [
        (
          kind: StringLiteral,
          match: "どの方向を掘る？"
        )
      ]
    ),
    "*com_bash": (
      rules: [
        (
          kind: StringLiteral,
          match: "どの方向に体当たりする？"
        )
      ]
    ),
    "*com_skill": (
      after: "*com_bash"
    ),
    "*com_applySkill": (
      rules: [
        (
          kind: If,
          match: "if ( spact(cnt) == 1 ) {"
        ),
        (
          kind: If,
          match: "cnt + 600 != 746"
        ),
      ]
    ),
    "*com_applySkill_loop": (
      after: "*com_applySkill",
    ),
    "*com_applySkill_loop_WHILE1": (
      after: "*com_applySkill_loop",
      loop_kind: While
    ),
    "*com_applyWideSkill": (
      rules: [
        (
          kind: If,
          match: "if ( spact(cnt) == 1 ) {"
        ),
        (
          kind: Expression,
          match: "cnt + 600 == 746"
        ),
      ]
    ),
    "*com_applyWideSkill_loop_pgchk": (
      after: "*com_applyWideSkill"
    ),
    "*com_applyWideSkill_loop": (
      after: "*com_applyWideSkill_loop_pgchk",
      loop_kind: While
    ),
    "*com_stack": (
      rules: [
        (
          kind: StringLiteral,
          match: "同じアイテムを、鮮度や価値の低いほうにあわせてまとめる？"
        )
      ]
    ),
    "*com_give": (
      rules: [
        (
          kind: StringLiteral,
          match: "どの方向に？ "
        )
      ]
    ),
    "*com_interact": (
      rules: [
        (
          kind: StringLiteral,
          match: "操作する対象の方向は？"
        )
      ]
    ),
    "*com_name": (
      after: "*com_interact",
      // rules: [
      //   (
      //     kind: StringLiteral,
      //     match: "を何と呼ぶ？ ",
      //     position: LabelTop
      //   )
      // ]
    ),
    "*com_tone": (
      rules: [
        (
          kind: StringLiteral,
          match: "デフォルトの口調"
        )
      ]
    ),
    "*com_tone_loop_pgchk": (
      after: "*com_tone"
    ),
    "*com_tone_loop": (
      after: "*com_tone_loop_pgchk"
    ),
    "*com_userNpc": (
      rules: [
        (
          kind: If,
          match: "if ( instr(userdatan(6, cnt), 0, \"_tmp_\") == (-1) ) {"
        )
      ]
    ),
    "*com_userNpc_loop_pgchk": (
      after: "*com_userNpc"
    ),
    "*com_userNpc_loop": (
      after: "*com_userNpc_loop_pgchk"
    ),
    "*com_book": (
      rules: [
        (
          kind: Function,
          match: "noteload exedir + \"data\\\\book.txt\""
        ),
        (
          kind: Assignment,
          match: "listmax = noteinfo(0)"
        ),
      ]
    ),
    "*com_book_loop": (
      after: "*com_book"
    ),
    "*com_book_loop_pgchg": (
      after: "*com_book_loop"
    ),
    "*com_spellcast": (
      after: "*com_book_loop_pgchg"
    ),
    "*com_spell": (
      rules: [
        (
          kind: If,
          match: "if ( spell(cnt) > 0 ) {"
        )
      ]
    ),
    "*com_spell_loop_pgchk": (
      after: "*com_spell"
    ),
    "*com_spell_loop": (
      after: "*com_spell_loop_pgchk"
    ),
    "*skill_desc": (
      rules: [
        (
          kind: Assignment,
          match: "s += \"\" + limit(bonus, 1, 100) + \"%\""
        )
      ]
    ),
    "*trainer_skill": (
      rules: [
        (
          kind: Assignment,
          match: "dblist(0, dbmax) ="
        ),
        (
          kind: If,
          match: "if ( gdata(GDATA_AREA) == AREA_YOWYN ) {"
        ),
        (
          kind: If,
          match: "if ( gdata(GDATA_AREA) == AREA_VERNIS ) {"
        )
      ]
    ),
    "*notable_skill": (
      after: "*trainer_skill"
    ),
    "*setHistory1": (
      rules: [
        (
          kind: StringLiteral,
          match: "生まれつき天涯孤独だった。"
        )
      ]
    ),
    "*setHistory2": (
      rules: [
        (
          kind: StringLiteral,
          match: "自分を見つめ直すため旅に出る。"
        )
      ]
    ),
    "*setHistory3": (
      rules: [
        (
          kind: StringLiteral,
          match: "温厚で慈悲深いが、"
        )
      ]
    ),
    "*setHistory4": (
      rules: [
        (
          kind: StringLiteral,
          match: "熱中すると周りが見えなくなる。"
        )
      ]
    ),
    "*setHistory5": (
      rules: [
        (
          kind: StringLiteral,
          match: "監禁が趣味"
        )
      ]
    ),
    "*com_charainfo": (
      rules: [
        (
          kind: If,
          match: "if ( dbg_showallskill ) {"
        )
      ]
    ),
    "*com_charainfo_loop": (
      after: "*com_charainfo"
    ),
    "*com_charainfo_loop_WHILE1": (
      after: "*com_charainfo_loop"
    ),
    "*com_charainfo_loop_WHILE1_CONTINUE": (
      after: "*com_charainfo_loop_WHILE1"
    ),
    "*portrait_item": (
      rules: [
        (
          kind: Assignment,
          match: "rtvaln = \"hair\""
        )
      ]
    ),
    "*get_pic_selection": (
      rules: [
        (
          kind: Assignment,
          match: "rtval = 100, 0, cdata(CDATA_PIC, cc) - 692"
        )
      ]
    ),
    "*com_item_mark": (
      rules: [
        (
          kind: StringLiteral,
          match: "移動キーでマーク移動"
        )
      ]
    ),
    "*com_item_mark_loop": (
      after: "*com_item_mark"
    ),
    "*com_item_mark_adjust": (
      rules: [
        (
          kind: StringLiteral,
          match: "angle, hit the enter key to decide the position, hit the cancel key to exit."
        )
      ]
    ),
    "*com_item_mark_adjust_loop": (
      after: "*com_item_mark_adjust"
    ),
    "*com_shape_change": (
      rules: [
        (
          kind: StringLiteral,
          match: "元々の姿にする"
        )
      ]
    ),
    "*com_shape_change_WHILE1": (
      after: "*com_shape_change"
    ),
    "*com_shape_change_WHILE1_CONTINUE": (
      after: "*com_shape_change_WHILE1"
    ),
    "*com_portrait": (
      rules: [
        (
          kind: Function,
          match: "buffer BUFFER_PIC, 3200, 112"
        )
      ]
    ),
    "*com_portrait_loop": (
      after: "*com_portrait"
    ),
    "*com_portrait_loop_WHILE1": (
      after: "*com_portrait_loop"
    ),
    "*com_portrait_loop_WHILE1_CONTINUE": (
      after: "*com_portrait_loop_WHILE1"
    ),
    "*com_mirror": (
      rules: [
        (
          kind: StringLiteral,
          match: "脚部鎧　"
        )
      ]
    ),
    "*com_mirror_loop_WHILE1": (
      after: "*com_mirror"
    ),
    "*com_calcAttack": (
      rules: [
        (
          kind: StringLiteral,
          match: "\"Unarmed\"",
          exact: true
        )
      ]
    ),
    "*com_skill_calcAttack": (
      rules: [
        (
          kind: Function,
          match: "mes lang(\"命中\", \"Hit\")"
        )
      ]
    ),
    "*show_weaponStat": (
      rules: [
        (
          kind: StringLiteral,
          match: "は両手にしっくりとおさまる。"
        )
      ]
    ),
    "*com_wear": (
      rules: [
        (
          kind: Assignment,
          match: "mainhand = cnt"
        )
      ]
    ),
    "*com_wear_loop_pgchk": (
      after: "*com_wear"
    ),
    "*com_wear_loop": (
      after: "*com_wear_loop_pgchk"
    ),
    "*com_get": (
      rules: [
        (
          kind: StringLiteral,
          match: "それは持ち運べない。"
        )
      ]
    ),
    "*com_allyInventory": (
      rules: [
        (
          kind: StringLiteral,
          match: "は忙しい。"
        )
      ]
    ),
    "*sort_list": (
      rules: [
        (
          kind: Assignment,
          match: "list(0, cnt) = list(0, cnt + 1), list(1, cnt + 1)"
        )
      ]
    ),
    "*sort_list2": (
      after: "*sort_list"
    ),
    "*com_inventory": (
      rules: [
        (
          kind: StringLiteral,
          match: "ここには祭壇がない。"
        )
      ]
    ),
    "*com_inventory_loop": (
      rules: [
        (
          kind: StringLiteral,
          match: "そのアイテムは存在しない。"
        )
      ]
    ),
    "*com_inventory_loop_WHILE1": (
      after: "*com_inventory_loop"
    ),
    "*inv_skipSc": (
      rules: [
        (
          kind: StringLiteral,
          match: "これ以上は置けない。"
        )
      ]
    ),
    "*com_inventory_end": (
      rules: [
        (
          kind: Function,
          match: "荷車の荷物は登録できない。"
        )
      ]
    ),
    "*com_inventory_loop_WHILE1_CONTINUE": (
      after: "*com_inventory_end"
    ),
    "*com_inventory_loop_WEND1": (
      after: "*com_inventory_loop_WHILE1_CONTINUE"
    ),
    "*com_identify": (
      rules: [
        (
          kind: StringLiteral,
          match: "特に情報はない"
        )
      ]
    ),
    "*com_identify_loop_pgchk": (
      after: "*com_identify",
    ),
    "*com_identify_loop": (
      after: "*com_identify_loop_pgchk"
    ),
    "*findTarget": (
      rules: [
        (
          kind: If,
          match: "if ( synccheck(cdata(CDATA_TARGET, cc), -1) == 0 ) {"
        )
      ]
    ),
    "*com_confirmAttack": (
      rules: [
        (
          kind: StringLiteral,
          match: "Really attack "
        )
      ]
    ),
    "*com_fire": (
      rules: [
        (
          kind: Function,
          match: "射撃用の道具を装備していない。"
        )
      ]
    ),
    // (
    //   name: "*FindRangeWeapon",
    //   rules: [
    //     (
    //       kind: Function,
    //       match: "inv(INV_ITEM_SKILL_REF, ammo) = SKILL_WEAPON_CROSSBOW"
    //     )
    //   ]
    // ),
    "*com_findTarget": (
      rules: [
        (
          kind: Assignment,
          match: "p = dist(cdata(CDATA_X, cc), cdata(CDATA_Y, cc), list(1, cnt), list(2, cnt))"
        )
      ]
    ),
    "*com_rest": (
      rules: [
        (
          kind: Assignment,
          match: "r1 = 50"
        )
      ]
    ),
    "*com_rowActCancel": (
      rules: [
        (
          kind: StringLiteral,
          match: "を中断したほうがいいだろうか？"
        )
      ]
    ),
    "*com_save": (
      rules: [
        (
          kind: Function,
          match: "これまでの冒険を記録して終了する？"
        )
      ]
    ),
    "*check_return": (
      rules: [
        (
          kind: Assignment,
          match: "p = gdata(GDATA_QUEST_POOL + cnt)"
        ),
        (
          kind: If,
          match: "if ( qdata(QDATA_STATE, p) == QUEST_STATE_ONGOING ) {"
        )
      ]
    ),
    "*com_return": (
      rules: [
        (
          kind: StringLiteral,
          match: "依頼請負中の帰還は法律で禁止されている。それでも帰還する？"
        )
      ]
    ),
    "*com_gasha": (
      rules: [
        (
          kind: StringLiteral,
          match: "を使ってガシャガシャする？"
        )
      ]
    ),
    "*com_train": (
      rules: [
        (
          kind: Assignment,
          match: "gdata(GDATA_ROW_ACT) = ACTION_TRAIN"
        )
      ]
    ),
    "*com_dump": (
      rules: [
        (
          kind: StringLiteral,
          match: "カスタムNPCを作成"
        )
      ]
    ),
    "*dump_chara": (
      rules: [
        (
          kind: StringLiteral,
          match: "DV        : "
        )
      ]
    ),
    "*com_ammo": (
      rules: [
        (
          kind: StringLiteral,
          match: "現在の装填弾:"
        )
      ]
    ),
    "*gene_itemfix": (
      rules: [
        (
          kind: If,
          match: "if ( inv(INV_ITEM_ID, cnt) == ITEM_ID_CARD | inv(INV_ITEM_ID, cnt) == ITEM_ID_FIGURINE ) {"
        )
      ]
    ),
    "*fixOnMapEnter": (
      rules: [
        (
          kind: Assignment,
          match: "mdata(MDATA_RESTORE_POS) = 1"
        )
      ]
    ),
    "*fixSave": (
      rules: [
        (
          kind: If,
          match: "if ( gdata(GDATA_VERSION) < "
        ),
        (
          kind: Assignment,
          match: "gdata(GDATA_VERSION) ="
        )
      ]
    ),
    "*mapReset": (
      rules: [
        (
          kind: Assignment,
          match: "gdata(GDATA_MAP_VERSION)++"
        )
      ]
    ),
    "*apply_gene": (
      rules: [
        (
          kind: Assignment,
          match: "ibigin = (ibigin - 250) / 8"
        )
      ]
    ),
    "*load_gene": (
      rules: [
        (
          kind: Assignment,
          match: "gdata(GDATA_PLAY_TIME) = genetemp(GDATA_PLAY_TIME)"
        )
      ]
    ),
    "*generate_gene": (
      rules: [
        (
          kind: Assignment,
          match: "fmode = 14"
        )
      ]
    ),
    "*unzip": (
      rules: [
        (
          kind: Function,
          match: "memcpy filetemp, filebuff, len - p * 2, 0, lenhead + p * 2"
        )
      ]
    ),
    "*set_userNpc": (
      rules: [
        (
          kind: Assignment,
          match: "cun = cdata(CDATA_USERNPC_ID, rc)"
        )
      ]
    ),
    "*userNpc_update": (
      rules: [
        (
          kind: Assignment,
          match: "usernpcmax = noteinfo(0)"
        )
      ]
    ),
    "*user_npc": (
      rules: [
        (
          kind: StringLiteral,
          match: "どのファイルからNPCを作成する？"
        )
      ]
    ),
    "*game_ctrlFile": (
      rules: [
        (
          kind: Function,
          match: "bsave folder + \"header.txt\", playerheader"
        )
      ]
    ),
    "*export_map": (
      rules: [
        (
          kind: StringLiteral,
          match: "[＋製]"
        )
      ]
    ),
    "*export_chara": (
      rules: [
        (
          kind: Assignment,
          match: "headtemp = \"【\" + gdatan(GDATAN_TEAM1) + \"】(\" + n + \"体) Lv\" + lv + \"\\n\""
        )
      ]
    ),
    "*del_userNpc": (
      rules: [
        (
          kind: Function,
          match: "dirlist buff, exedir + \"user\\\\!tmp*.npc\""
        )
      ]
    ),
    "*del_userTemp": (
      rules: [
        (
          kind: Function,
          match: "dirlist buff, exedir + \"user\\\\*.t\""
        )
      ]
    ),
    "*game_load": (
      rules: [
        (
          kind: Function,
          match: "gosub *fixSave"
        )
      ]
    ),
    "*game_save": (
      rules: [
        (
          kind: Function,
          match: "exist file + getpath(save_s, 8)"
        )
      ]
    ),
    "*extract_map": (
      rules: [
        (
          kind: Assignment,
          match: "gdata(GDATA_TELEPORT_AREA) = AREA_SHOW_HOUSE"
        )
      ]
    ),
    "*game_title": (
      rules: [
        (
          kind: Assignment,
          match: "mode = MODELIST_TITLE"
        )
      ]
    ),
    "*game_title_WHILE1": (
      after: "*game_title"
    ),
    "*game_title_selectID": (
      rules: [
        (
          kind: StringLiteral,
          match: "どの冒険を再開するんだい？"
        )
      ]
    ),
    "*game_title_selectID_WHILE1": (
      after: "*game_title_selectID"
    ),
    "*game_title_selectGen": (
      rules: [
        (
          kind: StringLiteral,
          match: "どの遺伝子を引き継ぐ？"
        )
      ]
    ),
    "*game_title_selectGen_WHILE1": (
      rules: [
        (
          kind: StringLiteral,
          match: "No gene files found"
        )
      ]
    ),
    "*define_los": (
      rules: [
        (
          kind: Function,
          match: "dim fovlist, 2, 17"
        )
      ]
    ),
    "*esc_check": (
      rules: [
        (
          kind: If,
          match: "if ( wparam == 27 ) {"
        )
      ]
    ),
    "*prompt_word": (
      rules: [
        (
          kind: Assignment,
          match: "p(3) = peek(inputlog, p(4))"
        )
      ]
    ),
    "*prompt_direction": (
      rules: [
        (
          kind: Function,
          match: "gcopy BUFFER_SCREEN, x, y, 48 * 3, 48 * 3"
        )
      ]
    ),
    "*prompt_direction_WHILE1": (
      rules: [
        (
          kind: Function,
          match: "grotate BUFFER_INF, 212, 432, 1.0 * 3.14, 28, 28"
        )
      ]
    ),
    "*prompt_direction_WHILE1_CONTINUE": (
      rules: [
        (
          kind: Function,
          match: "goto *prompt_direction_WHILE1"
        )
      ]
    ),
    "*prompt_key": (
      rules: [
        (
          kind: If,
          match: "if ( promptl(1, cnt) == \"null\" ) {"
        )
      ]
    ),
    "*prompt_key_WHILE1": (
      rules: [
        (
          kind: Function,
          match: "window2 dx(1) + sx + 20, dy, dx - 40, 36, 0, 2"
        )
      ]
    ),
    "*game_debug": (
      rules: [
        (
          kind: StringLiteral,
          match: "Debug Console"
        )
      ]
    ),
    "*game_debug_WHILE1": (
      after: "*game_debug"
    ),
    "*game_debug_WEND1": (
      after: "*game_debug_WHILE1"
    ),
    "*dbg_GetInfo": (
      rules: [
        (
          kind: StringLiteral,
          match: "Shows charainfo."
        )
      ]
    ),
    "*console_write": (
      rules: [
        (
          kind: Function,
          match: "objprm 1, dbm"
        )
      ]
    ),
    "*mutexobj": (
      rules: [
        (
          kind: Assignment,
          match: "mutex_handle = stat"
        )
      ]
    ),
    "*randomSite": (
      rules: [
        (
          kind: StringLiteral,
          match: "採掘に失敗した。"
        )
      ]
    ),
    "*disarmTrap": (
      rules: [
        (
          kind: StringLiteral,
          match: "罠を解除した。"
        )
      ]
    ),
    "*procMove": (
      rules: [
        (
          kind: StringLiteral,
          match: "槍が地面から飛び出した。"
        )
      ]
    ),
    "*perform": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_ROW_ACT, cc) = ACTION_PERFORM"
        )
      ]
    ),
    "*perform_dance": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_ROW_ACT, cc) = ACTION_PERFORM_DANCE"
        )
      ]
    ),
    "*perform_preach": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_ROW_ACT, cc) = ACTION_PERFORM_PREACH"
        )
      ]
    ),
    "*skill_charge": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_ROW_ACT, cc) = ACTION_CHARGE"
        )
      ]
    ),
    "*skill_persuasion": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_ROW_ACT, cc) = ACTION_PERSUASION"
        )
      ]
    ),
    "*skill_peculiar_joke": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_ROW_ACT, cc) = ACTION_PECULIAR_JOKE"
        )
      ]
    ),
    "*skill_blended_lie": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_ROW_ACT, cc) = ACTION_BLENDED_LIE"
        )
      ]
    ),
    "*skill_intimidation": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_ROW_ACT, cc) = ACTION_INTIMIDATION"
        )
      ]
    ),
    "*skill_mysterious_song": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_ROW_ACT, cc) = ACTION_MYSTERIOUS_SONG"
        )
      ]
    ),
    "*eat_meal": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_ROW_ACT, cc) = ACTION_MEAL"
        )
      ]
    ),
    "*eat_meal_xmas_cake": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_ROW_ACT, cc) = ACTION_XMAS_CAKE"
        )
      ]
    ),
    "*sexsex": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_ROW_ACT, cc) = ACTION_SEX"
        )
      ]
    ),
    "*skill_tuin_der_lusten": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_ROW_ACT, cc) = ACTION_TUIN_DER_LUSTEN"
        )
      ]
    ),
    "*generalAct": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_ROW_ACT, cc) = ACTION_GENERAL"
        )
      ]
    ),
    "*sleep_draw": (
      after: "*generalAct"
    ),
    "*sleep_draw_init": (
      rules: [
        (
          kind: Function,
          match: "picload exedir + \"\\\\graphic\\\\bg_night.bmp\", 1"
        )
      ]
    ),
    "*sleep": (
      rules: [
        (
          kind: StringLiteral,
          match: "しかし、大事な用を思い出して飛び起きた。"
        )
      ]
    ),
    "*rest": (
      rules: [
        (
          kind: StringLiteral,
          match: "あなたは横になった。"
        )
      ]
    ),
    "*travel": (
      rules: [
        (
          kind: Assignment,
          match: "traveldone = 1"
        )
      ]
    ),
    "*choose_fish": (
      rules: [
        (
          kind: Assignment,
          match: "dbsum += fishdata(FISHDATA_RARE, cnt)"
        )
      ]
    ),
    "*get_fish": (
      rules: [
        (
          kind: StringLiteral,
          match: "を釣り上げた！"
        )
      ]
    ),
    "*fishing": (
      rules: [
        (
          kind: StringLiteral,
          match: "何も釣れなかった…"
        )
      ]
    ),
    "*plant": (
      rules: [
        (
          kind: StringLiteral,
          match: "採取を始めた。"
        )
      ]
    ),
    "*search": (
      rules: [
        (
          kind: StringLiteral,
          match: "探索を始めた。"
        )
      ]
    ),
    "*dig": (
      rules: [
        (
          kind: StringLiteral,
          match: "鉱石を掘り始めた。"
        )
      ]
    ),
    "*eat": (
      rules: [
        (
          kind: StringLiteral,
          match: "「いただきマンモス」"
        )
      ]
    ),
    "*insta_eat": (
      rules: [
        (
          kind: Assignment,
          match: "cieat = ci"
        )
      ]
    ),
    "*eat_finish": (
      rules: [
        (
          kind: Function,
          match: "もう当分食べなくてもいい。"
        )
      ]
    ),
    "*readSpellbook": (
      rules: [
        (
          kind: StringLiteral,
          match: "は塵となって崩れ落ちた。"
        )
      ]
    ),
    "*read": (
      rules: [
        (
          kind: StringLiteral,
          match: "すくつの探索を許可する、という内容の文面が形式的に書いてある。"
        )
      ]
    ),
    "*cast": (
      rules: [
        (
          kind: Assignment,
          match: "spellbk = efid"
        )
      ]
    ),
    "*cast_proc": (
      rules: [
        (
          kind: Assignment,
          match: "efsource = 3"
        )
      ]
    ),
    "*drinkPotion": (
      rules: [
        (
          kind: If,
          match: "if ( potionthrow ) {"
        )
      ]
    ),
    "*drinkWell": (
      rules: [
        (
          kind: StringLiteral,
          match: " falls in the well!"
        )
      ]
    ),
    "*readScroll": (
      rules: [
        (
          kind: Function,
          match: "skillexp SKILL_NORMAL_LITERACY, cc, 25, 2"
        )
      ]
    ),
    "*zapStaff": (
      rules: [
        (
          kind: Function,
          match: "name(cc) + \" zap \" +"
        )
      ]
    ),
    "*zapStaffSkip": (
      after: "*zapStaff"
    ),
    "*action": (
      rules: [
        (
          kind: If,
          match: "if ( efid == SKILL_SPACT_DEATH_WORD ) {"
        )
      ]
    ),
    "*effect_selectTg": (
      rules: [
        (
          kind: Assignment,
          match: "noeffect = 0"
        )
      ]
    ),
    "*effect": (
      rules: [
        (
          kind: Assignment,
          match: "obvious = 1"
        )
      ]
    ),
    "*chainBomb_loop": (
      rules: [
        (
          kind: Assignment,
          match: "chainbomb++"
        )
      ]
    ),
    "*chainBomb_loop_WHILE1": (
      rules: [
        (
          kind: Assignment,
          match: "chainbomb--"
        )
      ]
    ),
    "*chainBomb_loop_WEND1": (
      after: "*chainBomb_loop_WHILE1"
    ),
    "*effect_SWEND1": (
      after: "*chainBomb_loop_WEND1"
    ),
    "*effect2": (
      rules: [
        (
          kind: StringLiteral,
          match: "There's a mark on the map..."
        )
      ]
    ),
    "*delMutation_cursed": (
      rules: [
        (
          kind: StringLiteral,
          match: "あなたは変容した！ "
        )
      ]
    ),
    "*spUncurse_cursed": (
      rules: [
        (
          kind: If,
          match: "if ( efid == SKILL_SPACT_CURSE ) {"
        )
      ]
    ),
    "*jump_changeCreature": (
      rules: [
        (
          kind: StringLiteral,
          match: "は変化した。"
        )
      ]
    ),
    "*effect_end": (
      rules: [
        (
          kind: Assignment,
          match: "ci = efcibk"
        ),
        (
          kind: Assignment,
          match: "efstatus = 0"
        ),
        (
          kind: Assignment,
          match: "efsource = 0"
        ),
        (
          kind: Function,
          match: "return 1"
        ),
      ]
    ),
    "*effect_heal": (
      rules: [
        (
          kind: Assignment,
          match: "subloop = 1"
        )
      ]
    ),
    "*effect_directive": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_DIRECTIVE_MODE, tc) = DIRECTIVE_MODE_INTERCEPT"
        )
      ]
    ),
    "*effect_elixer": (
      after: "*effect_directive"
    ),
    "*act_throw": (
      rules: [
        (
          kind: StringLiteral,
          match: "それは地面に落ちて砕けた。"
        )
      ]
    ),
    "*act_pray": (
      rules: [
        (
          kind: Function,
          match: "goto *god_pray"
        )
      ]
    ),
    "*act_exchange": (
      rules: [
        (
          kind: Function,
          match: "item_exchange ci, ti"
        )
      ]
    ),
    "*act_get": (
      rules: [
        (
          kind: StringLiteral,
          match: "を撤去する？ "
        )
      ]
    ),
    "*act_drop": (
      rules: [
        (
          kind: StringLiteral,
          match: "を地面に置いた。"
        )
      ]
    ),
    "*act_equip": (
      rules: [
        (
          kind: Assignment,
          match: "inv(INV_ITEM_EQUIP, ci) = body"
        )
      ]
    ),
    "*act_unequip": (
      rules: [
        (
          kind: Assignment,
          match: "ci = p - 1"
        ),
        (
          kind: Assignment,
          match: "inv(INV_ITEM_EQUIP, ci) = 0"
        )
      ]
    ),
    "*act_unequip_part": (
      rules: [
        (
          kind: If,
          match: "if ( cdata(cnt, r1) / EXT_EQUIP_SLOTS == body ) {"
        )
      ]
    ),
    "*act_read": (
      rules: [
        (
          kind: Assignment,
          match: "dbmode = DBMODE_ON_READ"
        )
      ]
    ),
    "*act_eat": (
      rules: [
        (
          kind: StringLiteral,
          match: "の食べ物を横取りした。"
        )
      ]
    ),
    "*act_drink": (
      after: "*act_eat"
    ),
    "*act_zap": (
      rules: [
        (
          kind: Function,
          match: "gosub *zapStaff"
        )
      ]
    ),
    "*act_bash": (
      rules: [
        (
          kind: StringLiteral,
          match: "に体当たりした。"
        )
      ]
    ),
    "*search_for_chara": (
      rules: [
        (
          kind: Assignment,
          match: "listmax2++"
        )
      ]
    ),
    "*act_movePC": (
      rules: [
        (
          kind: StringLiteral,
          match: "と入れ替わった。"
        )
      ]
    ),
    "*move_skip": (
      rules: [
        (
          kind: StringLiteral,
          match: "Do you want to leave "
        )
      ]
    ),
    "*act_move": (
      rules: [
        (
          kind: StringLiteral,
          match: "は蜘蛛の巣にひっかかった。"
        )
      ]
    ),
    "*cell_info": (
      rules: [
        (
          kind: StringLiteral,
          match: "地面に何かがあるようだ。"
        )
      ]
    ),
    "*act_moveLevel": (
      rules: [
        (
          kind: If,
          match: "if ( movelevelbystairs == TRUE ) {"
        )
      ]
    ),
    "*lockpick_val": (
      rules: [
        (
          kind: Assignment,
          match: "nannido = val"
        )
      ]
    ),
    "*lockpick": (
      rules: [
        (
          kind: StringLiteral,
          match: "楽勝だ。"
        )
      ]
    ),
    "*lockpick_WHILE1_CONTINUE": (
      after: "*lockpick"
    ),
    "*lockpick_WEND1": (
      after: "*lockpick_WHILE1_CONTINUE"
    ),
    "*act_open": (
      rules: [
        (
          kind: StringLiteral,
          match: "足枷を外した。"
        )
      ]
    ),
    "*act_open_SWEND1": (
      after: "*act_open"
    ),
    "*open_chest": (
      rules: [
        (
          kind: If,
          match: "if ( inv(INV_ITEM_ID, ri) == ITEM_ID_SAFE ) {"
        )
      ]
    ),
    "*open_newYear": (
      rules: [
        (
          kind: StringLiteral,
          match: "罠だ！お年玉袋は発火した。"
        )
      ]
    ),
    "*open_catbox": (
      rules: [
        (
          kind: StringLiteral,
          match: "猫が入っていた！"
        )
      ]
    ),
    "*act_openDoor": (
      rules: [
        (
          kind: StringLiteral,
          match: "は扉を開けた。"
        )
      ]
    ),
    "*act_close": (
      rules: [
        (
          kind: StringLiteral,
          match: "何を閉める？"
        )
      ]
    ),
    "*act_fire": (
      rules: [
        (
          kind: StringLiteral,
          match: "通常弾を装填した。"
        )
      ]
    ),
    "*act_melee": (
      rules: [
        (
          kind: If,
          match: "if ( cdata(CDATA_BARRIER, tc) ) {"
        )
      ]
    ),
    "*act_attack": (
      rules: [
        (
          kind: StringLiteral,
          match: "は怖気づいた。"
        )
      ]
    ),
    "*act_attackSub": (
      rules: [
        (
          kind: If,
          match: "if ( ammoproc == ENCHANT_AMMO_EXPLOSIVE ) {"
        )
      ]
    ),
    "*act_search": (
      rules: [
        (
          kind: StringLiteral,
          match: "周囲を注意深く調べた。"
        )
      ]
    ),
    "*revealTrap": (
      rules: [
        (
          kind: Function,
          match: "cell_featset refx, refy, tile_trap, -1, -1"
        )
      ]
    ),
    "*revealHiddenPath": (
      rules: [
        (
          kind: Assignment,
          match: "map(refx, refy, MAP_TILE_ID) = tile_tunnel"
        ),
        (
          kind: Function,
          match: "cell_featset refx, refy, 0, CELL_FEATURE_NONE"
        ),
        (
          kind: Function,
          match: "return"
        ),
      ]
    ),
    "*act_dig": (
      rules: [
        (
          kind: Assignment,
          match: "digx = tlocx"
        )
      ]
    ),
    "*act_dip": (
      rules: [
        (
          kind: StringLiteral,
          match: "You dip "
        )
      ]
    ),
    "*act_use": (
      rules: [
        (
          kind: StringLiteral,
          match: "act_use"
        )
      ]
    ),
    "*act_use_SWEND1": (
      after: "*act_use"
    ),
    "*gene_skill": (
      rules: [
        (
          kind: If,
          match: "if ( dbmax >= 2 ) {"
        )
      ]
    ),
    "*gene_body": (
      rules: [
        (
          kind: Assignment,
          match: "rtval = dblist(0, rnd(dbmax))"
        )
      ]
    ),
    "*item_seed": (
      rules: [
        (
          kind: StringLiteral,
          match: "You can't plant it here."
        )
      ]
    ),
    "*item_seedGrowth": (
      rules: [
        (
          kind: If,
          match: "if ( feat(FEAT_CELL_PARAM_1) \\ 50 == 0 ) {"
        )
      ]
    ),
    "*item_seedNextGrowth": (
      rules: [
        (
          kind: Assignment,
          match: "feat(FEAT_CELL_PARAM_1) += 50"
        )
      ]
    ),
    "*item_seedRegrowth": (
      rules: [
        (
          kind: StringLiteral,
          match: "新しい芽が息吹いている！"
        )
      ]
    ),
    // (
    //   name: "*item_seedRegrowth_custom",
    //   rules: [
    //     (
    //       kind: Function,
    //       match: "	p = 15"
    //     )
    //   ]
    // ),
    // (
    //   name: "*item_seedPick_custom",
    //   rules: [
    //     (
    //       kind: Function,
    //       match: "	skillexp SKILL_NORMAL_GARDENING, CHARA_PLAYER, 300"
    //     )
    //   ]
    // ),
    "*item_seedPick": (
      rules: [
        (
          kind: StringLiteral,
          match: "を収穫した。"
        )
      ]
    ),
    "*act_pickpocket": (
      rules: [
        (
          kind: Assignment,
          match: "gdata(GDATA_ROW_ACT) = ACTION_STEAL"
        ),
        (
          kind: Function,
          match: "return"
        )
      ]
    ),
    "*chat_refresh": (
      rules: [
        (
          kind: Function,
          match: "picload exedir + \"graphic\\\\face1.bmp\", 1"
        ),
        (
          kind: Function,
          match: "picload exedir + \"graphic\\\\ie_chat.bmp\""
        )
      ]
    ),
    "*chat": (
      rules: [
        (
          kind: StringLiteral,
          match: "は耳を貸さない。"
        )
      ]
    ),
    "*chat_scene": (
      after: "*chat"
    ),
    "*chat_event": (
      rules: [
        (
          kind: StringLiteral,
          match: "後になって後悔しても知らない"
        )
      ]
    ),
    "*chat_event_SWEND1": (
      after: "*chat_event"
    ),
    "*chat_unique": (
      rules: [
        (
          kind: StringLiteral,
          match: "So you've made it this far. Evidently, <Chaos> wants no poise even within their own creation...Nefia. Well, it seems they have left me no choice but to whip you!"
        )
      ]
    ),
    "*chat_unique_mizuki": (
      rules: [
        (
          kind: StringLiteral,
          match: "上記に沿って話す"
        )
      ]
    ),
    "*chat_unique_SWEND1": (
      rules: [
        (
          kind: StringLiteral,
          match: "…(あなたの言葉を聞いていない)"
        )
      ]
    ),
    "*chat_unique_leold_limb": (
      rules: [
        (
          kind: StringLiteral,
          match: "自分が試す"
        )
      ]
    ),
    // (
    //   name: "*com_change_gamemode",
    //   rules: [
    //     (
    //       kind: Function,
    //       match: "	pos 0, 0"
    //     )
    //   ]
    // ),
    "*com_change_gamemode_loop": (
      rules: [
        (
          kind: StringLiteral,
          match: "そっと目をそらす…"
        )
      ]
    ),
    "*com_change_gamemode_finish": (
      rules: [
        (
          kind: StringLiteral,
          match: "あはははははっ！本当に選んでしまったのですね…♪ようこそ、新しい宇宙へ。"
        )
      ]
    ),
    "*chat_unique_leold_maxspeed": (
      rules: [
        (
          kind: StringLiteral,
          match: "すまん。今の俺ではこれ以上鍛えることができないようだ。"
        )
      ]
    ),
    "*chat_unique_leold_lack_ap": (
      rules: [
        (
          kind: Function,
          match: "…こりゃもっとAP貯めないと無理だな。"
        )
      ]
    ),
    "*chat_unique_leold_done": (
      rules: [
        (
          kind: Assignment,
          match: "bitp = CHARA_BIT_AWAKE_INSULT"
        )
      ]
    ),
    "*chat_unique_leold_awaken": (
      rules: [
        (
          kind: StringLiteral,
          match: "スキルボーナス100獲得(消費AP1500)"
        )
      ]
    ),
    "*evochat_portrait": (
      rules: [
        (
          kind: StringLiteral,
          match: "(現在、立ち姿は決まっていない)"
        )
      ]
    ),
    "*sqMother_1": (
      rules: [
        (
          kind: Function,
          match: "(Hand her a potion of cure corruption.)"
        )
      ]
    ),
    "*chat_unique_enthumesis": (
      rules: [
        (
          kind: Assignment,
          match: "gdata(GDATA_FLAG_MAIN) = 710"
        )
      ]
    ),
    "*chat_unique_lankata": (
      rules: [
        (
          kind: Function,
          match: "chara_vanquish findchara(CREATURE_ID_ALFRED_THE_CANGNAN_WIND)"
        )
      ]
    ),
    "*chat_evOpening": (
      rules: [
        (
          kind: Function,
          match: "itemcreate -1, ITEM_ID_BEGGARS_PENDANT, 28, 6, 0"
        )
      ]
    ),
    "*chat_evReached": (
      rules: [
        (
          kind: Function,
          match: "We made it! Thank you!"
        )
      ]
    ),
    "*chat_default": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_INTEREST, tc) -= rnd(30)"
        )
      ]
    ),
    "*chat_slave": (
      rules: [
        (
          kind: Function,
          match: "Okay. Let me check the stable..."
        )
      ]
    ),
    "*chat_quest": (
      rules: [
        (
          kind: Function,
          match: "Thanks. I'm counting on you."
        )
      ]
    ),
    "*chat_instaQuest": (
      rules: [
        (
          kind: If,
          match: "if ( qdata(QDATA_EXIST, rq) == QUEST_TYPE_HUNT | qdata(QDATA_EXIST, rq) == QUEST_TYPE_HUNTEX ) {"
        )
      ]
    ),
    "*chat_train": (
      rules: [
        (
          kind: Function,
          match: "訓練が必要なときは、声をかけて"
        )
      ]
    ),
    "*chat_invest": (
      rules: [
        (
          kind: Function,
          match: "投資をしてくれる"
        )
      ]
    ),
    "*chat_end": (
      rules: [
        (
          kind: Assignment,
          match: "questteleport = 0"
        ),
        (
          kind: Assignment,
          match: "hyouzyou = 0"
        ),
        (
          kind: Function,
          match: "return"
        ),
      ]
    ),
    "*chat_select": (
      after: "*chat_end"
    ),
    "*chat_select_WHILE1": (
      after: "*chat_select"
    ),
    "*chat_select_WEND1": (
      after: "*chat_select_WHILE1"
    ),
    "*chat_draw": (
      rules: [
        (
          kind: Assignment,
          match: "chatpicloaded = FALSE"
        )
      ]
    ),
    "*chat_draw2": (
      after: "*chat_draw"
    ),
    "*shop_init": (
      rules: [
        (
          kind: If,
          match: "if ( cdata(CDATA_ROLE, tc) == ROLE_SHOP_TRADE ) {"
        ),
        (
          kind: Assignment,
          match: "invfile = cdata(CDATA_ROLE_FILE_ID, tc)"
        ),
      ]
    ),
    "*shop": (
      rules: [
        (
          kind: Assignment,
          match: "shoptrade = 1"
        )
      ]
    ),
    "*shop_end": (
      rules: [
        (
          kind: Assignment,
          match: "file = \"shoptmp.s2\""
        ),
        (
          kind: Assignment,
          match: "fmode = 3"
        ),
        (
          kind: Assignment,
          match: "mode = MODELIST_MAIN"
        ),
        (
          kind: Function,
          match: "return"
        )
      ]
    ),
    "*shop_restock": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_ROLE_RESTOCK, tc) ="
        )
      ]
    ),
    "*item_quantity": (
      rules: [
        (
          kind: Assignment,
          match: "rtval = i / 200"
        )
      ]
    ),
    "*shop_tradePrice": (
      rules: [
        (
          kind: Assignment,
          match: "trate(cnt) = 100"
        )
      ]
    ),
    "*renew_economy": (
      rules: [
        (
          kind: Assignment,
          match: "gdata(GDATA_CAPITAL) = 15"
        )
      ]
    ),
    "*com_politics_chart": (
      rules: [
        (
          kind: Function,
          match: "picload exedir + \"graphic\\\\deco_politics.bmp\", 1"
        ),
        (
          kind: Assignment,
          match: "lv = 0"
        )
      ]
    ),
    "*com_politics_chart_loop": (
      rules: [
        (
          kind: Assignment,
          match: "s = lang(\"ポストチャート\", \"City Chart\"), strhint3b"
        )
      ]
    ),
    "*com_politics_economy": (
      rules: [
        (
          kind: Function,
          match: "picload exedir + \"graphic\\\\deco_politics.bmp\", 1"
        ),
        (
          kind: Assignment,
          match: "ww = 540"
        )
      ]
    ),
    "*com_politics_economy_loop": (
      rules: [
        (
          kind: Assignment,
          match: "mdata(MDATA_CITY_PROPERTY_VALUE) = 300"
        )
      ]
    ),
    "*com_politics_rule": (
      rules: [
        (
          kind: StringLiteral,
          match: "この街の消費税は"
        )
      ]
    ),
    "*skip_rule": (
      rules: [
        (
          kind: Function,
          match: "picload exedir + \"graphic\\\\deco_politics.bmp\", 1"
        ),
        (
          kind: Assignment,
          match: "ww = 480"
        )
      ]
    ),
    "*com_politics_rule_loop_pgchk": (
      after: "*skip_rule"
    ),
    "*com_politics_rule_loop": (
      rules: [
        (
          kind: Function,
          match: "display_topic lang(\"法律\", \"Law\"), wx + 65, wy + 45"
        )
      ]
    ),
    "*com_build": (
      rules: [
        (
          kind: Assignment,
          match: "city = adata(ADATA_ECONOMY, area)"
        )
      ]
    ),
    "*com_build_WHILE1": (
      after: "*com_build",
      loop_kind: While
    ),
    "*com_build_WHILE1_CONTINUE": (
      after: "*com_build_WHILE1",
      loop_kind: WhileContinue
    ),
    "*com_build_WEND1": (
      after: "*com_build_WHILE1_CONTINUE",
      loop_kind: WhileEnd
    ),
    "*com_select_building": (
      rules: [
        (
          kind: Function,
          match: "snd SOUNDLIST_CHAT"
        ),
        (
          kind: Assignment,
          match: "cc = CHARA_PLAYER"
        ),
        (
          kind: Function,
          match: "repeat 7"
        )
      ]
    ),
    "*com_select_building_loop": (
      rules: [
        (
          kind: StringLiteral,
          match: "どの設備を建設する？"
        )
      ]
    ),
    "*com_select_building_loop_WHILE1": (
      after: "*com_select_building_loop"
    ),
    "*com_select_building_loop_WHILE1_CONTINUE": (
      after: "*com_select_building_loop_WHILE1"
    ),
    "*draw_budget": (
      rules: [
        (
          kind: Function,
          match: "\"Budget:\""
        )
      ]
    ),
    "*raceID_fix": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_RACE_ID, r1) = DB_RACE_KOBOLT"
        )
      ]
    ),
    "*db_setFilterRace": (
      rules: [
        (
          kind: Function,
          match: "dim racebit, 10, 78"
        )
      ]
    ),
    "*db_race": (
      rules: [
        (
          kind: Assignment,
          match: "listn(1, listmax) = \"wasp\""
        )
      ]
    ),
    "*db_class": (
      rules: [
        (
          kind: Assignment,
          match: "listn(1, listmax) = \"warrior\""
        )
      ]
    ),
    "*db_creature": (
      rules: [
        (
          kind: If,
          match: "if ( dbmode != DBMODE_FIND )"
        ),
        (
          kind: Assignment,
          match: "dbsum = 0"
        ),
        (
          kind: Assignment,
          match: "dbmax = 0"
        ),
      ]
    ),
    "*db_creature2": (
      rules: [
        (
          kind: Function,
          match: "return \"\" + \"/nefia1/\""
        )
      ]
    ),
    "*db_setFilterCreature": (
      rules: [
        (
          kind: Assignment,
          match: "maxnpcid = MAX_CREATURE_ID"
        )
      ]
    ),
    "*randname_test": (
      rules: [
        (
          kind: Function,
          match: "randnameinit"
        )
      ]
    ),
    "*add_ally": (
      rules: [
        (
          kind: Assignment,
          match: "gdata(GDATA_ACTIVE_GOD_PETS)--"
        )
      ]
    ),
    "*adv_init": (
      after: "*add_ally"
    ),
    "*adv_generate": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_EXIST, rc) = CHAR_STATE_ADV"
        )
      ]
    ),
    "*adv_action": (
      rules: [
        (
          kind: Function,
          match: "cbitmod CHARA_BIT_HIRED, rc, FALSE"
        )
      ]
    ),
    "*chara_item": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_AI_ITEM, rc) = ci"
        )
      ]
    ),
    "*adv_gainItem": (
      rules: [
        (
          kind: Assignment,
          match: "f = 0"
        ),
        (
          kind: Function,
          match: "inv_getheader rc"
        ),
        (
          kind: Function,
          match: "repeat 10"
        ),
        (
          kind: If,
          match: "flttypemajor = fsetitem(rnd(length(fsetitem)))"
        )
      ]
    ),
    "*chara_adjustInv": (
      rules: [
        (
          kind: Assignment,
          match: "p = inv_getfreeid(tc)"
        ),
        (
          kind: Function,
          match: "repeat 100"
        )
      ]
    ),
    "*chara_equipFull": (
      rules: [
        (
          kind: If,
          match: "if ( inv(INV_ITEM_NUM, cnt) == 0 | inv(INV_ITEM_EQUIP, cnt) != 0 ) {"
        )
      ]
    ),
    "*chara_equip": (
      rules: [
        (
          kind: Assignment,
          match: "i = iequiploc(ci)"
        )
      ]
    ),
    "*supplyEquip": (
      rules: [
        (
          kind: Assignment,
          match: "haveweapon = FALSE"
        )
      ]
    ),
    "*client_update": (
      rules: [
        (
          kind: Assignment,
          match: "qdata(QDATA_MAP, i) = gdata(GDATA_AREA)"
        )
      ]
    ),
    "*quest_reward": (
      rules: [
        (
          kind: If,
          match: "if ( qdata(QDATA_TYPE, rq) == QUEST_SUBTYPE_SUPPLY | qdata(QDATA_TYPE, rq) == QUEST_SUBTYPE_DELIVER ) {"
        )
      ]
    ),
    "*quest_update": (
      rules: [
        (
          kind: Function,
          match: "repeat gdata(GDATA_CLIENT)"
        ),
        (
          kind: If,
          match: "if ( cdata(CDATA_RELATION_ORG, rc) != RELATION_NEUTRAL ) {"
        ),
        (
          kind: If,
          match: "if ( cdata(CDATA_ROLE, rc) == ROLE_SPECIAL ) {"
        ),
        (
          kind: Function,
          match: "gosub *quest_reward"
        )
      ]
    ),
    "*quest_create": (
      rules: [
        (
          kind: Assignment,
          match: "qdata(QDATA_TYPE, rq) = QUEST_TYPE_NONE"
        )
      ]
    ),
    "*quest_check": (
      rules: [
        (
          kind: Assignment,
          match: "qdata(QDATA_DEADLINE, rq)--"
        )
      ]
    ),
    "*quest_exit": (
      rules: [
        (
          kind: Assignment,
          match: "val = gdata(GDATA_QUEST)"
        )
      ]
    ),
    "*quest_death": (
      rules: [
        (
          kind: Function,
          match: "gosub *chara_respawn"
        ),
        (
          kind: Function,
          match: "skillexp SKILL_ATTR_CHA, CHARA_PLAYER, -500"
        )
      ]
    ),
    "*quest_fail": (
      rules: [
        (
          kind: StringLiteral,
          match: "あなたは敗北した。"
        )
      ]
    ),
    "*quest_petArenaWin": (
      rules: [
        (
          kind: If,
          match: "if ( petarenawin == 1 ) {"
        )
      ]
    ),
    "*quest_eliminate": (
      rules: [
        (
          kind: If,
          match: "if ( gdata(GDATA_QUEST) == QUEST_SUBTYPE_ELIMINATE ) {"
        )
      ]
    ),
    "*quest_success": (
      rules: [
        (
          kind: Assignment,
          match: "p = qdata(QDATA_REWARD, rq)"
        )
      ]
    ),
    "*scene": (
      rules: [
        (
          kind: Assignment,
          match: "scidx = instr(buff, 0, s)"
        )
      ]
    ),
    "*scene_loop": (
      rules: [
        (
          kind: Function,
          match: "noteload lang(\"scene1.hsp\", \"scene2.hsp\")"
        ),
        (
          kind: Assignment,
          match: "scidxtop = scidx"
        )
      ]
    ),
    "*scene_loop_WHILE1": (
      rules: [
        (
          kind: Function,
          match: "instr(buff, scidx, \"{\")"
        )
      ]
    ),
    "*scene_loop_WHILE1_CONTINUE": (
      rules: [
        (
          kind: Function,
          match: "goto *scene_loop_WHILE1"
        )
      ]
    ),
    "*scene_loop_WEND1": (
      rules: [
        (
          kind: Assignment,
          match: "buff = strmid(buff, scidxtop, scidx - scidxtop)"
        )
      ]
    ),
    "*scene_end": (
      rules: [
        (
          kind: Function,
          match: "gosub *screen_fadeOut"
        ),
        (
          kind: Assignment,
          match: "msgtempprev = \"\""
        ),
      ]
    ),
    "*ai_turn": (
      rules: [
        (
          kind: Assignment,
          match: "petarenawin = 1"
        )
      ]
    ),
    "*ai_item": (
      rules: [
        (
          kind: If,
          match: "if ( a == 52000 ) {"
        ),
        (
          kind: If,
          match: "if ( a == 53000 ) {"
        ),
      ]
    ),
    "*ai_action": (
      rules: [
        (
          kind: Assignment,
          match: "retreat = 0"
        )
      ]
    ),
    "*ai_calmMove": (
      rules: [
        (
          kind: If,
          match: "if ( cdatan(CDATAN_RACE, cc) == \"cat\" ) {"
        )
      ]
    ),
    "*ai_calmMove_WEND1": (
      rules: [
        (
          kind: Assignment,
          match: "tlocx = cdata(CDATA_X, gdata(GDATA_FLAG_GIANT_ID))"
        )
      ]
    ),
    "*ai_followMove": (
      rules: [
        (
          kind: StringLiteral,
          match: "\" displace\"",
          exact: true
        )
      ]
    ),
    "*ai_moveH": (
      rules: [
        (
          kind: Assignment,
          match: "dir = 2, 0, 3"
        )
      ]
    ),
    "*ai_moveV": (
      rules: [
        (
          kind: Assignment,
          match: "dir = 0, 1, 2"
        )
      ]
    ),
    "*ai_actMain": (
      rules: [
        (
          kind: Assignment,
          match: "pcattacker = cc"
        )
      ]
    ),
    "*com_quick": (
      rules: [
        (
          kind: Assignment,
          match: "page = quickpage"
        )
      ]
    ),
    "*com_quick_loop": (
      rules: [
        (
          kind: StringLiteral,
          match: "\"aaa\"",
          exact: true
        ),
      ]
    ),
    "*com_quick_loop_WHILE1": (
      rules: [
        (
          kind: Assignment,
          match: "x = 25, 50, 50, 100, 100, 100, 150, 150, 175"
        )
      ]
    ),
    "*com_quick_loop_WEND1": (
      rules: [
        (
          kind: Assignment,
          match: "quickpage = page"
        )
      ]
    ),
    "*elona_help": (
      rules: [
        (
          kind: Function,
          match: "noteload exedir + \"data\\\\exhelp.txt\""
        )
      ]
    ),
    "*convertHelp": (
      rules: [
        (
          kind: If,
          match: "if ( instr(s(cnt), 0, \"(\") == (-1) ) {"
        )
      ]
    ),
    "*com_help": (
      rules: [
        (
          kind: Function,
          match: "lang(\"manual_JP.txt\", \"manual_ENG.txt\")"
        )
      ]
    ),
    "*com_help_loop_pgchk": (
      after: "*com_help"
    ),
    "*com_help_loop": (
      rules: [
        (
          kind: StringLiteral,
          match: "Elona In-Game Help"
        )
      ]
    ),
    "*com_chatlog": (
      rules: [
        (
          kind: Function,
          match: "picload exedir + \"graphic\\\\ie_scroll.bmp\""
        ),
        (
          kind: StringLiteral,
          match: "何かキーを押すと閉じる"
        ),
        (
          kind: Assignment,
          match: "header = instr(netbuf, 0, \"<!--START-->\")"
        )
      ]
    ),
    "*com_chatlog_WHILE1": (
      after: "*com_chatlog"
    ),
    "*com_log": (
      rules: [
        (
          kind: Function,
          match: "snd SOUNDLIST_LOG"
        )
      ]
    ),
    "*com_log_WHILE1": (
      after: "*com_log"
    ),
    "*cfg_write": (
      rules: [
        (
          kind: Function,
          match: "notesave exedir + \"\\\\config.txt\""
        )
      ]
    ),
    "*config_init": (
      rules: [
        (
          kind: Function,
          match: "dup key_identify, key_buff(2)"
        )
      ]
    ),
    "*config_loadCore": (
      rules: [
        (
          kind: StringLiteral,
          match: "infVerType."
        )
      ]
    ),
    "*config_load": (
      rules: [
        (
          kind: StringLiteral,
          match: "key_sCancel."
        )
      ]
    ),
    "*config_load_WHILE1": (
      rules: [
        (
          kind: Function,
          match: "gcopy BUFFER_BUF, 0, 0, 340, 100"
        )
      ]
    ),
    "*config_load_WEND1": (
      rules: [
        (
          kind: Assignment,
          match: "valn = \"language.\", \"\" + p"
        )
      ]
    ),
    "*dump_config": (
      rules: [
        (
          kind: Function,
          match: "noteload exedir + \"\\\\user\\\\export.txt\""
        )
      ]
    ),
    "*dump_config_import": (
      rules: [
        (
          kind: Assignment,
          match: "userrelation = int(s)"
        )
      ]
    ),
    "*com_config": (
      rules: [
        (
          kind: Assignment,
          match: "cfg_fullscreen2 = cfg_fullscreen"
        )
      ]
    ),
    "*com_config_loop": (
      rules: [
        (
          kind: Assignment,
          match: "key_quickinv = \"X\""
        ),
        (
          kind: Function,
          match: "redraw 0"
        )
      ]
    ),
    "*com_config_loop_WHILE1": (
      rules: [
        (
          kind: Function,
          match: "mes s(cfg_extrahelp)"
        )
      ]
    ),
    "*com_story": (
      rules: [
        (
          kind: Function,
          match: "\"Which scene do you want to replay?\")"
        )
      ]
    ),
    "*com_story_loop_pgchk": (
      after: "*com_story"
    ),
    "*com_story_loop": (
      rules: [
        (
          kind: Function,
          match: "mes \"Elona - Scene playback\""
        )
      ]
    ),
    "*com_story_loop_UNUSED": (
      rules: [
        (
          kind: If,
          match: "if ( idtresult == 5 ) {"
        )
      ]
    ),
    "*game_init": (
      rules: [
        (
          kind: If,
          match: "if ( dirinfo(4) == \"medit\" ) {"
        )
      ]
    ),
    "*world_init": (
      rules: [
        (
          kind: Function,
          match: "evadd EVENT_OPENING"
        )
      ]
    ),
    "*main_init": (
      rules: [
        (
          kind: Assignment,
          match: "evproc = 1"
        )
      ]
    ),
    "*spdSkip": (
      rules: [
        (
          kind: StringLiteral,
          match: "クエスト[残り"
        )
      ]
    ),
    "*weather_change": (
      rules: [
        (
          kind: If,
          match: "if ( gdata(GDATA_AREA) == AREA_NORTH_TYRIS & gdata(GDATA_WORLD_X) < 65 & gdata(GDATA_WORLD_Y) > 10 ) {"
        )
      ]
    ),
    "*advance_hour": (
      rules: [
        (
          kind: Assignment,
          match: "gdata(GDATA_NEXT_WEATHER)--"
        )
      ]
    ),
    "*game_main": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_SPEED_SUM, ct) -= mdata(MDATA_TIMESCALE)"
        )
      ]
    ),
    "*game_main_redo": (
      rules: [
        (
          kind: Assignment,
          match: "cdata(CDATA_TIME_SCALE, cc) = cdata(CDATA_SPEED_FIX, cc)"
        )
      ]
    ),
    "*game_main_redo_WHILE1": (
      rules: [
        (
          kind: Assignment,
          match: "gdata(GDATA_RETURN)--"
        )
      ]
    ),
    "*game_main_redo_WEND1": (
      rules: [
        (
          kind: Function,
          match: "modcorrupt 5"
        )
      ]
    ),
    "*turn_init": (
      rules: [
        (
          kind: If,
          match: "if ( cdata(CDATA_EXP, cc) >= cdata(CDATA_EXP_TO_NEXT_LVL, cc) ) {"
        )
      ]
    ),
    "*turn_end": (
      rules: [
        (
          kind: Assignment,
          match: "gdata(GDATA_TIME_STOP_TIME)--"
        )
      ]
    ),
    "*pc_turn_init": (
      rules: [
        (
          kind: Function,
          match: "dmghp CHARA_PLAYER, 999999, DAMAGE_FROM_CORRUPT"
        )
      ]
    ),
    "*pc_turn_init_WHILE1": (
      rules: [
        (
          kind: Assignment,
          match: "p = 16 - 1 - cnt"
        ),
      ]
    ),
    "*pc_turn_init_WHILE1_CONTINUE": (
      rules: [
        (
          kind: Function,
          match: "goto *pc_turn_init_WHILE1"
        )
      ]
    ),
    "*pc_turn_init_WEND1": (
      rules: [
        (
          kind: If,
          match: "if ( trait(TRAIT_ETHER_ADDICTED_POTION) != 0 ) {"
        )
      ]
    ),
    "*pc_turn": (
      rules: [
        (
          kind: If,
          match: "if ( firstturn == 1 ) {"
        )
      ]
    ),
    "*pcQuitY": (
      rules: [
        (
          kind: If,
          match: "if ( gdata(GDATA_QUIT_Y) != (-1) ) {"
        )
      ]
    ),
    "*game_win": (
      rules: [
        (
          kind: StringLiteral,
          match: "Unbelievable! You conquered Lesimas!"
        )
      ]
    ),
    "*game_win_WHILE1": (
      after: "*game_win"
    ),
    "*game_win_WEND1": (
      after: "*game_win_WHILE1"
    ),
    "*game_win2": (
      rules: [
        (
          kind: StringLiteral,
          match: "Unbelievable! You conquered Rehmido!"
        )
      ]
    ),
    "*game_win2_WHILE1": (
      after: "*game_win2"
    ),
    "*game_win2_WEND1": (
      after: "*game_win2_WHILE1"
    ),
    "*game_win3": (
      rules: [
        (
          kind: StringLiteral,
          match: "Unbelievable! You conquered God's prison!"
        )
      ]
    ),
    "*game_win3_WHILE1": (
      after: "*game_win3",
    ),
    "*game_win3_WEND1": (
      after: "*game_win3_WHILE1",
    ),
    "*pc_dead": (
      rules: [
        (
          kind: StringLiteral,
          match: "You leave a dying message."
        )
      ]
    ),
    "*dead_draw": (
      rules: [
        (
          kind: Assignment,
          match: "s = \"New!\""
        )
      ]
    ),
    "*event": (
      rules: [
        (
          kind: StringLiteral,
          match: "無事に納入を終えた！"
        )
      ]
    ),
    "*event_SWEND1": (
      after: "*event"
    ),
  },

  files: {
    "init.hsp": (
      begin: Function("hantozen")
    ),
    "chips.hsp": (
      begin: Function("create_pcpic")
    ),
    "etc.hsp": (
      begin: Function("cardplayerinit")
    ),
    "item_data.hsp": (
      begin: Function("getinheritance")
    ),
    "item_func.hsp": (
      begin: Function("itemcreate")
    ),
    "module.hsp": (
      begin: Function("csvstr2")
    ),
    "material_data.hsp": (
      begin: Label("*mRefDefine")
    ),
    "db_item.hsp": (
      begin: Label("*db_item")
    ),
    "chara_func.hsp": (
      begin: Function("fixaiact")
    ),
    "net.hsp": (
      begin: Function("net_send")
    ),
    "screen.hsp": (
      begin: Label("*screen_init")
    ),
    "calculation.hsp": (
      begin: Function("calcmedalvalue")
    ),
    "chara.hsp": (
      begin: Label("*learn_sp")
    ),
    "item.hsp": (
      begin: Function("convertartifact")
    ),
    "map_func.hsp": (
      begin: Label("*setCellObj")
    ),
    "map_rand.hsp": (
      begin: Label("*map_randomDungeon")
    ),
    "map_user.hsp": (
      begin: Label("*home_setup")
    ),
    "map.hsp": (
      begin: Label("*fltChara")
    ),
    "db_card.hsp": (
      begin: Label("*db_card")
    ),
    "tcg.hsp": (
      begin: Function("cdbit")
    ),
    "tcg_skill.hsp": (
      begin: Label("*cdAct_init"),
      end: Function("actionproc")
    ),
    "tcg_ai.hsp": (
      begin: Function("validaction")
    ),
    "material.hsp": (
      begin: Function("random_material")
    ),
    "txtadv.hsp": (
      begin: Function("atxinit")
    ),
    "god.hsp": (
      begin: Function("modpiety")
    ),
    "event.hsp": (
      begin: Label("*random_event")
    ),
    "blend.hsp": (
      begin: Function("rpmatname")
    ),
    "command.hsp": (
      begin: Function("txtitemoncell")
    ),
    "system.hsp": (
      begin: Label("*gene_itemfix")
    ),
    "proc.hsp": (
      begin: Function("efstatusfix")
    ),
    "action.hsp": (
      begin: Label("*act_throw")
    ),
    "chat.hsp": (
      begin: Function("clientguide")
    ),
    "economy.hsp": (
      begin: Function("addbuilding")
    ),
    "db_race.hsp": (
      begin: Label("*raceID_fix")
    ),
    "db_class.hsp": (
      begin: Label("*db_class")
    ),
    "db_creature.hsp": (
      begin: Label("*db_creature")
    ),
    "randname.hsp": (
      begin: Function("randname")
    ),
    "adv.hsp": (
      begin: Label("*add_ally")
    ),
    "quest.hsp": (
      begin: Label("*client_update")
    ),
    "scene.hsp": (
      begin: Label("*scene")
    ),
    "ai.hsp": (
      begin: Function("ai_check")
    ),
    "help.hsp": (
      begin: Label("*com_quick")
    ),
  }
)
